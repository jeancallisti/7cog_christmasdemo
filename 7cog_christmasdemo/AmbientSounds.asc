
//IMPORTANT: it's dangerous to increase this value, because AGS has only 8 channels, or even 7 if you exclude the reserved ones.
//See 
#define MAX_AMBIENTS 3

enum AmbientSystems
{
    eAmbientSystem_MonoChannel = 1, //the ambient sound system uses only one channel with AGS built-in crossfade 
    eAmbientSystem_DualChannel = 2,  //the ambient sound system uses our home-made system with two separate channels
};

AmbientSystems ambientSystem;


int findSlotCounter = 666; //DEBUG

struct AmbientChannel
{
    bool inUse;
    int volume;
    AudioChannel* channel1;
    AudioChannel* channel2; 
    AudioClip* clip;
};

bool corrupt = false; 

AmbientChannel ambients[MAX_AMBIENTS];
int ambientCount=0;

//This function checks that each channel is actually playing the clip that it's supposed to play.
//See http://www.adventuregamestudio.co.uk/forums/index.php?topic=54188.msg636548699#msg636548699
bool checkIntegrity(int i)
{
    if (!corrupt)
    {
        if (ambients[i].inUse)
        {
            if (ambientSystem == eAmbientSystem_DualChannel)
            {
                if (ambients[i].channel1.PlayingClip != ambients[i].clip || ambients[i].channel2.PlayingClip != ambients[i].clip)
                {
                    FadeIn(64);
                    String whichChannel = "";
                    if (ambients[i].channel1.PlayingClip != ambients[i].clip) whichChannel = String.Format("%s CHANNEL1",whichChannel);
                    if (ambients[i].channel2.PlayingClip != ambients[i].clip) whichChannel = String.Format("%s CHANNEL2",whichChannel);            
                    Display("Ambient\[%d of %d] dedicated to ambient sounds is playing the wrong clip on '%s'![[It means it got overwritten by another AudioClip.Play somewhere else.[[It might mean that you're playing too many sounds at a too high priority.[[Try no more than 2 ambient sounds at the same time.", i , MAX_AMBIENTS-1,   whichChannel);
                    corrupt = true;
                    return false;
                }
            }
            else //mono channel system
            {
                if (ambients[i].channel1.PlayingClip != ambients[i].clip)
                {
                    FadeIn(64);    
                    String s = String.Format("Ambient\[%d of %d] dedicated to ambient sounds is playing the wrong clip![[It means it got overwritten by another AudioClip.Play somewhere else.[[It might mean that you're playing too many sounds at a too high priority.[[Try no more than 2 ambient sounds at the same time.", i , MAX_AMBIENTS-1);
                    s = String.Format("%s [More details: expected '%s', found '%s'.", s,  SoundManagement.GetAudioClipName(ambients[i].clip),  SoundManagement.GetAudioClipName(ambients[i].channel1.PlayingClip));
                    Display(s);
                    corrupt = true;
                    return false;
                }                
            }
        }
        return true;
    }
    return false;
}


int GetSlot() 
{
   int i=0;
   while (i<MAX_AMBIENTS) {
     
     if (!ambients[i].inUse)
      return i;
     i++;
   }
   AbortGame("ERROR: too many ambient sounds, not enough free slots");
}


/*
String TestMatch(int i,  int channel)
{
    AudioClip*c;
    if (channel==1)
        c=ambients[i].channel1.PlayingClip;
    else
        c=ambients[i].channel2.PlayingClip;
    return testMatch(c);
}
*/

void DumpChannels()
{
    String dump = "";
    int i=0;
    while (i<MAX_AMBIENTS)
    {
        if (ambients[i].inUse)
        {
            String channel1 = String.Format(SoundManagement.ChannelGetAudioClipName(ambients[i].channel1));
            String channel2 = String.Format(SoundManagement.ChannelGetAudioClipName(ambients[i].channel2));
            

            if (ambientSystem==eAmbientSystem_DualChannel)
                dump= String.Format("%s[ambients\[%d]  CHANNEL1=%s  CHANNEL2=%s", dump, i,  channel1, channel2);
            else
                dump= String.Format("%s[ambients\[%d]=%s", dump, i,  channel1);
            

        }
        i++;
    }
    AGSConsole.LogConsole(dump);
    FadeIn(64);
    Display(dump);     
}



int FindSlot(AudioClip* clip)
{
  int i=0;
  while (i<MAX_AMBIENTS)
  {
    
    if (ambients[i].inUse) 
    {   
        if (ambientSystem==eAmbientSystem_DualChannel)
        {
          if ((ambients[i].channel1!= null && ambients[i].channel1.PlayingClip == clip) || (ambients[i].channel2!= null && ambients[i].channel2.PlayingClip == clip))
          {
             return i;
          }
        }
        else //mono channel system
        {
          if (ambients[i].channel1!= null && ambients[i].channel1.PlayingClip == clip)
          {
             return i;
          }
        }
    }
    i++;
  }  
  FadeIn(64); //force fade-in to show message if currently in Room_Load()
  String message = String.Format("ERROR in FindSlot: could not find audio channel playing AudioClip '%s'", SoundManagement.GetAudioClipName(clip));
  Display(message);
  Global.Log(message);
  return -1;
}


void Play_Ambient(this AudioClip*,  int volume)
{
   if (ambientCount>=MAX_AMBIENTS) {
       FadeIn(64);
       Display("Already playing %d ambients. No more allowed, BIATCH!", MAX_AMBIENTS);
       return;
   }

  int i = GetSlot();
  ambients[i].inUse = true;
  ambientCount++;
  
  ambients[i].channel1 = this.Play(1, eRepeat); //we play the sound on a first channel...
  if (ambientSystem == eAmbientSystem_DualChannel)
    ambients[i].channel2 = this.Play(1, eRepeat); ///...And we ALSO play the same sound on a second channel
    
  if (ambients[i].channel1!=null && (ambientSystem == eAmbientSystem_MonoChannel || ambients[i].channel2!=null))
  {
  

    ambients[i].channel1.Volume = 0;
    if (ambientSystem == eAmbientSystem_DualChannel) {
       ambients[i].channel2.Seek(ambients[i].channel2.LengthMs/2); // channel 2 is shifted so that it repeats exactly when channel 1 reahces its middle
       ambients[i].channel2.Volume = 0;
    } 
    ambients[i].volume = volume;
    ambients[i].clip = this;
  }
  else {
    //force fade-in to show message if currently in Room_Load()
    FadeIn(64);
    
    String msg = "ERROR: Cannot play sound. It seems like a low-level issue (DirectSound?)";
    AGSConsole.LogConsole(msg);
    Display(msg);
    
  }

}



float abs(float x)
{
    if (x<0.0)
      return -x;
    return x;
}

float fmax(float val1,  float val2)
{
    if (val1>val2) return val1;
    return val2;
}

float fmin(float val1,  float val2)
{
    if (val1<val2) return val1;
    return val2;
}

float fbound(float val, float _min, float _max)
{
    return fmin(fmax(val, _min),  _max);
}

int max(int val1,  int val2)
{
    if (val1>val2) return val1;
    return val2;
}

int min(int val1,  int val2)
{
    if (val1<val2) return val1;
    return val2;
}

int bound(int val, int _min, int _max)
{
    return min(max(val, _min),  _max);
}

void UpdateActualVolume_Dual(int i)
{
    if (ambients[i].inUse)
    {
      //pos varies from 0 to 1 (0 at the beginning of the sound, 1 at the end)
      float fpos = IntToFloat(ambients[i].channel1.PositionMs);
      float flen = IntToFloat(ambients[i].channel1.LengthMs);
      fpos = fbound(fpos, 0.0, flen); //because of a bug that sometimes makes .PositionMs bigger then .LengthMs
      float pos =  fpos/flen ;
      
      float fvol = IntToFloat(ambients[i].volume);
      
      //Formula so that vol is 0 at the beginning of the sound, 'max_volume_float' at the middle, 0 at the end
      int currentvol = FloatToInt(2.0* abs(pos - 0.5) * fvol); // at 0.0 : 0, at 0.5:ambients[i].volume, at 1.0:0
 
      //Status.Text = String.Format("%d", vol); //DEBUG
      ambients[i].channel1.Volume = bound(ambients[i].volume-currentvol, 0, ambients[i].volume);
      ambients[i].channel2.Volume = bound(currentvol, 0, ambients[i].volume); //when channel 1 is full volume, channel 2 is mute, and vice versa
    }

}

void UpdateActualVolume_Mono(int i)
{
    if (ambients[i].inUse)
    {
      //ambients[i].channel1.Volume = ambients[i].volume; //Test what happens when enabled
    }

}

void UpdateActualVolume(int i)
{
    if (ambientSystem==eAmbientSystem_DualChannel)
        UpdateActualVolume_Dual(i);
    else
        UpdateActualVolume_Mono(i);
     
}
void repeatedly_execute_always()
{
  int i=0;
  while (i<MAX_AMBIENTS)
  {
        checkIntegrity(i);
        
        if (ambients[i].inUse)
        {
              UpdateActualVolume(i);
              
              //FOR DEBUG
              if (gSoundDebug.Visible)
              {
                  if (i < SoundDebugGUI.GetNbScales())
                  {
                      if (ambientSystem == eAmbientSystem_DualChannel) {
                        int index1 = i*2; int index2 = i*2+1;
                        SoundDebugGUI.SetSoundValues(index1,    ambients[i].volume, ambients[i].channel1.Volume);
                        SoundDebugGUI.SetSoundValues(index2,    ambients[i].volume, ambients[i].channel2.Volume);                          
                      }
                      else 
                        SoundDebugGUI.SetSoundValues(i,    ambients[i].volume, ambients[i].channel1.Volume);
                  }
              }
              //END OF DEBUG
        }
        
        i++;
  }


}


void Stop_Ambient_ByIndex(int slot)
{
      if (slot>=0)
      {
           if (ambients[slot].channel1!=null)
                ambients[slot].channel1.Stop();
           if (ambients[slot].channel2!=null)
                ambients[slot].channel2.Stop();
            ambients[slot].channel1 = null;
            ambients[slot].channel2 = null;
            ambients[slot].inUse = false;
            ambientCount--;
      }

}

void Stop_Ambient(this AudioClip* )
{
  int slot = FindSlot(this);
  if (slot >=0)
    Stop_Ambient_ByIndex(slot);
  else {
      String error = String.Format("AudioClip '%s' is not currently being played", SoundManagement.GetAudioClipName(this));
      FadeIn(64);
      Display(error);
      Global.Log(error);
  }
}


void SetAmbientVolume(this AudioClip*,  int volume)
{
  if (!corrupt)
  {
      int slot = FindSlot(this);
      if (slot >=0)
      {
          ambients[slot].volume = volume;
          UpdateActualVolume(slot);
      }
      else
      {
          String error = String.Format("Audioclip::SetAmbientVolume : You tried to adjust the Ambient volume AudioClip '%s' which is not currently being played", SoundManagement.GetAudioClipName(this));
          FadeIn(64);
          Display(error);
          Global.Log(error);
          corrupt=true;
      }
  }
}


void Stop_Ambient_All()
{
  int i=0;
  while (i<MAX_AMBIENTS)
  {
    Stop_Ambient_ByIndex(i);
    i++;
  }   
  ambientCount = 0;
  corrupt=false;
}

void SetAmbientSystem(AmbientSystems s)
{
    ambientSystem = s;
}

void game_start()
{
    SetAmbientSystem(eAmbientSystem_MonoChannel);
}


function on_event(EventType event, int data) {
  if (event == eEventLeaveRoom) {
    Stop_Ambient_All();
  }
}


