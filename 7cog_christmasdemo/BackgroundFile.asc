/*

File* f;
TASKID task;
String buffer;
bool finished;
int progress;

void Reset()
{
  if (f==null) {
    task = NOTASK;
    if (buffer == null)
      buffer = "";
    finished=true;
    progress = 0;
  }
  
}

static void BackgroundFile::Open(String filename,  FileMode mode,  int estimatedSize)
{
  Reset();//safety
  
  
  if (f!=null) {
    Display("Error in 'BackgroundFile::Open'. A file is already open.);
    return;
  }
  
  f = File.Open(filename, eFileRead);
  if (f==null) {
    Display(String.Format("Error in 'BackgroundFile::Open'. Could not open file '%s' for reading.",filename));
    return;
  }
  
  task=FakeMultithread.New(filename, estimatedSize);
}


static String BackgroundFile::Read(int chars)
{
   
   if (f==null) {
    Display("'BackgroundFile::Read' : no file open");
    return;
   }
   
   String s;
   while (s.Length<chars && !f.EOF) {
     s = s.Append(f.ReadRawLineBack());
   }
   
   if (f.EOF) {
    finished = true;
    FakeMultithread.Finish(task);
    f.Close();
    f=null;
   else {
    progress = FakeMultithread.IncreaseProgress(task, chars);
   }
   
   buffer = buffer.Append(s);
   String ret = buffer.Substring(0,  chars);
   buffer = buffer.Substring(chars, buffer.Length);
   return ret;
   
}


static void BackgroundFile::Write(String s)
{
  buffer = buffer.Append(s);
}

static void BackgroundFile::Flush(int chars)
{
  while (buffer.Length > chars)
  {
    buffer = buffer.Substring(chars,  buffer.Length);
  }
  
}


static bool BackgroundFile::isFinished()
{
  return finished;
}

  
static int BackgroundFile::GetProgressPercent()
{
  return progress;
}
*/