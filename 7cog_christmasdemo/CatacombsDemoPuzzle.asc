#define MAX_SKULLS 11
struct Skull {
    Object* o;
    int sprite_on;
    bool isOn;
    eSkullsSide side;
};
Skull skulls[MAX_SKULLS];

//struct storing data for the demo's Catacombs puzzle
struct CataData {

    int nbSkulls; //length of array skulls
    
    int skullsNeededWithoutModifier[3]; //one number for each side (left, middle, right) to solve the puzzle
    int modifier[3]; //one modifier for each side (left, middle, right). the modifier is -1 or +1. Only one of them will apply (see whichModifierApplies) 
    
    eSkullsSide whichModifierApplies; //only one of the three possible modifiers is taken in account, and revealed in the saint's clue through GetSaintSentence
    int saint;
    String saintName;
    String saintSentences[3]; //One for each saint. This is the sentence taken from modifiersSentencesTemplates_Plus[Minus]One after it's been picked and rendered with the proper side name
    bool isInitialized;
    String saintClue; //The clue on the scroll in the tinted glass room
    
};
CataData cataData;

#define MAX_MODIF_TEMPLATES 3
String modifiersSentencesTemplates_PlusOne[MAX_MODIF_TEMPLATES]; //All possible sentences to indice "plus one needed" (initialized in game_start)
String modifiersSentencesTemplates_MinusOne[MAX_MODIF_TEMPLATES]; //All possible sentences to indice "minus one needed" (initialized in game_start)


//Returns true if Init has been called at least once
static bool CataPuzzle::IsInitialized()
{
    return cataData.isInitialized;
}

String GetSideName(eSkullsSide side) 
{
   switch (side) {
       case eSkullsLeft : return GetTranslation("the soul"); break;
       case eSkullsMiddle : return GetTranslation("the heart"); break;
       case eSkullsRight : return GetTranslation("the verb"); break;
       default: AbortGame("Wrong value for 'side'.");
   }
}

//returns "St. John", "St. Luke" or "St. Thomas"
static String CataPuzzle::GetSaintName()
{
    if (CataPuzzle.IsInitialized())
        return cataData.saintName;
    else
        return "UNKNOWN (visit catacombs first)";
}

//absolute value
int abs(int a) { if (a<0) { return -a; } return a; } 

//Picks a random sentence matching the required modifier, and fills in the side name.
//For example: if modifier==+1, then randomly chooses "Let them add one to %SIDENAME%, said He." and returns "Let them add one to the soul, said He."
String getModifierSentence(int modifier,  eSkullsSide side)
{
    
    if (abs(modifier) != 1)
        AbortGame("Catacombs Puzzle : bad modifier : %d", modifier);
        
    String sentence;
    int sentenceTemplate = -1;
    while (sentenceTemplate < 0) {
        sentenceTemplate = Random(MAX_MODIF_TEMPLATES-1); //0, 1 or 2
        if (modifier==1) {
            sentence = SmartString(GetTranslation(modifiersSentencesTemplates_PlusOne[sentenceTemplate]));
        } else { //-1
            sentence = SmartString(GetTranslation(modifiersSentencesTemplates_MinusOne[sentenceTemplate]));
        }
        
        if (sentence == null || sentence.Length == 0) { //this sentence was already picked (and destroyed) before
            sentenceTemplate = -1; //reset and try again
        }
    }
    
    if (modifier==1) {
        modifiersSentencesTemplates_PlusOne[sentenceTemplate] = ""; //empty it to make sure we don't pick it twice
    } else { //-1
        modifiersSentencesTemplates_MinusOne[sentenceTemplate] = ""; //empty it to make sure we don't pick it twice
    } 
    return sentence.Replace("%SIDENAME%", GetSideName(side));
}

//returns +1 or -1
int getRandomModifier()
{
    int modifier = Random(1); //0 or 1)
    if (modifier ==0) return -1;
    return 1;
}

String digitToWord(int digit)
{
    switch(digit) {
        case 0 : return GetTranslation("zero"); break;
        case 1 : return GetTranslation("one"); break;
        case 2 : return GetTranslation("two"); break;
        case 3 : return GetTranslation("three"); break;
        case 4 : return GetTranslation("four"); break;
        case 5 : return GetTranslation("five"); break;
        case 6 : return GetTranslation("six"); break;
    }
}

//Decides how many skulls should be triggered on each side
void generatePuzzle()
{
    //Pick Saint 
    cataData.saint = Random(2); //0, 1 or 2
    
    switch (cataData.saint) {
        case eSaintLuke : cataData.saintName = GetTranslation("St. Luke"); break;
        case eSaintJohn : cataData.saintName = GetTranslation("St. John"); break;
        case eSaintThomas : cataData.saintName = GetTranslation("St. Thomas"); break;
        default: AbortGame("Error in generating Saint's name");
    }
    
    //Generate basic number of skulls (without modifier)
    cataData.skullsNeededWithoutModifier[eSkullsLeft] = Random(1) +1; //1 to 2 included
    cataData.skullsNeededWithoutModifier[eSkullsMiddle] = Random(4) +1; //1 to 5 included
    cataData.skullsNeededWithoutModifier[eSkullsRight] = 1;
    
    //generate modifiers
    cataData.modifier[eSkullsLeft] = getRandomModifier(); // -1 or 1
    cataData.modifier[eSkullsMiddle] = getRandomModifier(); // -1 or 1
    cataData.modifier[eSkullsRight] = getRandomModifier(); // -1 or 1
    
    
    cataData.whichModifierApplies = Random(2); //0, 1 or 2
    
    //pick a sentence matching the modifier
    int modifier = cataData.modifier[cataData.whichModifierApplies];
    
    String sentence = getModifierSentence(modifier,  cataData.whichModifierApplies);

    cataData.saintSentences[cataData.saint] = sentence;
    
    //Give random sentences to the two other saints
    for (int i=0; i< 3; i++) {
        if (i != cataData.saint) {
            cataData.saintSentences[i] = getModifierSentence(getRandomModifier(),  Random(2));
        }
    }
    
    String countVerb = digitToWord(cataData.skullsNeededWithoutModifier[eSkullsRight]);
    String countHeart = digitToWord(cataData.skullsNeededWithoutModifier[eSkullsMiddle]);
    String countSoul = digitToWord(cataData.skullsNeededWithoutModifier[eSkullsLeft]);

    cataData.saintClue = String.Format("The verb has %s, the soul has %s. The last one has %s.", countVerb , countSoul, countHeart);
}

//returns how many skulls are in state "on" on side "side"
int countEnabledSkulls(eSkullsSide side) {
    int count = 0;
    for (int i=0; i<cataData.nbSkulls;i++) {
        if (skulls[i].side == side && skulls[i].isOn)
            count++;
    }
    return count;
}

//Returns true of all skulls are correct
static bool CataPuzzle::IsPuzzleSuceeded()
{
    bool success = true; //stays true until we find an error from the player
    
    for(eSkullsSide i=0; i<3; i++) {
        int required = cataData.skullsNeededWithoutModifier[i];
        //is it the side that has a modifier (+1 or -1) given by the Saint?
        if (i==cataData.whichModifierApplies) {
            int modifier = cataData.modifier[i];
            required = required+modifier; //for example: the puzzle says that the player needs to activate 5 + 1 skulls on this side
        }
        
        if (required != countEnabledSkulls(i)) //compare with what's actually activated in the room
            success = false;
    }
    
    return success;
    
}

static void CataPuzzle::Init(Object* _skulls[], eSkullsSide sides[], int nbSkulls)
{
    generatePuzzle();
    
    
    cataData.nbSkulls = nbSkulls;
    
    for (int i=0; i< nbSkulls; i++) {
        skulls[i].o = _skulls[i];
        skulls[i].sprite_on = _skulls[i].Graphic;
        skulls[i].isOn = false; //skulls start "off" by default;
        skulls[i].side = sides[i];
    }
    
    cataData.isInitialized = true;
}

//change the skull's graphic depending if it's on or off
static void CataPuzzle::ResyncSkullsGraphics()
{
    for (int i=0; i< cataData.nbSkulls; i++) {
        skulls[i].o.Visible = true;
        if (skulls[i].isOn){
            skulls[i].o.Graphic = skulls[i].sprite_on;
            //Display("Setting object %d to graphic %d",skull[i].o.ID,  skull[i].sprite_on);
        } else { 
            skulls[i].o.Graphic = 0;
            //Display("Setting object %d to graphic 0",skull[i].o.ID);
        }
    }
    Wait(1);
    
    //DEBUG
    /*
    String s= "";
    for (int i=0; i< MAX_SKULLS; i++) {
        s = String.Format("%s[(%d)={%d,%d}", s,  i,  skull[i].isOn, skull[i].sprite_on );
    }
    Display(s);
    */
}


//to be called whenever the player toggles a skull
static void CataPuzzle::ToggleSkull(int skullIndex)
{
    //Display("Toggling %d", sk);
    skulls[skullIndex].isOn = !skulls[skullIndex].isOn; //toggle
    CataPuzzle.ResyncSkullsGraphics(); //sync graphics 
    
}


//returns "right", "middle" or "left"
static eSkullsSide CataPuzzle::GetSkullSide(int skullIndex)
{
    return skulls[skullIndex].side;
}
    
//Returns the clue for one specific saint, as a sentence
static String CataPuzzle::GetSaintSentence(eSaints saint)
{
    if (CataPuzzle.IsInitialized())
        return cataData.saintSentences[saint];
    else
        return "UNKNOWN (visit catacombs first)";
}



void game_start()
{
    //INITIALIZATION OF GENERIC SENTENCES (some of them will be picked later)
    // DO NOT TRANSLATE THEM HERE as the language can be chosen by the player long after game_start...
    
    //generic sentences for modifiers "+1"
    modifiersSentencesTemplates_PlusOne[0] = "And they saw that %SIDENAME% needed one more to please the Lord.";
    modifiersSentencesTemplates_PlusOne[1] = "Let them add one to %SIDENAME%, said He.";
    modifiersSentencesTemplates_PlusOne[2] = "The truth will be revealed to them if %SIDENAME% has one more.";
    
    //generic sentences for modifiers "-1"
    modifiersSentencesTemplates_MinusOne[0] = "'Forget this folly and remove one from %SIDENAME%.', He said to them.";
    modifiersSentencesTemplates_MinusOne[1] = "The humility commands you to remove one from %SIDENAME%.";
    modifiersSentencesTemplates_MinusOne[2] = "VER:1.1DATA:He looked and said: 'You choose that number for %SIDENAME%? That is one too many'.";
}


//Returns the clue for one specific saint, as a sentence
static String CataPuzzle::GetSaintClue()
{
    if (CataPuzzle.IsInitialized())
        return cataData.saintClue;
    else
        return "UNKNOWN (visit catacombs first)";
}


