#define ENTITYINDEX int
#define MAXENTITY 20
#define STEAM_SPEED 5
enum SpritesEnum {
    eSpr_switchStateUp = 514, // Sprite numbers. Must match!
    eSpr_switchStateDown = 511, 
    eSpr_leakNotFixed = 517, 
    eSpr_leakFixed = 518, 
    eView_DownToUp = SWITCH_DOWN_TO_UP, 
    eView_UpToDown = SWITCH_UP_TO_DOWN
};

struct Entity {
    String name;
    int state;
    Object* obj;
    int type;
};
Entity entities[MAXENTITY];

int entityCount;


//--------------------------- array helpers ------------------------


ENTITYINDEX FindByName(String name) 
{
    for (int i=0; i< entityCount; i++) {
        if (entities[i].name == name)
            return i;
    }
    AbortGame("Wrong name  %s", name);
}

ENTITYINDEX FindByRoomObject(int objID) 
{
    for (int i=0; i< entityCount; i++) {
        if (entities[i].obj != null) {
            if (entities[i].obj.ID == objID) {
                return i;
            }
        }
    }
    AbortGame("Wrong room object ID");
}


//--------------------------- State changes helpers ------------------------


//import bool IsPowered(String name);


#define HASPOWER  SteamPuzzle.HasPower


// Small helper
bool IsUp(String name) {
    int i = FindByName(name);
    return entities[i].state == eSteamState_switchUp; 
}

// Small helper
bool IsDown(String name) {
    int i = FindByName(name);
    return entities[i].state == eSteamState_switchDown; 
}


 static bool SteamPuzzle::HasPower(String name)
{
    ENTITYINDEX i = FindByName(name);
    
    if (entities[i].type == eSteamType_switch) {
        if (name=="switch00") {
            return (entities[i].state == eSteamState_switchDown);
        } else {
            bool mainPowerIsOn = SteamPuzzle.HasPower("switch00");
             if (!mainPowerIsOn)
                return false;
                    
            if (name=="switch01") {
                return (mainPowerIsOn && IsDown("switch00"));
            } else if (name=="switch02") {
                return (mainPowerIsOn && IsUp("switch01"));
            } else if (name=="switch03") {
                return (mainPowerIsOn && ((HASPOWER("switch04") && IsDown("switch04")) || (HASPOWER("switch02") && IsUp("switch02"))));
            } else if (name=="switch04") {
                return (mainPowerIsOn && HASPOWER("switch02") && IsDown("switch02"));
            } else {
                AbortGame(String.Format("Missing entity logic for %s", name));
            }
        }
    } else if (entities[i].type == eSteamType_steam) {
        
        if (name=="steam00") { // Steam of switch 0
            return true; //always on 
        } else if (name=="steam01") { // Steam of vent above switch 0
            return IsUp("switch00"); 
        } else if (name=="steam02") { // Steam of switch 1
            return (HASPOWER("switch01"));
        } else if (name=="steam03") { // Steam of switch 2
            return (HASPOWER("switch02"));
        } else if (name=="steam04") { // Steam of leak
            ENTITYINDEX leak = FindByName("leak00");
            return (HASPOWER("switch02") && IsDown("switch02") && entities[leak].state != eSteamState_leakFixed);
        } else if (name=="steam05") { // Steam of switch 3
            return (HASPOWER("switch03"));
        } else if (name=="steam06") { // Steam of switch 4
            return (HASPOWER("switch04"));
        } else if (name=="steam07") { // Steam of lowest note
            return ((HASPOWER("switch03") && IsUp("switch03")) || (HASPOWER("switch04") && IsUp("switch04")));
        } else if (name=="steam08") { // Steam of second-to-bottom note
            return (
                (HASPOWER("switch02") && IsUp("switch02"))
                || (HASPOWER("switch04") && IsDown("switch04"))
            );
        } else if (name=="steam09") { // Steam of middle note
            return (
                (HASPOWER("switch01") && IsUp("switch01"))
                || (HASPOWER("switch02") && IsUp("switch02"))
                || (HASPOWER("switch03") && IsUp("switch03"))
            );
        } else if (name=="steam10") { // Steam of second-to-top note
            return (HASPOWER("switch01") && IsDown("switch01"));
        } else if (name=="steam11") { // Steam of top note
            ENTITYINDEX leak = FindByName("leak00");
            return (
                (HASPOWER("switch01") && IsDown("switch01"))
                || (HASPOWER("switch02") && IsDown("switch02") && entities[leak].state == eSteamState_leakFixed)
                || (HASPOWER("switch04") && IsUp("switch04"))
            );
        } else if (name=="steam12") { // Steam of top note
            return (HASPOWER("switch03") && IsDown("switch03"));
        } else {
            AbortGame(String.Format("Missing entity logic for %s", name));
        }
    } else if (entities[i].type == eSteamType_leak) {
        if (name=="leak00") { // Steam of switch 0
            return (HASPOWER("switch02") && IsDown("switch02"));
        } else {
            AbortGame(String.Format("Missing entity logic for %s", name));
        }
    } else {    
        AbortGame(String.Format("Unknow entity type %d", entities[i].type));
        
    }
}

/*
// Small helper
bool IsPowered(String name) {
    return SteamPuzzle.GetEntityPowerState(name) == eSteamState_powerOn;
}
*/

void InitSteamAnim(int i)
{
    entities[i].obj.SetView(STEAM);
    //Decide which of the loops we'll play to not have all the steam animations play exactly in sync:
    int loop = Random(Game.GetLoopCountForView(STEAM)-1);
    entities[i].obj.Animate(loop, STEAM_SPEED, eRepeat, eNoBlock);
}

//Some steam objects are meant to never be shown (the ones towards the top of the screen)
bool isHiddenSteam(ENTITYINDEX i) 
{
    return (entities[i].name == "steam11" || entities[i].name == "steam10"  || entities[i].name == "steam09"  || entities[i].name == "steam08"  || entities[i].name == "steam07" );
}

void ChangeState_TurnSteamOff(int i,  bool showTransition) 
{
    //For first-time init : 
    InitSteamAnim(i);
    
    //Actual action
    entities[i].state = eSteamState_steamOff;
    entities[i].obj.Visible = true;
    entities[i].obj.StopAllTweens();
    entities[i].obj.Transparency = 100;
    Wait(1);
    
    if (!isHiddenSteam(i)) {
        
        if (showTransition) {
            entities[i].obj.Transparency = 0;
            entities[i].obj.TweenTransparency(1.0, 100, eEaseInTween, eNoBlockTween);
        }
        else 
            entities[i].obj.Transparency = 100;
        //Display("Steam is now OFF");
    }
}

void ChangeState_TurnSteamOn(int i,  bool showTransition) 
{
    //For first-time init : 
    InitSteamAnim(i);

    //Actual action
    entities[i].state = eSteamState_steamOn;
    entities[i].obj.Transparency = 100;
    entities[i].obj.StopAllTweens();
    entities[i].obj.Visible = true;
    Wait(1);
    
    if (!isHiddenSteam(i)) {
        

        if (showTransition) {
            entities[i].obj.Transparency = 100;
            entities[i].obj.TweenTransparency(1.0, 0, eEaseInTween, eNoBlockTween);
        }
        else 
            entities[i].obj.Transparency = 0;
    } else {
        entities[i].obj.Transparency = 100;
    }
    //Display("Steam is now ON");
}

void ChangeState_UnfixLeak(int i) 
{
    entities[i].obj.Graphic = eSpr_leakNotFixed;
    entities[i].obj.Visible = true;

    //Actual action
    entities[i].state = eSteamState_leakNotFixed;
}

void ChangeState_FixLeak(int i) 
{
    entities[i].obj.Graphic = eSpr_leakFixed;
    entities[i].obj.Visible = true;

    //Actual action
    entities[i].state = eSteamState_leakFixed;
}

 static bool SteamPuzzle::IsSolved()
{
    return (
        SteamPuzzle.HasPower("steam11") // Top    1
    && !SteamPuzzle.HasPower("steam10") //        0
    &&  SteamPuzzle.HasPower("steam09") //        1
    &&  SteamPuzzle.HasPower("steam08") //        1  
    && !SteamPuzzle.HasPower("steam07") // bottom 0
    );
}


void UpdateSteam()
{
    if (entityCount > 0) { // Means "if init complete". To avoid messing up before fade in
        for (int i=0; i<entityCount; i++) {
            if(entities[i].type == eSteamType_steam) {
                if (HASPOWER(entities[i].name)) {
                    if (entities[i].state != eSteamState_steamOn)
                        ChangeState_TurnSteamOn(i,  true); 
                } else{
                    if (entities[i].state != eSteamState_steamOff)
                        ChangeState_TurnSteamOff(i,  true);
                }
            }
        }
    }
    
}

void ChangeState_TurnSwitchUp(int i) 
{
    if (entities[i].obj == null) {
        AbortGame(String.Format("Entity not initialized : %d",i));
    }

    entities[i].state = eSteamState_switchUp;
    
    entities[i].obj.SetView(eView_DownToUp);
    entities[i].obj.Animate(0, 5, eOnce, eBlock);
    entities[i].obj.Graphic = eSpr_switchStateUp; //Fallback after the view, because I'm paranoid
    
    UpdateSteam();    
}

void ChangeState_TurnSwitchDown(int i) 
{
    if (entities[i].obj == null) {
        AbortGame(String.Format("Entity not initialized : %d",i));
    }
    
    entities[i].state = eSteamState_switchDown;
    
    entities[i].obj.SetView(eView_UpToDown);
    entities[i].obj.Animate(0, 5, eOnce, eBlock);
    entities[i].obj.Graphic = eSpr_switchStateDown;  //Fallback after the view, because I'm paranoid  
        
    UpdateSteam();
}




//--------------------------- public ------------------------



 static void SteamPuzzle::SetEntityState(String name,  SteamPuzzleEntityStates state,  bool showTransition)
{
    ENTITYINDEX i = FindByName(name);
    
    // We care only about state changes
    if (state == entities[i].state)
        return;
        
    if (entities[i].type == eSteamType_switch) {
        if (state == eSteamState_switchUp)
            ChangeState_TurnSwitchUp(i);
        else if (state == eSteamState_switchDown)
            ChangeState_TurnSwitchDown(i);
        else
            AbortGame("Not a valid state change for a switch");
    } else if (entities[i].type == eSteamType_steam) {
        if (state == eSteamState_steamOff)
            ChangeState_TurnSteamOff(i,  showTransition);
        else if (state == eSteamState_steamOn)
            ChangeState_TurnSteamOn(i,  showTransition);
        else
            AbortGame("Not a valid state change for a switch");
    } else if (entities[i].type == eSteamType_leak) {
        if (state == eSteamState_leakNotFixed)
            ChangeState_UnfixLeak(i);
        else if (state == eSteamState_leakFixed)
            ChangeState_FixLeak(i);
        else
            AbortGame("Not a valid state change for a switch");
    } else {
        AbortGame("Unknown type");
    }
    
}

static void SteamPuzzle::AddEntity(String name, SteamPuzzleEntityStates initialState, SteamPuzzleEntityTypes entityType,  Object* obj)
{
    int i = entityCount;
    entities[i].name = name;
    entities[i].state = eSteamState_undefined;
    entities[i].type = entityType;
    entities[i].obj = obj;
    
    entityCount++;
    
    SteamPuzzle.SetEntityState(name,  initialState,  false);
    
}





SteamPuzzleEntityStates GetOppositeSwitchState(SteamPuzzleEntityStates state)
{
    if (state==eSteamState_switchDown)
        return eSteamState_switchUp;
    else if (state==eSteamState_switchUp)
        return eSteamState_switchDown;
    AbortGame(String.Format("Not a switch state : %d", state));
}

static int SteamPuzzle::GetEntityCount()
{
    return entityCount;
    
}

//Indy touches left or right depending on isLeft
void AnimTouch(bool isLeft) 
{
    int loopLeft = 1; int loopRight = 2;
    int loop = loopLeft;
    if (!isLeft)
        loop = loopRight;
    player.FaceDirection(eDirectionUp, eBlock);
    player.LockView (INDYCLOTH_TOUCH);
    player.Animate (loop, 2, eOnce, eBlock);
    player.UnlockView();
}

// Helper function
void ClickSwitch(Object* o)
{
    ENTITYINDEX i = FindByRoomObject(o.ID);
    
    String name = entities[i].name; //For convenience
    
    if (entities[i].type == eSteamType_switch) {
        if (name == "switch00") {
            AnimTouch(false);
            SteamPuzzle.SetEntityState(name, GetOppositeSwitchState(entities[i].state));
            return;
        } else if(name == "switch01") {
            AnimTouch(true);
            SteamPuzzle.SetEntityState(name, GetOppositeSwitchState(entities[i].state));
            return;
        } else if(name == "switch02") {
            AnimTouch(true);
            SteamPuzzle.SetEntityState(name, GetOppositeSwitchState(entities[i].state));
            return;
        } else if(name == "switch03") {
            AnimTouch(true);
            SteamPuzzle.SetEntityState(name, GetOppositeSwitchState(entities[i].state));
            return;
        } else if(name == "switch04") {
            AnimTouch(true);
            SteamPuzzle.SetEntityState(name, GetOppositeSwitchState(entities[i].state));
            return;
        }
        
    }

    AbortGame(String.Format("Missing interaction with switch %d in the room (%s)",o.ID,  name));
}



static void SteamPuzzle::Interact(Object* o)
{
    
    //int walk_x = 623;
    //int walk_y = 105;

    eObjectType objType=eGizmo;

    ENTITYINDEX i = FindByRoomObject(o.ID);
    
    if (entities[i].type == eSteamType_switch) {
        if (Verbs.UsedAction(eGA_LookAt)) {
            player.Say("Some sort of... spinning valve?");
            player.Say("Someone kept themselves busy upgrading Agsvald's toys.");
            player.Say("I'd put my money on the priest and his family.");
        } else if (Verbs.UsedAction(eGA_7CoG_Push) || Verbs.UsedAction(eGA_7CoG_Pull) || Verbs.UsedAction(eGA_7CoG_Use)) {
            ClickSwitch(o);
        } else {
            Unhandled_FaceDirection(eDown, objType);
        }
    } else if (entities[i].type == eSteamType_leak) {
        if (Verbs.UsedAction(eGA_LookAt)) {
            player.FaceLocation(116, 196);
            player.Say("This pipe got damaged. It has a small crack.");
        }else if(Verbs.UsedAction(eGA_UseInv)) {
            if (player.ActiveInventory == iGum) { 
                player.Walk(123, 140, eBlock);
                player.FaceDirection(eDirectionUp, eBlock);
                if (SteamPuzzle.HasPower("leak00")) {
                    player.Say("I can't use the gum, it's way too hot right now.");
                } else {
                    AnimTouch(true);
                    player.LoseInventory(iGum);
                    
                    player.FaceDirection(eDirectionDown);
                    player.Say("I'm just glad Henry Jones senior can't see how I fixed this plumbing.");
                    
                    SteamPuzzle.SetEntityState("leak00", eSteamState_leakFixed);
                }
            }
            else {
                Unhandled_FaceLocation(120, 128, objType);
            }
        } else {
            Unhandled_FaceLocation(120, 128, objType);
        }
    } else {
        AbortGame("Bad use of this function");
    }
    
    //+DEBUG
    /*
    if (SteamPuzzle.IsSolved()) {
        player.Say("TO REMOVE: Puzzle is solved");
    }
    */
    //-DEBUG
    
}

  
void repeatedly_execute()
{

}


void game_start() {
    entityCount = 0;
}


