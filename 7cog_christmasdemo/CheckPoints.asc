//#define MAX_CHECKPOINTS 100

#define MAX_CATEGORIES 20
#define MAX_CHECKPOINT_PER_CATEGORY 20
/*
struct CheckpointData {
  String name;
};
CheckpointData checkpointsData[MAX_CHECKPOINTS];
*/

struct CheckpointCategory {
  String name;
  int nextCheckpointIndex;
  String checkpointsNames[MAX_CHECKPOINT_PER_CATEGORY];  
  CheckPointsEnum checkpoints[MAX_CHECKPOINT_PER_CATEGORY];  
  //RoomsEnum rooms[MAX_CHECKPOINT_PER_CATEGORY];  
  import int AddCheckpoint(CheckPointsEnum checkpoint,  String name);
};



int nextCategoryIndex = 0;
CheckpointCategory categories[MAX_CATEGORIES];
/*
int curCheckpoint = 1;  //we keep track of the id of the last registered checkpoint,
                        //because they can only be created in increasing order.
                        //note: our checkpoints start from 1 because enums (such as CheckPointsEnum) also start from 1.
*/

//bool _skipCutsceneIfAny = false;

/*
static bool CheckPoints::ShouldSkipCutscene_Consume() {
  bool result = _skipCutsceneIfAny;
  _skipCutsceneIfAny = false;
  return result;
}
*/






bool checkpointInitialized = true; //is false after a "jump to" until all variables have been set in the destination room

CheckPointsEnum requestedCheckpoint = 0;


function AddCategory(String name) {
  categories[nextCategoryIndex].name = name;
  categories[nextCategoryIndex].nextCheckpointIndex = 0;
  nextCategoryIndex++;
}

function CheckpointCategory::AddCheckpoint(CheckPointsEnum checkpoint,  String name) 
{
  this.checkpointsNames[this.nextCheckpointIndex] = name;
  this.checkpoints[this.nextCheckpointIndex] =  checkpoint;
  this.nextCheckpointIndex++;
}

/*
static void CheckPoints::RegisterNew(int id, String name) 
 {
   
   //safety: do we follow the process and register the checkpoints in increasing order?
   if (id != curCheckpoint) {
     AbortGame(String.Format("Programing mistake: you didn't register the checkpoints in the logical order: 0,1,2,... Or maybe you entered this room twice. (Expected %d, found %d)", curCheckpoint, id));
   }   

   //safety: does it already exist?
   if (checkpointsData[id].name != null) {
     AbortGame("Programing mistake: you declared two checkpoints with the same ID");
   }
   
   checkpointsData[id].name = name;
   //ListBoxCheckpoints.AddItem(String.Format("(%d) : %s", id,  name));
   curCheckpoint++;
 }
*/
 
static void CheckPoints::RegisterAll() 
 {
    nextCategoryIndex = 0;
    
    AddCategory("DEBUG/TESTS");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_33_GuiSettings,                     "GUI: Settings");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_12_FontsTests,                      "Fonts tests") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_15_TextArea,                        "TextArea") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_16_FoAcredits,                      "FoAcredits") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_18_Mirrors2,                        "Mirrors 2") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_44_DEBUGCharAnim,                   "character animation tests");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_47_DEBUGTestScrollLock,             "Test scrolling lock");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_49_DEBUGguiTests,                   "GUI interactions (look at, etc.) tests");    
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_50_DEBUGtumbleweedDialogsTest,      "GUI Tumblew. dialogs test");    
    
    
    
    AddCategory("MENUS");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_100_MSDOS,                       "MS-DOS");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_01_Disclaimer,                       "Disclaimer");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_100_MainMenu,                         "Main Menu");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_111_DemoBonuses,                         "Demo bonuses");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_17_RegularCredits,                   "Regular credits") ;   
    
    AddCategory("DEMO");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_01_Disclaimer,                         "Disclaimer");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_100_MainMenu,                         "Main Menu");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_111_DemoBonuses,                         "Demo bonuses");

    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_101_catacombs,             "01 Catacombs (no cutscene)");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_101_catacombs_withcutscene,             "01 Catacombs (with cutscene)");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_101_catacombs_MonkCutscene,        "01 Catacombs (Monk Cutscene)");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_101b_tintedGlass,             "01b Tinted glass");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_102_NorwayOutside,             "02 Norway outside");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_114_NorwayOutside_Night,             "02b Norway outside (night)");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_113_NorwayOven,             "02b norway outside (oven)");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_112_HatchCloseUp,        "Norway Hatch Close Up");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_103_NorwayInside,             "03 norway inside");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_103b_NorwayInside_EndCutscene,             "03 norway inside (end cutscene)");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_104_NorwayIceCave,             "04 norway ice cave");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_105_EuropeMap,             "05 europe map");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_106_IndysClassRoom,             "06 indys classroom");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_107_endCredit,             "end credits");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_110_Journal,             "journal");
    
    

 
}


static void CheckPoints::PopulateCheckpoints(ListBox* LbCheckpoints, int categoryIndex)
{
    LbCheckpoints.Clear();
    for(int checkpointIndex = 0; checkpointIndex < categories[categoryIndex].nextCheckpointIndex; checkpointIndex++) {
        LbCheckpoints.AddItem(categories[categoryIndex].checkpointsNames[checkpointIndex]);
    }
}

static void CheckPoints::PopulateControls(ListBox* LbCategories,  ListBox* LbCheckpoints) 
{
    LbCategories.Clear();
    for(int catIndex = 0; catIndex < nextCategoryIndex; catIndex++) { 
      LbCategories.AddItem(String.Format("%s (%d)", categories[catIndex].name, categories[catIndex].nextCheckpointIndex));
      //Display("%d : %s", catIndex, categories[catIndex].name);
    }

    CheckPoints.PopulateCheckpoints(LbCheckpoints,  0); //By default we display the checkpoints of category 0
}
 
 
/*
static void CheckPoints::MainMenu() {
    player.ChangeRoom(eRoom_GUI_00_TitleMenu, 1, 1);
}

static void CheckPoints::Barnett_Read_Telegram_Cutscene() {
    player.Say("Let's take a look at that telegram.");
    prevX = player.x;
    prevY = player.y;
    gIconbar.Visible = false;
    gInventory.Visible = false;
    gStatusline.Visible = false;
    player.ChangeRoom(eRoom_02_09_BarnettTelegram, 1, 1);
}

static void CheckPoints::Barnett_Read_Telegram() {
  
  //give needed objects
  player.AddInventory(iOilCan);
  player.AddInventory(iTelegram);
  
  //arbitrarily go to Indy's office
  player.ChangeRoom(6,  160,  140);
  WAIT_10
  
}

static void CheckPoints::Barnett_NewGame() {
  StopMusic();
  if (!CheckPoints.ShouldSkipCutscene_Consume()) {
    player.ChangeRoom(eRoom_02_00_ChalkboardHand, 319, 199); //teleports player to 'chalkboard' room and thus starts opening cutscene
  } else {  
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  }
    
}

static void CheckPoints::Barnett_Corridor() {
  StopMusic();
  
  //give proper objects
  //oil can
  //oilCan.Visible = false;
  player.AddInventory(iOilCan);    
  
  player.ChangeRoom(3, 500, 120);
}


static void CheckPoints::Spain_Test() {
  StopMusic();

  player.ChangeRoom(13, 1100, 130); 
  
    
}
*/

/*
  #ifdef TESTING
    gIconbar.Visible = true;
    gInventory.Visible = true;
    gStatusline.Visible = true;
    Mouse.Mode = eModeWalkto;
    SetMusicMasterVolume(0); //no sound
    
    //  player.ChangeRoom(3,  500,  125);
    player.AddInventory(iOilCan);
    player.ChangeRoom(eRoom_02_07_BarnettOutside,  160,  120);
  #endif
  */
  

static void CheckPoints::JumpDone() {
  checkpointInitialized = true;
}

static bool CheckPoints::IsJumping() {
  return !checkpointInitialized;
}

static int CheckPoints::RequestedCheckpoint() {
  return requestedCheckpoint;
}

static int CheckPoints::RequestedCheckpoint2() {
  return 0;
}

/*
 void JumpToMenu(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
  
 void JumpToGui(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
  
 void JumpToTibet(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
  
 void JumpToBarnett(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
*/

static void CheckPoints::JumpTo(int categoryIndex, int checkpointIndex) {
  #ifdef TESTING
  //Display(String.Format("Jumping to checkpoint #%d", checkpointIndex));
  #endif
  
  //_skipCutsceneIfAny = false; //we always reset that
  checkpointInitialized = false;
  
  //Display("%d : %d", categoryIndex,  checkpointIndex);
  
  CheckPointsEnum checkpoint = categories[categoryIndex].checkpoints[checkpointIndex];
  requestedCheckpoint = checkpoint;
  //Display("%d", checkpoint); //DEBUG
  /*
  switch(categoryIndex)
  {
    case 0:
      JumpToMenu(checkpointIndex, room);
      break;
    case 1:
      JumpToGui(checkpointIndex, room);
      break;
    case 2:
      JumpToTibet(checkpointIndex, room);
      break;
    case 3:
      JumpToBarnett(checkpointIndex, room);
      break;
    default: 
      Display(String.Format("Programing mistake: you forgot to implement checkpoint '%d'.",checkpointIndex));
      break;
  }
  */
  
  //Display("%d", checkpoint);
  
  if (checkpoint == eChckpnt_01_Disclaimer) {
    //_skipCutsceneIfAny = false;
    //CheckPoints.MainMenu();
    player.ChangeRoom(eRoom_GUI_02_Disclaimer, 1, 1); //go to the disclaimer scree
  } else if (checkpoint == eChckpnt_10_NewClassRoom) {
    player.ChangeRoom(eRoom_02_02_IndyClassRoom_New,  160,  100); //go to new version of Indy's calssroom  
  } else if (checkpoint == eChckpnt_12_FontsTests) {
    player.ChangeRoom(19,  270,  150); //go to fonts tests screen (debug)
  } else if (checkpoint == eChckpnt_15_TextArea) {
    player.ChangeRoom(21,  1200,  120); 
  } else if (checkpoint == eChckpnt_16_FoAcredits) {
    player.ChangeRoom(22,  109, 119); 
  } else if (checkpoint == eChckpnt_17_RegularCredits) {
    player.ChangeRoom(eRoom_GUI_01_EndCredits,  160,  0); 
  } else if (checkpoint == eChckpnt_18_Mirrors2) {
    player.ChangeRoom(24,  160,  150); 
  } else if(checkpoint ==  eChckpnt_30_FOACredits) { //USELESS. Does the same as checkpoint 16
    player.ChangeRoom(22, 108, 117);
  } else if (checkpoint ==  eChckpnt_33_GuiSettings) {
    player.ChangeRoom(97, 0, 0);
  } else if (checkpoint ==  eChckpnt_44_DEBUGCharAnim) {
    player.ChangeRoom (122, 160, 200);
  } else if (checkpoint ==  eChckpnt_47_DEBUGTestScrollLock) {
    player.ChangeRoom (eRoom_DEBUG_ScrollLockTests, 310,220);
  } else if (checkpoint ==  eChckpnt_49_DEBUGguiTests) {
    player.ChangeRoom (eRoom_DEBUG_GUIinteractionsTests, 160, 120);
  } else if (checkpoint ==  eChckpnt_50_DEBUGtumbleweedDialogsTest) {
    player.ChangeRoom (eRoom_DEBUG_tumbleweedDialogsTest, 160, 80);
  }
  
  
  
  //DEMO
  else if (checkpoint ==  eChckpnt_100_MainMenu) {
    player.ChangeRoom (eRoom_100_MainMenu, 160,100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_100_MSDOS) {
    player.ChangeRoom (eRoom_100_MSDOS, 0,0, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_101_catacombs) {
    player.ChangeRoom (eRoom_101_Catacombs, 160,100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_101_catacombs_withcutscene) {
    player.ChangeRoom (eRoom_101_Catacombs, 160,100, eDirectionDown);
  } else if (checkpoint == eChckpnt_101_catacombs_MonkCutscene) {
    player.ChangeRoom (eRoom_101_Catacombs, 160, 100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_101b_tintedGlass) {
    player.ChangeRoom (eRoom_101b_TintedGlass, 160,100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_102_NorwayOutside) {
    player.ChangeRoom (eRoom_102_NorwayOutside, 160,100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_113_NorwayOven) {
    player.ChangeRoom (eRoom_102_NorwayOutside, 663,145, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_103_NorwayInside) {
    player.ChangeRoom (eRoom_103_NorwayInside, 160,100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_103b_NorwayInside_EndCutscene) {
    player.ChangeRoom (eRoom_103_NorwayInside, 160,100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_104_NorwayIceCave) {
    player.ChangeRoom (eRoom_104_NorwayIceCave, 160,100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_105_EuropeMap) {
    player.ChangeRoom (eRoom_105_EuropeMap, 160,100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_106_IndysClassRoom) {
    player.ChangeRoom (eRoom_106_IndysClassRoom, 160,100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_107_endCredit) {
    player.ChangeRoom (eRoom_107_EndCredits, 160,100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_110_Journal) {
    player.ChangeRoom (eRoom_110_Journal, 160,100, eDirectionDown);
  } else if (checkpoint ==  eChckpnt_111_DemoBonuses) {
    player.ChangeRoom (eRoom_111_DemoBonuses, 0,0, eDirectionDown);
  } else if (checkpoint == eChckpnt_112_HatchCloseUp) {
    player.ChangeRoom (14, 0, 0, eDirectionDown);
  } else if (checkpoint == eChckpnt_114_NorwayOutside_Night) {
    player.ChangeRoom (eRoom_114_NorwayOutside_Night, 0, 0, eDirectionDown);
  }
  
  
  
  
  
  
  
  

  else
  {
    Display(String.Format("Programing mistake: you forgot to implement checkpoint '%d'.",checkpointIndex));
    //AbortGame(String.Format("Programing mistake: There is no checkpoint '%d'.",checkpointIndex));
  }
}
