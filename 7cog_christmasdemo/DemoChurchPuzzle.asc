#define ENTITYINDEX int
#define MAXENTITY 20
#define STEAM_SPEED 5

enum SpritesEnum {
    //Shields
    eSpr_shieldLeftVertic = 584, // Sprite numbers. Must match!
    eSpr_shieldLeftDiag = 582, // Sprite numbers. Must match!
    eSpr_shieldLeftHoriz = 583, // Sprite numbers. Must match!
    eSpr_shieldMiddleVertic = 581, // Sprite numbers. Must match!
    eSpr_shieldMiddleDiag = 579, // Sprite numbers. Must match!
    eSpr_shieldMiddleHoriz = 580, // Sprite numbers. Must match!
    eSpr_shieldRightVertic = 578, // Sprite numbers. Must match!
    eSpr_shieldRightDiag = 521, // Sprite numbers. Must match!
    eSpr_shieldRightHoriz = 522, // Sprite numbers. Must match!
    
    //Dragon eyes
    eSpr_eyeLeftNone = 615,
    eSpr_eyeLeftBlue = 602,
    eSpr_eyeLeftRed = 601,
    eSpr_eyeLeftYellow = 603,
    eSpr_eyeMiddleNone = 616,
    eSpr_eyeMiddleBlue = 604,
    eSpr_eyeMiddleRed = 605,
    eSpr_eyeMiddleYellow = 606,
    eSpr_eyeRightNone = 617,
    eSpr_eyeRightBlue = 607,
    eSpr_eyeRightRed = 608,
    eSpr_eyeRightYellow = 609,
    
    //Basin
    eSpr_BasinEmpty = 465, 
    eSpr_BasinFull_FirstSprite = 610, 
    eView_animatedBasin = BASIN, 
};

struct Entity {
    String name;
    int state;
    Object* obj;
    int type;
};
Entity entities[MAXENTITY];

int entityCount;


//--------------------------- array helpers ------------------------


ENTITYINDEX FindByName(String name) 
{
    for (int i=0; i< entityCount; i++) {
        if (entities[i].name == name)
            return i;
    }
    AbortGame("Wrong name  %s", name);
}

ENTITYINDEX FindByRoomObject(int objID) 
{
    for (int i=0; i< entityCount; i++) {
        if (entities[i].obj != null) {
            if (entities[i].obj.ID == objID) {
                return i;
            }
        }
    }
    AbortGame("Wrong room object ID");
}


//--------------------------- State changes helpers ------------------------



#define HASPOWER SteamPuzzle.HasPower

 static bool ChurchPuzzle::IsShieldsCorrect()
{
    ENTITYINDEX shieldLeft = FindByName("shieldLeft");
    ENTITYINDEX shieldMiddle = FindByName("shieldMiddle");
    ENTITYINDEX shieldRight = FindByName("shieldRight");
    
    return ( entities[shieldLeft].state == eChurchState_shieldHoriz
            && entities[shieldMiddle].state == eChurchState_shieldDiag
            && entities[shieldRight].state == eChurchState_shieldVertic );
}

 static bool ChurchPuzzle::IsEyesCorrect()
{
    
    ENTITYINDEX eyeLeft = FindByName("eyeLeft");
    ENTITYINDEX eyeMiddle = FindByName("eyeMiddle");
    ENTITYINDEX eyeRight = FindByName("eyeRight");
    // The colors must match the clues given by the hotspots in Room 14 ("hatch door closeup")
    return ( entities[eyeLeft].state == eChurchState_eyeRed //Sun
                && entities[eyeMiddle].state == eChurchState_eyeBlue //Sea
                && entities[eyeRight].state == eChurchState_eyeYellow ); //Blood
}

 static bool ChurchPuzzle::IsNotesCorrect()
{
    return (DialogsLogic.GetVarBool("hasVisitedIceCave") 
    /*
        &&  HASPOWER("steam11") // Top    1
        && !HASPOWER("steam10") //        0
        &&  HASPOWER("steam09") //        1
        &&  HASPOWER("steam08") //        1
        && !HASPOWER("steam07"));//Bottom 0
        */
    && SteamPuzzle.IsSolved());
}
 static bool ChurchPuzzle::IsSolved()
{
    return ChurchPuzzle.IsNotesCorrect() && ChurchPuzzle.IsShieldsCorrect() && ChurchPuzzle.IsEyesCorrect();
}


void SyncBasinGraphics(bool isFull)
{
  ENTITYINDEX i = FindByName("basin");
  Object* o = entities[i].obj;
  
  if (isFull) {
      o.Graphic = eSpr_BasinFull_FirstSprite; //Just as a safety
      o.SetView(BASIN);
      o.Animate(0, 5, eRepeat, eNoBlock, eForwards);
  } else {
      o.Graphic = eSpr_BasinEmpty; 
  }
}
  
  
 static void ChurchPuzzle::SyncGraphics()
{
    if (entityCount > 0) { // Means "if init complete". To avoid messing up before fade in
        for (int i=0; i<entityCount; i++) {
            if(entities[i].type == eChurchType_Basin) {
                if(entities[i].state == eChurchState_basinEmpty) {
                    SyncBasinGraphics(false);
                } else if (entities[i].state == eChurchState_basinFull) {
                    SyncBasinGraphics(true);
                } else {
                    AbortGame("Error");
                }
            } else if(entities[i].type == eChurchType_DragonEye) {
                if(entities[i].state == eChurchState_eyeBlue) {
                    if(entities[i].name == "eyeLeft") {
                        entities[i].obj.Graphic = eSpr_eyeLeftBlue;
                    } else if(entities[i].name == "eyeMiddle") {
                        entities[i].obj.Graphic = eSpr_eyeMiddleBlue;
                    } else if(entities[i].name == "eyeRight") {
                        entities[i].obj.Graphic = eSpr_eyeRightBlue;
                    } else {
                        AbortGame(String.Format("Wrong object name: %s", entities[i].name));
                    }
                } else if (entities[i].state == eChurchState_eyeRed) {
                    if(entities[i].name == "eyeLeft") {
                        entities[i].obj.Graphic = eSpr_eyeLeftRed;
                    } else if(entities[i].name == "eyeMiddle") {
                        entities[i].obj.Graphic = eSpr_eyeMiddleRed;
                    } else if(entities[i].name == "eyeRight") {
                        entities[i].obj.Graphic = eSpr_eyeRightRed;
                    } else {
                        AbortGame(String.Format("Wrong object name: %s", entities[i].name));
                    }
                } else if (entities[i].state == eChurchState_eyeYellow) {
                    if(entities[i].name == "eyeLeft") {
                        entities[i].obj.Graphic = eSpr_eyeLeftYellow;
                    } else if(entities[i].name == "eyeMiddle") {
                        entities[i].obj.Graphic = eSpr_eyeMiddleYellow;
                    } else if(entities[i].name == "eyeRight") {
                        entities[i].obj.Graphic = eSpr_eyeRightYellow;
                    } else {
                        AbortGame(String.Format("Wrong object name: %s", entities[i].name));
                    }
                } else if (entities[i].state == eChurchState_undefined) {
                    if(entities[i].name == "eyeLeft") {
                        entities[i].obj.Graphic = eSpr_eyeLeftNone;
                    } else if(entities[i].name == "eyeMiddle") {
                        entities[i].obj.Graphic = eSpr_eyeMiddleNone;
                    } else if(entities[i].name == "eyeRight") {
                        entities[i].obj.Graphic = eSpr_eyeRightNone;
                    } else {
                        AbortGame(String.Format("Wrong object name: %s", entities[i].name));
                    }
                } else {
                    AbortGame("Error");
                }
            } else if(entities[i].type == eChurchType_Shield) {
                
                //Diagonal
                if(entities[i].state == eChurchState_shieldDiag) {
                    if(entities[i].name == "shieldLeft") {
                        entities[i].obj.Graphic = eSpr_shieldLeftDiag;
                    } else if(entities[i].name == "shieldMiddle") {
                        entities[i].obj.Graphic = eSpr_shieldMiddleDiag;
                    } else if(entities[i].name == "shieldRight") {
                        entities[i].obj.Graphic = eSpr_shieldRightDiag;
                    } else {
                        AbortGame(String.Format("Wrong object name: %s", entities[i].name));
                    }
                    
                //horizontal
                } else if (entities[i].state == eChurchState_shieldHoriz) {
                    if(entities[i].name == "shieldLeft") {
                        entities[i].obj.Graphic = eSpr_shieldLeftHoriz;
                    } else if(entities[i].name == "shieldMiddle") {
                        entities[i].obj.Graphic = eSpr_shieldMiddleHoriz;
                    } else if(entities[i].name == "shieldRight") {
                        entities[i].obj.Graphic = eSpr_shieldRightHoriz;
                    } else {
                        AbortGame(String.Format("Wrong object name: %s", entities[i].name));
                    }
                    
                //Vertical
                } else if (entities[i].state == eChurchState_shieldVertic) {
                    if(entities[i].name == "shieldLeft") {
                        entities[i].obj.Graphic = eSpr_shieldLeftVertic;
                    } else if(entities[i].name == "shieldMiddle") {
                        entities[i].obj.Graphic = eSpr_shieldMiddleVertic;
                    } else if(entities[i].name == "shieldRight") {
                        entities[i].obj.Graphic = eSpr_shieldRightVertic;
                    } else {
                        AbortGame(String.Format("Wrong object name: %s", entities[i].name));
                    }
                } else {
                    AbortGame("Error");
                }
            } else {
                AbortGame("unknown entity type");
            }
        }
    }
}

/*
void ChangeState_TurnSwitchUp(int i) 
{
    if (entities[i].obj == null) {
        AbortGame(String.Format("Entity not initialized : %d",i));
    }

    entities[i].obj.Graphic = eSpr_switchStateUp;
    entities[i].state = eSteamState_switchUp;
    //if (i != entityCount -1) //DEBUG bad euristics to see if it's the last one added; if yes we assume we're still initializing
    //    Display("Switch is now UP");
        
    UpdateSteam();    
}

void ChangeState_TurnSwitchDown(int i) 
{
    if (entities[i].obj == null) {
        AbortGame(String.Format("Entity not initialized : %d",i));
    }
    entities[i].obj.Graphic = eSpr_switchStateDown;
    entities[i].state = eSteamState_switchDown;

    //if (i != entityCount -1) //DEBUG bad euristics to see if it's the last one added; if yes we assume we're still initializing
    //    Display("Switch is now DOWN");   
        
    UpdateSteam();
}
*/



//--------------------------- public ------------------------


 static ChurchPuzzleEntityStates ChurchPuzzle::GetEntityState(String name)
{
    ENTITYINDEX i = FindByName(name);
    return entities[i].state;
}


 static void ChurchPuzzle::SetEntityState(String name,  ChurchPuzzleEntityStates state)
{
    ENTITYINDEX i = FindByName(name);
    
    // We care only about state changes
    if (state == entities[i].state)
        return;
     
    bool invalid = false;
    
    if (entities[i].type == eChurchType_Basin) {
        if (state != eChurchState_basinEmpty && state != eChurchState_basinFull)
            invalid = true;
            
    } else if (entities[i].type == eChurchType_DragonEye) {
        if (state != eChurchState_eyeBlue && state != eChurchState_eyeRed && state != eChurchState_eyeYellow  && state != eChurchState_undefined) 
            invalid = true;
            
    } else if (entities[i].type == eChurchType_Shield) {
        if (state != eChurchState_shieldDiag && state != eChurchState_shieldHoriz && state != eChurchState_shieldVertic) 
            invalid = true;
            
    } else {
        AbortGame("Unknown type");
    }
    
    if (invalid) {
        AbortGame(String.Format("Invalid state for that type of entity : %d", state));
    }
    
    entities[i].state = state;
}

static void ChurchPuzzle::AddEntity(String name, ChurchPuzzleEntityStates initialState, ChurchPuzzleEntityTypes entityType,  Object* obj)
{
    int i = entityCount;
    entities[i].name = name;
    entities[i].state = eSteamState_undefined;
    entities[i].type = entityType;
    entities[i].obj = obj;
    
    entityCount++;
    
    ChurchPuzzle.SetEntityState(name,  initialState);
    
}




/*
ChurchPuzzleEntityStates GetOppositeSwitchState(ChurchPuzzleEntityStates state)
{
    if (state==eSteamState_switchDown)
        return eSteamState_switchUp;
    else if (state==eSteamState_switchUp)
        return eSteamState_switchDown;
    AbortGame(String.Format("Not a switch state : %d", state));
}
*/

static int ChurchPuzzle::GetEntityCount()
{
    return entityCount;
    
}


void PushPullShield(ENTITYINDEX i,  bool isPush)
{
    player.Walk(entities[i].obj.X+20,  entities[i].obj.Y+10, eBlock);
    player.FaceDirection(eDirectionLeft, eBlock);
    
    //i is supposed to be a shield, we don't check again
    if(entities[i].state == eChurchState_shieldDiag) {
        if (isPush) 
            entities[i].state = eChurchState_shieldHoriz;
        else
            entities[i].state = eChurchState_shieldVertic;
    } else if (entities[i].state == eChurchState_shieldVertic) {
        if (isPush) 
            entities[i].state = eChurchState_shieldDiag;
        else
            entities[i].state = eChurchState_shieldHoriz;
    } else if (entities[i].state == eChurchState_shieldHoriz) {
        if (isPush) 
            entities[i].state = eChurchState_shieldVertic;
        else
            entities[i].state = eChurchState_shieldDiag;
    } else {
        AbortGame("Wrong state");
    }
}

static void ChurchPuzzle::Interact(Object* o)
{
    int loopLeft = 1;


    eObjectType objType=eGizmo;

    ENTITYINDEX i = FindByRoomObject(o.ID);
    
    if (entities[i].type == eChurchType_Shield) {
        if (Verbs.UsedAction(eGA_7CoG_Push)) {
            PushPullShield(i, true);
        } else if (Verbs.UsedAction(eGA_7CoG_Pull)) {
            PushPullShield(i, false);
        }
    } else if (entities[i].type == eChurchType_Basin) {
        //We do nothing. It's the action of emptying the bucket that does everything
    } else if (entities[i].type == eChurchType_DragonEye) {
        if(entities[i].state == eChurchState_undefined) {
            //There's nothing in the cavity
            if (Verbs.UsedAction(eGA_7CoG_UseInv)) {
                if (player.ActiveInventory == iGemBlue) {
                    entities[i].state = eChurchState_eyeBlue;
                    player.LoseInventory(iGemBlue);
                } else if (player.ActiveInventory == iGemYellow) {
                    entities[i].state = eChurchState_eyeYellow;
                    player.LoseInventory(iGemYellow);
                } else if (player.ActiveInventory == iGemRed) {
                    entities[i].state = eChurchState_eyeRed;
                    player.LoseInventory(iGemRed);
                } else {
                    AbortGame("Not authorized. Should have been blocked earlier by the interaction.");
                }
            } else if (Verbs.UsedAction(eGA_7CoG_LookAt)) {
                player.Say("There's a cavity in there. It's empty.");
            } else {
                Verbs.Unhandled();
                return;
            }
        } else {
            //There's a gem in the cavity
            if (Verbs.UsedAction(eGA_7CoG_Pull) || Verbs.UsedAction(eGA_7CoG_PickUp)) {
                player.Walk(142, 135, eBlock);
                player.Say("I'll be taking that back.");
                player.FaceDirection(eDirectionUp);
                player.LockView(INDYCLOTH_TOUCH);
                player.Animate(loopLeft, 2, eOnce, eBlock);
                player.UnlockView();
                
                switch(entities[i].state) {
                    case eChurchState_eyeBlue:
                        player.AddInventory(iGemBlue);
                        break;
                    case eChurchState_eyeYellow:
                        player.AddInventory(iGemYellow);
                        break;
                    case eChurchState_eyeRed:
                        player.AddInventory(iGemRed);
                        break;
                }
                entities[i].state = eChurchState_undefined;
            } else if (Verbs.UsedAction(eGA_7CoG_UseInv)) {
                player.Say("There's already something in the cavity.");
            } else if (Verbs.UsedAction(eGA_7CoG_LookAt)) {
                player.Say("The gem fits perfectly.");
            } else {
                Verbs.Unhandled();
                return;
            }
        }

    } else {
        AbortGame("Bad use of this function");
    }
    
    ChurchPuzzle.SyncGraphics();
    
    //+DEBUG
    /*
    if (ChurchPuzzle.IsSolved()) {
        player.Say("Puzzle is solved");
    }
    */
    //-DEBUG
    
}

  
void repeatedly_execute()
{

}


void game_start() {
    entityCount = 0;
}


