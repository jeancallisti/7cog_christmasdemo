/*function FaceDirection(this Character*,  EnumDirections direction) {
  int locationX = 0;
  int locationY = 0;
  
  if (direction == eUp) {
    locationX = this.x + 0;
    locationY = this.y - 100;    
  } else if (direction == eDown) {
    locationX = this.x + 0;
    locationY = this.y + 100;
  } else if (direction == eLeft) {
    locationX = this.x - 100;
    locationY = this.y + 0;
  } else if (direction == eRight) {
    locationX = this.x + 100;
    locationY = this.y + 0;
  } 
  
  this.FaceLocation(locationX,  locationY,  eBlock);

}*/


function FaceAndSay(this Character*,  EnumDirections direction,  String sentence) {
    this.FaceDirection(direction);
    this.Say(sentence);
}

function FaceAndSay2(this Character*,  int x,  int y,  String sentence) {
    this.FaceLocation(x,  y,  eBlock);
    this.Say(sentence);
}



static EnumDirections Directions::OppositeDirection(EnumDirections direction) {
  if (direction == eUp)
    return eDown;
  else if (direction == eDown)
    return eUp;
  else if (direction == eLeft)
    return eRight;
  else //if (direction == eRight)
    return eLeft;

    
}

static EnumDirections Directions::FromInt(int direction) { //0=up, 1=right, 2=down, 3=left
  if (direction == 0)
    return eUp;
  else if (direction == 1)
    return eRight;
  else if (direction == 2)
    return eDown;
  else //if (direction == 3)
    return eLeft;
}