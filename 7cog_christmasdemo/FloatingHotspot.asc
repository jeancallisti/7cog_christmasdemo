// new module script

Overlay *oLabel;
DynamicSprite *sprite;
FontType Font = eFontTumbleText;
//SEVEN CITIES CUSTOM CODE
String currentText;
String needleText; //the text to be detected for last-minute replacement
String replacementText; //the text that will be used for replacement
int replacementHotspot;
//~SEVEN CITIES CUSTOM CODE
int Color = 10;
int MaxWidth;
bool SpringOn = true;
bool SlideIn = false;
int VOffset = -5;
GUI *GuiToUse;
LocationType lastLocation;

float lastMX,  lastMY;
bool isNew;
float moveTimer  = 0.0;

bool enabled = false;

/************************************************
*    Private Methods
************************************************/

float saturate(float val)
{
    if (val < 0.0) return 0.0;
    if (val > 1.0) return 1.0;
    return val;
}

float _lerp(float value1,  float value2,  float amount)
{
    return value1 + (value2 - value1) * amount;
}

float _smoothstep(float edge0, float edge1, float x)
{
    // Scale, bias and saturate x to 0..1 range
    x = saturate((x - edge0)/(edge1 - edge0)); 
    // Evaluate polynomial
    return x * x * (3.0 - 2.0 * x);
}

function _clamp(int val, int min,  int max) 
{
    if (val < min) return min;
    if (val > max) return max;
    return val;
}

String getNameUnderMouse()
{
    String nameUnderMouse = Game.GetLocationName(mouse.x,  mouse.y);
    
    //SEVEN CITIES CUSTOM
    if (nameUnderMouse != null && nameUnderMouse.Length > 0) {
        //This is part of the dirty "FixText" hack 
        Hotspot* h = Hotspot.GetAtScreenXY(mouse.x,  mouse.y);
        if (needleText!=null && needleText.Length>0 && h != null && h.ID == replacementHotspot) {
            if (nameUnderMouse.CompareTo(needleText) == 0)
                nameUnderMouse = replacementText;
        }
    }
    //~SEVEN CITIES CUSTOM
    
    return nameUnderMouse;
}
function _drawHotspot(String nameUnderMouse)
{

  
  //SEVEN CITIES CUSTOM CODE
  if (player.Speaking) {
      if (GuiToUse != null)
        GuiToUse.Visible = false;      
  } else {
  //~SEVEN CITIES CUSTOM CODE
      isNew = false;
      LocationType currentLocation = GetLocationType(mouse.x, mouse.y);
      if (currentLocation != lastLocation) isNew = true;
      lastLocation = currentLocation;

      bool useGui = false;
      if (GuiToUse != null) {
        useGui = true;
        GuiToUse.Visible = false;
      }

      if (oLabel != null && oLabel.Valid) oLabel.Remove();

      if (isNew) {
        moveTimer = 0.0;
      }
      
      if (nameUnderMouse == null || nameUnderMouse == "") return;
      
      //SEVEN CITIES CUSTOM CODE
      //for characters with special names, used internally by our engine
      switch(nameUnderMouse)
      {
        case "MIRROR1":
        case "MIRROR2":
        case "MIRROR3":
        case "MIRROR4":
          return;
      }     
      //~SEVEN CITIES CUSTOM CODE
  
      
      int width = _clamp(GetTextWidth(nameUnderMouse, Font), 0, MaxWidth);
      int height = GetTextHeight(nameUnderMouse, Font, width + 2);

      float smooth = _smoothstep(0.0, 1.0, moveTimer);

      int drawY = FloatToInt(_lerp(IntToFloat(height), 0.0, smooth));
       //int drawY = FloatToInt(Maths.Sqrt((1.0 - moveTimer) * 100.0), eRoundNearest);
      moveTimer = saturate(moveTimer + 0.1);

       
      if (!SlideIn) drawY = 0;
     
      //SEVEN CITIES CUSTOM CODE
      //sprite = DynamicSprite.Create(width, height, true);
      sprite = DynamicSprite.Create(width+2, height+2, true);
      //~SEVEN CITIES CUSTOM CODE
      DrawingSurface *surf = sprite.GetDrawingSurface();
      
      //SEVEN CITIES CUSTOM CODE
      //outline
      surf.DrawingColor = Game.GetColorFromRGB(0, 0, 0);
      surf.DrawStringWrapped(0, drawY, width + 1, Font, eAlignLeft, nameUnderMouse);
      surf.DrawStringWrapped(1, drawY, width + 1, Font, eAlignLeft, nameUnderMouse);
      surf.DrawStringWrapped(2, drawY, width + 1, Font, eAlignLeft, nameUnderMouse);
      surf.DrawStringWrapped(0, drawY+1, width + 1, Font, eAlignLeft, nameUnderMouse);
      surf.DrawStringWrapped(1, drawY+1, width + 1, Font, eAlignLeft, nameUnderMouse);
      surf.DrawStringWrapped(2, drawY+1, width + 1, Font, eAlignLeft, nameUnderMouse);
      surf.DrawStringWrapped(0, drawY+2, width + 1, Font, eAlignLeft, nameUnderMouse);
      surf.DrawStringWrapped(1, drawY+2, width + 1, Font, eAlignLeft, nameUnderMouse);
      surf.DrawStringWrapped(2, drawY+2, width + 1, Font, eAlignLeft, nameUnderMouse);
      //~SEVEN CITIES CUSTOM CODE
      
      //Actual string
      surf.DrawingColor = Color;
      surf.DrawStringWrapped(1, drawY+1, width + 1, Font, eAlignLeft, nameUnderMouse);
      surf.Release();

      float targetx = IntToFloat(_clamp(mouse.x - width / 2, 0, System.ViewportWidth - width));
      float targety = IntToFloat(_clamp(mouse.y - height, 0, System.ViewportWidth - height));

      float x, y;


      if (isNew || !SpringOn){
        x = targetx;
        y = targety;
      }
      else 
      {
          x = lastMX - (lastMX - targetx) / 4.0;
          y = lastMY - (lastMY - targety) / 4.0;
      }
  
      lastMX = x;
      lastMY = y;

      //Display("Showing %s at: %d %d", s,  x,  y);
      
      if(useGui)
      {
        GuiToUse.Visible = true;
        GuiToUse.BackgroundGraphic = sprite.Graphic;
        GuiToUse.Width = sprite.Width;
        GuiToUse.Height = sprite.Height;
        GuiToUse.X = FloatToInt(x, eRoundNearest);
        GuiToUse.Y = FloatToInt(y, eRoundNearest) + VOffset;
      }
      else 
      {
        oLabel = Overlay.CreateGraphical(FloatToInt(x, eRoundNearest), FloatToInt(y, eRoundNearest) + VOffset, sprite.Graphic,  true);
      }
  }
}

/************************************************
*    Public Methods
************************************************/

static void FloatingHotspot::SetSlideIn(bool on)
{
  SlideIn = on;
}

static void FloatingHotspot::Enable()
{
  enabled = true;
}

static void FloatingHotspot::Disable()
{
  if(GuiToUse != null) GuiToUse.Visible = false;
  else {
      
      //SEVEN CITIES CUSTOM CODE
      //oLabel.Remove();
      if (oLabel != null && oLabel.Valid)
        oLabel.Remove();
      //~SEVEN CITIES CUSTOM CODE
  }
  enabled = false;
}

static bool FloatingHotspot::IsEnabled()
{
  return enabled;
}



static void FloatingHotspot::UseGui(GUI *toUse)
{
  GuiToUse = toUse;
}

static void FloatingHotspot::UseOverlay()
{
  if (GuiToUse != null) 
    GuiToUse.Visible = false;
  GuiToUse = null;
}

static void FloatingHotspot::SetSpring(bool on)
{
  SpringOn = on;
}

static void FloatingHotspot::SetVerticalOffset(int offset)
{
  VOffset = offset;
}

static void FloatingHotspot::SetMaxWidth(int width)
{
  MaxWidth = _clamp(width, 10, System.ViewportWidth);
}

static void FloatingHotspot::SetFont(FontType font)
{
  Font = _clamp(font, 0,  Game.FontCount - 1);
  
}
 
static void FloatingHotspot::SetColor(int color)
{
  Color = _clamp(color, 0, 65535);
}

function game_start() 
{
    FloatingHotspot.SetMaxWidth(System.ViewportWidth);
    enabled = false;
}

function repeatedly_execute_always()
{
    //SEVEN CITIES CUSTOM CODE
    currentText = "";
    //~SEVEN CITIES CUSTOM CODE

    if(!enabled)
    {
        return;
    } 

    //SEVEN CITIES CUSTOM CODE
    currentText = getNameUnderMouse();
   
    _drawHotspot(currentText);  
    //~SEVEN CITIES CUSTOM CODE
}

//SEVEN CITIES CUSTOM CODE
//Added by 7CoG : Fix for the demo. Force the text that will appear in the floating hotspot
static void FloatingHotspot::FixText(String needle,  String text,  int _hotspot)
{
  if(!enabled)
  {
    return;
  } 
  
  needleText =  needle;
  replacementText = text;
  replacementHotspot = _hotspot;

}

function on_event(int event, int data)
{
    if (event==eEventLeaveRoom) {
        //reset those for the next room
        needleText = "";
        replacementText = "";
        replacementHotspot = -1;
    }
}

//~SEVEN CITIES CUSTOM CODE