// new module script
// room script file

//everything needed to manage the vehicle overlay
int vehicleTransparency;
int transitionTransparency = 100;
int maxVehicleTransparency = 50; //default value
int vehicleTransitionSpeed = 2; //default value

#define MAX_VEHICLES 15
#define MAX_WAYPOINTS 10

struct vehicleDataStruct{
  int regionID; //we keep track of what region is this vehicle for (not really needed, it's also the actual index of the cell in the array)
  int graphicID; //what image will be displayed for that vehicle
  int X; //coordinates of the vehicle's overlay
  int Y;
};
vehicleDataStruct vehicles[MAX_VEHICLES];

struct wayPointStruct{ //where we store each point that the vehicle must go through
  int X; //x coordinate
  int Y; //y coordinate
};
wayPointStruct wayPoints[MAX_WAYPOINTS];




//int vehiclesImages [15];
//int currentVehicleImage;
//int previousVehicleImage;

int previousRegionID;
int currentRegionID;


DynamicSprite *vehicleSprite;


//everything needed to manage the line
Object* oLines;
DynamicSprite *linesSprite;
int lineColor = 53833; //default color (orange/red-ish)
int defaultLineTransparency = 20; //default transparency (slightly transparent)

GUI* _gVehicle1;
GUI* _gVehicle2;
GUI* gCurrentGui;//just to remember between which and which gui we're switching (_gVehicle1, _gVehicle2)
GUI* gFormerGui;//just to remember between which and which gui we're switching (_gVehicle1, _gVehicle2)

bool enableSmoothScrolling;

//the vehicle fades in when the player starts moving, and out when he stops 
function updateVehicleTransparency()
{
    if (player.Moving && vehicleTransparency > maxVehicleTransparency) 
      vehicleTransparency --;
      
    if (!player.Moving && vehicleTransparency < 99) 
      vehicleTransparency ++;
      
    //vehicleTransparency = 50; //DEBUG!!!
}

//updates the line's drawing to match the player's current position
function drawLine()
{
    //Display("%s", player.Name);
    //1. we draw onto our private "linesSprite"
    DrawingSurface *surface = linesSprite.GetDrawingSurface ();
    surface.DrawingColor = lineColor;
    surface.DrawCircle(player.x,player.y,2);
    
    
    surface.Release();
    
    //2. we set that graphic to the room's "oLine" object
    oLines.Graphic = linesSprite.Graphic;
    
    
}


int higherTransparency(int transparency1,  int transparency2)
{
  if (transparency1 > transparency2)
    return transparency1;
    
  return transparency2;
}

function manageRegionTransition()
{
    if (gCurrentGui== null)  //initialization safety
    {
      gCurrentGui = _gVehicle1; //we arbitrarily decide that _gVehicle1 starts as the "fading in" vehicle
      gCurrentGui.BackgroundGraphic = vehicles[currentRegionID].graphicID;
      gFormerGui = _gVehicle2;
    }
    
    Region* updatedCurrentRegion = Region.GetAtRoomXY (player.x, player.y); //where are we (for realz)?
    
    if ( updatedCurrentRegion.ID != currentRegionID)  //are we on a new region?
    {
      previousRegionID = currentRegionID; //yes; then let's update stuff
      currentRegionID = updatedCurrentRegion.ID;

      //ok, the region has changed. But did the vehicle's image change too?
      if (vehicles[currentRegionID].graphicID != vehicles[previousRegionID].graphicID)
      {//yes. Then we need to initialize the transition
        //previousRegionID = currentVehicleImage;
        //currentVehicleImage = vehicles[currentRegion.ID].graphicID;
        transitionTransparency = 100;
        
        if (gCurrentGui == _gVehicle1)
        {
          gCurrentGui = _gVehicle2;
          gFormerGui = _gVehicle1;
        }
        else
        {
          gCurrentGui = _gVehicle1;
          gFormerGui = _gVehicle2;
        }
        
        gCurrentGui.BackgroundGraphic = vehicles[currentRegionID].graphicID;
        //gFormerGui.BackgroundGraphic = vehicles[previousRegionID].graphicID;
        
  
      }        
    }
    
    if (transitionTransparency > 0) //we're in the middle of a transition
    {
      /*
      //1. we need to draw a sprite with both vehicles, each with its current transition transparency
       DrawingSurface *vehicleSurface;
       vehicleSurface = vehicleSprite.GetDrawingSurface ();
       vehicleSurface.Clear();
       vehicleSurface.DrawImage (0, 0, vehicles[previousRegionID].graphicID,  100-transitionTransparency); //first vehicle
       //vehicleSurface.DrawImage (0, 0, vehicles[previousRegionID].graphicID,  0); //first vehicle
       if (transitionTransparency < 100) //second vehicle
          vehicleSurface.DrawImage (0, 0, vehicles[currentRegionID].graphicID, transitionTransparency);
          //vehicleSurface.DrawImage (0, 0, vehicles[currentRegionID].graphicID, 0); //DEBUG
       vehicleSurface.Release ();
       */
       
       //gCurrentGui.Transparency = transitionTransparency;
       //gFormerGui.Transparency = 100-transitionTransparency;
       
       //2. we don't forget to keep decreasing transparency, to move forward with the transition
       transitionTransparency -= vehicleTransitionSpeed;
       
       //Display(String.Format("%d,%d",transitionTransparency,vehicleTransparency ));
       //Display(String.Format("%d,%d",vehicles[previousRegionID].graphicID,vehicles[currentRegionID].graphicID ));

    }
    //_gVehicle.BackgroundGraphic = vehicleSprite.Graphic;
    
    
    //we apply 'transitionTransparency' with a twist:
    //if Indy is not moving, we fade the whole gui's out, using 'vehicleTransparency'.
    gCurrentGui.Transparency = higherTransparency(transitionTransparency,  vehicleTransparency);
    gFormerGui.Transparency = higherTransparency(100-transitionTransparency,  vehicleTransparency);
    
    /*
    if (vehicleTransparency < gCurrentGui.Transparency)
       gCurrentGui.Transparency = vehicleTransparency;  
    if (vehicleTransparency < gFormerGui.Transparency)
       gFormerGui.Transparency = vehicleTransparency;  
    */
    
    //_gVehicle.Transparency = 0; //DEBUG
    //_gVehicle.BackgroundGraphic = 4; //DEBUG;
    
    //Display(String.Format("%d,%d",_gVehicle.Transparency,_gVehicle.X ));
    
}

//this function is run at each game cycle
static void IndyTravelMap::repeatedly_execute_always()
{
    if (vehicleSprite==null)
      AbortGame(String.Format("IndyTravelMap : you didn't define a vehicle sprite for the current region (player at %d, %d). Please use 'addVehicle' and position player properly.", player.x,  player.y));


    drawLine(); //update the line's drawing

    updateVehicleTransparency(); //make the vehicle overlay fade in or out

    manageRegionTransition(); //if the character changes region (e.g. travels by sea), then the displayed vehicle changes after a short fading
    
}


function initLinesObject(Object* _oLines)
{
  _oLines.Transparency = defaultLineTransparency;
  _oLines.X = 0; //left side of the object
  _oLines.Y = Room.Height; //bottom of the object
  _oLines.Baseline = 1; 
}


static void IndyTravelMap::addVehicle(int regionID, int graphicID, int X,  int Y)
{
  vehicles[regionID].regionID = regionID; //yeah that's stupid. But just in case we clean up the code some day and don't want to use the array index as the region ID
  vehicles[regionID].graphicID = graphicID; 
  vehicles[regionID].X = X; 
  vehicles[regionID].Y = Y; 
  

  /////////////////////////////////////////////
  //          in a perfect world, everything below should be done only once,
  //          not every time we add a vehicle. But it's more convenient 
  //          like that, it skips the need to add another function
  /////////////////////////////////////////////
  Region* currentRegion = Region.GetAtRoomXY(player.x, player.y);
  currentRegionID = currentRegion.ID;
  previousRegionID = currentRegionID;
  //currentVehicleImage = vehicles[currentRegion.ID].graphicID;
  
  
  //now we initialize the vehicles overlay itself
  if (vehicleSprite==null && vehicles[currentRegionID].graphicID != 0)
    vehicleSprite = vehicleSprite.CreateFromExistingSprite (vehicles[currentRegionID].graphicID);

}

static void IndyTravelMap::room_Load(Object* _oLines,  bool _enableSmoothScrolling,  GUI* __gVehicle1,   GUI* __gVehicle2)
{

  //some general AGS bullshit
  SetBackgroundFrame (0);//not sure what this is for, but it's definitely to avoid trouble with animated backgrounds
  //Mouse.Mode = eModePointer;
  enableSmoothScrolling = _enableSmoothScrolling;

  
  //now we initialize the line
  initLinesObject(_oLines);
  oLines = _oLines;
  
  linesSprite = linesSprite.Create (Room.Width, Room.Height, true); //we create the dynamic sprite we'll work with
  
  
  oLines.Graphic = linesSprite.Graphic;
  
  //we initialize all the images we want for the vehicles
  //vehiclesImages[1] = 3;
  //vehiclesImages[2] = 4;
  //currentVehicleImage = vehiclesImages[1];

  
  _gVehicle1 = __gVehicle1;
  _gVehicle2 = __gVehicle2;
  
  _gVehicle1.Transparency = 100; //invisible until fadein finishes
  _gVehicle2.Transparency = 100; //invisible until fadein finishes
  vehicleTransparency = 100;
  
}
  
static void IndyTravelMap::setLineOptions(int color,  int transparency)
{
    
   
   oLines.Transparency = transparency;
   lineColor = color;
}

static void IndyTravelMap::setVehicleOptions(int maxTransparency,  int transitionSpeed)
{
  maxVehicleTransparency = maxTransparency ;
  vehicleTransitionSpeed = transitionSpeed;
}



  
static void IndyTravelMap::room_AfterFadeIn()
{
  if(enableSmoothScrolling)
    SmoothScroll_ScrollingOn(); //if there's no smooth scrolling in your game, 
                                //then comment out this line!
                                
  gVehicle1.Visible = true;
  gVehicle2.Visible = true;
  _gVehicle1.Transparency = 100;
  _gVehicle2.Transparency = 100;
  
  oLines.Visible = true;
  Wait(1);
  
}

static void IndyTravelMap::room_Leave()
{
  if(enableSmoothScrolling)
    SmoothScroll_ScrollingOff();//if there's no smooth scrolling in your game, 
                                 //then comment out this line!
}

static void IndyTravelMap::addWaypoint(int X,  int Y)
{ //Display("Waypoint : %d, %d", X, Y);
  player.AddWaypoint(X, Y);
  
}

