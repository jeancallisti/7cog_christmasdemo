

////////////////////////////////////////////////////////
//
//    RADIO BUTTON
//
///////////////////////////////////////////////////////

#define MAX_RADIO 4 //4 choices at most
Button* bRadioButton[MAX_RADIO];
int nbRadio = 0;
int selectedRB = 0;
int spriteOff_RB=0;
int spriteOn_RB=0;
int spriteHovered_RB=0;


void UpdateGraphics()
{
  int i=0;
  while (i<MAX_RADIO) {
    if (bRadioButton[i] != null)
    {
      if(i==selectedRB) {
        bRadioButton[i].NormalGraphic =spriteOn_RB;
        bRadioButton[i].MouseOverGraphic =spriteOn_RB;
        bRadioButton[i].PushedGraphic =spriteOn_RB;
        
      }
      else
      {
        bRadioButton[i].NormalGraphic =spriteOff_RB;
        bRadioButton[i].MouseOverGraphic =spriteHovered_RB;
        bRadioButton[i].PushedGraphic =spriteOn_RB;      
      }
      
      //safety, so that the button is not invisibale if it has no graphic:
      if (bRadioButton[i].NormalGraphic==0)
        bRadioButton[i].Text="O";
    }
    i++;
  }  
  
}

static void RadioButton::Reset()
{
  int i=0;
  while (i<MAX_RADIO) {
    bRadioButton[i] = null;
    i++;
  }
  nbRadio=0;
  selectedRB=0;
}

static void RadioButton::BindChoice(int i,  Button* c)
{
  if (bRadioButton[i]==null) {
    bRadioButton[i] = c;
    nbRadio++;
    UpdateGraphics();
  }else
    Display("WARNING RadioButton::BindChoice : radio already bound!");
}

static void RadioButton::SetChoice(int i)
{
  selectedRB = i;
  UpdateGraphics();
}
  

static int RadioButton::GetChoice()
{
  return selectedRB;
}

static void RadioButton::SetGraphics(int spriteOff,  int spriteHovered,  int spriteOn)
{
  spriteOff_RB=spriteOff;
  spriteOn_RB=spriteOn;
  spriteHovered_RB=spriteHovered;  
  UpdateGraphics();
}


void RadioButton_repeatedly_execute_always()
{
  if (StandaloneClick.ClickDetected(eMouseLeft))
  {
    if (StandaloneClick.GetClick(eMouseLeft, false)!=null){
      int i=0;
      while (i<nbRadio) {
        if (StandaloneClick.GetClick(eMouseLeft)==bRadioButton[i]) {
          selectedRB=i;
          //Display("radio");//DEBUG
          UpdateGraphics();
          i=nbRadio; //Exit loop
        }
        i++;
      }
    }
    
  }
}



////////////////////////////////////////////////////////
//
//    SAFE OVERLAY
//
///////////////////////////////////////////////////////

Overlay* o;

static void Overlay_Safe::CreateGraphical(int x,  int y,  int slot,  bool transparent)
{
  if (o!=null)
    if (o.Valid)
      o.Remove();
  
  o=Overlay.CreateGraphical(x, y, slot, transparent);
  

}
  

static void Overlay_Safe::Remove()
{
  if (o==null)
    return;
  
  if (o.Valid)
    o.Remove();
}




////////////////////////////////////////////////////////
//
//    ADVANCED LISTBOXES
//
///////////////////////////////////////////////////////

#define MAXENTRIES 300 //all entries of all advanced listboxes put together

#define ENTRY int //fake type for entries indices
#define LBOX int //Fake type for listboxes indices

#define LBNONE -1

struct Entry {
  String text;
  ENTRY next;
};
Entry entries[MAXENTRIES];

struct AdvListBox {
  ListBox* list;
  ENTRY firstEntry;  
  ENTRY lastEntry;
  Label* coolTip;
  //String coolTipText;
};

AdvListBox lBoxes[MAXADVLISTBOX];
int nbListBoxes=0;

LBOX findListBox(ListBox* lb)
{
  int i=0;
  while (i<nbListBoxes)
  {
    if (lBoxes[i].list==lb)
      return i;
    i++;
  }
  return LBNONE;
}

ENTRY findFreeEntry()
{
    ENTRY e = 0;
    while (e<MAXENTRIES)
    {
      if (entries[e].text == null)
        return e;
      e++;
    }
    
    Display("findFreeEntry : no more free entries. Increase 'MAXENTRIES'");
    return LBNONE;
}

void clearEntry(ENTRY e)
{
      entries[e].next = LBNONE;
      entries[e].text = null;
}

void ResetAllEntries()
{
    ENTRY e=0;
    while (e<MAXENTRIES) {
      clearEntry(e);
      e++;
    }
}

void ClearAllEntries(LBOX lb)
{
  ENTRY e = lBoxes[lb].firstEntry;
  while (e!=LBNONE) {
    ENTRY next = entries[e].next;
    clearEntry(e);
    e=next;
  }
}

void ResetListBox (LBOX i)
{
    lBoxes[i].list=null;
    lBoxes[i].firstEntry=LBNONE;
    lBoxes[i].lastEntry=LBNONE;
    lBoxes[i].coolTip=null;
    //lBoxes[i].coolTipText="";
    
}


void ClearEntries_All(this ListBox*)
{
  
  this.Clear();
  
  LBOX lb = findListBox(this);
  if (lb!=LBNONE)
    ClearAllEntries(lb);
}


LBOX AddListBox(ListBox* list)
{
  if (nbListBoxes >= MAXADVLISTBOX) {
    Display("AddListBox: ERROR: too many advanced listboxes. Increase 'MAXADVLISTBOX'.");
    return LBNONE;
  }
  
  LBOX lb = nbListBoxes;
  if (lBoxes[lb].firstEntry!=LBNONE)
      ClearAllEntries(lb);
      
  ResetListBox(lb);
  lBoxes[lb].list = list;
  nbListBoxes++;
  return lb;
}

void SetCoolTip(this ListBox*,  Label* coolTip)
{
  LBOX lb = findListBox(this); 
  if (lb==LBNONE)
    lb = AddListBox(this);
  
  lBoxes[lb].coolTip = coolTip;
    
}




void AddEntry(this ListBox*,  String shortVersion,  String longVersion)
{
  LBOX lb = findListBox(this); //not very optimized to do that for each entry, but, to hell with it

  if (lb==LBNONE)
    lb = AddListBox(this);
  
  
  ENTRY e = findFreeEntry();
  entries[e].text = longVersion;
  entries[e].next = LBNONE;
  if (lBoxes[lb].firstEntry == LBNONE)
    lBoxes[lb].firstEntry = e;
  
  ENTRY last = lBoxes[lb].lastEntry;
  if (last!=LBNONE)
    entries[last].next = e;
    
  lBoxes[lb].lastEntry = e;
  
  
  this.AddItem(shortVersion);
}

void SetCoolTipText(this ListBox*,  String text)
{
  LBOX lb = findListBox(this); 
  if (lb==LBNONE)
    lb = AddListBox(this);
    
  if (lBoxes[lb].coolTip!=null)
    lBoxes[lb].coolTip.Text = text;
  
}

//Gets entry number #i in the list of all entries of "l".
//This method is disastrous, computing-wise.
ENTRY GetEntry_FromIndex(LBOX lb,  int i) 
{

  ENTRY e = lBoxes[lb].firstEntry;
  int count = 0;
  while (e!=LBNONE && count <i) {
    e=entries[e].next;
    count++;
  }
  
  if (e==LBNONE) { //we exited the list because we reached the last entry
    Display(String.Format("GetEntry_FromIndex : ERROR: There is no entry '%d' in the list", i));
    return LBNONE;
  }
  
  return e;
  
}

void ListBox_repeatedly_execute_always()
{
  GUIControl* c= StandaloneClick.GetHovered();
  
  LBOX l =0;
  while (l<nbListBoxes){ //we update the tooltip of all listboxes...
    if (lBoxes[l].list==c) {  //...provided they're visible and under the mouse
      
      int i = lBoxes[l].list.GetItemAtLocation(mouse.x,  mouse.y); //what item of the listbox is under the mouse?
      if (i!= -1) {
        ENTRY e = GetEntry_FromIndex(l, i); //we need to match the ListBox item with our shitty entries list
        if (e!=LBNONE && lBoxes[l].coolTip != null) {
          //if (lBoxes[l].coolTip.OwningGUI.Visible) {
            lBoxes[l].coolTip.Visible = true;
            lBoxes[l].coolTip.X = mouse.x+10;
            lBoxes[l].coolTip.Y = mouse.y+5;
            
            if (lBoxes[l].firstEntry != LBNONE)
              lBoxes[l].coolTip.Text = entries[e].text;
            else
              lBoxes[l].coolTip.Text = "";
        }
      }
    } else {
      if (lBoxes[l].coolTip != null) {
        //if (lBoxes[l].coolTip.OwningGUI.Visible) {
          lBoxes[l].coolTip.Visible = false;
      }      
    }
    
    l++;
  }
  
}


//utility function to add text to the last item of a listbox
void AppendToLastItem(this ListBox*,  String str)
{
  this.Items[this.ItemCount - 1] = this.Items[this.ItemCount - 1].Append(str);
}

//returns true if 'txt', when rendered in the listbox's font, fits, in it (in width)
bool FitsInListBox(this ListBox*,  String txt)
{
  //we add 10 extra pixels to take in account the one-pixel margin and the border
  return (GetTextWidth(txt, this.Font) <= this.Width - 10);
}







// AGS does not provide the height (in pixels) of a listbox row.
// The height depends purely on the font's height. 
// Yet, one cannot access that info either, using scripting only
// (even with GetTextHeight, because you'd need to know in advance the height
// of the tallest character in the entire font).

/* METHOD #1 : Using a knowledge from the engine code:

row height = font height + X, where X
  = 2 if game resolution is 320x200 or 320x240;
  = 4 if resolution is higher.

The font height is calculated as the height of "YpyjIHgMNWQ". */
int GetRowHeight_safe(this ListBox*)
{
  int verticalBorder = 4; //for any resolution higher than 320x240
  if (System.ScreenHeight > 240) verticalBorder = 2; //for 320x200 and 320x240
    
  String systemString = "YpyjIHgMNWQ"; //the built-in String used by AGS
  int height = GetTextHeight(systemString,  this.Font,  3000);
  
  //return height+verticalBorder;
  return height+verticalBorder -2; //apparently the -1 is needed despite what Crimson Wizard said
}


// METHOD #2 : not using knowledge from the engine code. It's a MASSIVE HACK
//
// IMPORTANT NOTE: this function can make the game crash because of a bug in AGS' ListBox
// coding. See http://www.adventuregamestudio.co.uk/forums/index.php?topic=48793.msg636466821#msg636466821
// To work around this, you must never call this function before the ListBox has been
// painted at least once.
int GetRowHeight_risky(this ListBox* )
{
    //SAFETY
    if (!this.Visible || !this.OwningGUI.Visible) {
      Display("GetRowHeight_risky : ERROR: cannot use this function if text area is not visible");
      return -1;
    } else {
      GUIControl* c= GUIControl.GetAtScreenXY(this.X+this.OwningGUI.X+1, this.Y+this.OwningGUI.Y+1);
      if (c!=this) {
        Display("GetRowHeight_risky : ERROR: cannot use this function if text area's ListBox is covered by another control");
        return -1;
      }
    }
    
    this.Clear(); //oh by the way, this function clears your list. Woops.
    this.AddItem("0000000"); //dummy items so that there ARE items in the list
    this.AddItem("1111111");
    
    int i=0;
    int start_x=this.X+this.OwningGUI.X+1; //Coordinates of the top-left of the ListBox
    int start_y=this.Y+this.OwningGUI.Y; 

    int lastItem;
    lastItem=this.GetItemAtLocation(start_x, start_y+i); //we start from the list item at the very top of the list

    while (i<30) //we try, but still assume the characters are not higher than 30 pix high
    {
      int item = this.GetItemAtLocation(start_x, start_y+i);
      
      if (lastItem != item && item != -1) //are we finally over a different item?
      {
        this.Clear(); //we clean after ourselves
        //txtAreaData[ta].rowHeight = i; //we found the height
        return i;
      }  
      lastItem=item; //we're still over the same item. So we remember that
      i++;           //and we'll try again with the next row of pixels
    }

    //still over the first list item after 30 pixels?
    Display("WARNING: could not find height of text area rows. The cursor might be off, or maybe your font is taller than 20 pixels?");
    this.Clear();

    return 10; //we default to some bullshit value, to avoid crashes


}




////////////////////////////////////////////////////////
//
//    COMMON
//
///////////////////////////////////////////////////////


void game_start()
{
  ResetAllEntries();
}




void repeatedly_execute_always()
{
  /////////
  //RADIO BUTONS
  /////////
  RadioButton_repeatedly_execute_always();

  
  
  ////////////////
  //LISTBOXES
  ////////////////
  ListBox_repeatedly_execute_always();
  
}
