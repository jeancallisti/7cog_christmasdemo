GUI* gPauseGui;

#ifver 3.3.0
void SetSkipSpeech(int skipStyle)
{
    Speech.SkipStyle = skipStyle;
}

#endif

static void RealPause::Pause(bool silent)
{
    PauseGame(); 
    
    SetSkipSpeech(eSkipSpeech_Time); //nothing can skip speech, except timer, but the game is paused
    Mouse.Visible = false; 
    if (gPauseGui!=null && !silent)
      gPauseGui.Visible=true;
    
}

static void RealPause::Unpause()
{
    SetSkipSpeech(eSkipSpeech_AnyKeyOrMouse); //skip speech with mouse or keyboard or timer
    Mouse.Visible = true;  
    if (gPauseGui!=null)
      gPauseGui.Visible=false;  
      
    UnPauseGame(); 
}

static bool RealPause::IsPaused()
{
  return IsGamePaused();
}

static void RealPause::BindGui(GUI* _gPause)
{
  gPauseGui = _gPause;
}




int count;

static bool SuspendableWait::Done()
{  
  if (count >0)
    return false;
  
  return true;
}


static void SuspendableWait::Set(int delay)
{
  if (count<=0)
    count = delay;
  else
    AbortGame("SuspendableWait::Set :  count should be 0");
}



void SuspendableWait_Update()
{  
  if (count >0) {
    if (!IsGamePaused()) {
      count--;
    }
  } else {
    count=0; //safety
  }
}
  
  
function game_start()
{
  
}

function repeatedly_execute_always() 
{
  SuspendableWait_Update();
}

  

