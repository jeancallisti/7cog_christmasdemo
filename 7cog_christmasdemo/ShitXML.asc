#define MAXNODES 200
#define MAXCHILDREN 5

//#define NONE -1

struct XMLNode
{
  int ID;
  String name;
  String params;
  int nbChildren;
  XMLNODE parent;
  XMLNODE children[MAXCHILDREN];
  XMLNODE brother;  // Since 'children' cannot be a dyn array, that can be a problem when there are too many children. 
                    // Solution: We use a 'brother' node to extend the current node if more children are needed. Yes, that's awkward.
  String txt;
  XMLFormattingStyle style;
};


XMLNode nodes[MAXNODES];


int findFreeNode()
{
    int i=0;
    while (i<MAXNODES)
    {
      if (nodes[i].ID == NONE)
        return i;
      i++;
    }
    AbortGame("ShitXML::findFreeNode - you need to increase 'MAXNODES'");
}

void ResetNode(XMLNODE node)
{
  nodes[node].txt="";
  nodes[node].name="";
  nodes[node].nbChildren = 0;
  int i=0;
  while (i<MAXCHILDREN) {
     nodes[node].children[i] = NONE;
     i++;
  }
  nodes[node].brother=NONE; 
  nodes[node].parent=NONE; 
  nodes[node].ID=NONE;
  
}

static void ShitXML::SetFormattingStyle(XMLNODE node,  XMLFormattingStyle style)
{
  if (node>=0)
  {
    nodes[node].style = style;
  }
}


static XMLNODE ShitXML::NewNode(String name)
{
  if (name==null) {
    Display("ShitXML::NewNode : requires a name");
    return;
  }
  
  XMLNODE ID = findFreeNode();
  ResetNode(ID);
  nodes[ID].ID=ID;
  nodes[ID].name=name;
  nodes[ID].params="";
  nodes[ID].txt="";
  
  nodes[ID].style=eXMLStyle_OneLine; //by default
  return ID;
}

static void ShitXML::SetText(XMLNODE node,  String txt)
{
  if (txt==null) {
    Display("ShitXML::SetText : txt cannot be null");
    txt="";
  }
  
  if (nodes[node].ID != NONE)
    nodes[node].txt = txt;
  else
    Display(String.Format("ShitXML::SetText : bad node '%d'", node));
}

static void ShitXML::SetParams(XMLNODE node,  String params)
{
  if (params==null) params = "";
  
  if (nodes[node].ID != NONE)
    nodes[node].params = params;
  else
    Display(String.Format("ShitXML::SetParams : bad node '%d'", node));
}

static String ShitXML::GetParams(XMLNODE node)
{
  
  if (nodes[node].ID != NONE)
    return nodes[node].params;
  else {
    Display(String.Format("ShitXML::GetParams : bad node '%d'", node));
    return "";
  }
}


static void ShitXML::SetText_i(XMLNODE node,  int value)
{
  if (nodes[node].ID != NONE)
    nodes[node].txt = String.Format("%d",value);
  else
    Display(String.Format("ShitXML::SetText : bad node '%d'", node));
}

static String ShitXML::GetText(XMLNODE node)
{
  
  if (nodes[node].ID != NONE)
    return nodes[node].txt;
  else {
    Display(String.Format("ShitXML::GetText : bad node '%d'", node));
    return "";
  }
}


static int ShitXML::GetText_i(XMLNODE node)
{
  
  if (node != NONE)
    return nodes[node].txt.AsInt;
  else {
    Display(String.Format("ShitXML::GetText_i : bad node '%d'", node));
    return -1;
  }
}


static String ShitXML::GetName(XMLNODE node)
{
  
  if (node != NONE)
    return nodes[node].name;
  else {
    Display(String.Format("ShitXML::GetName : bad node '%d'", node));
    return "";
  }
}


XMLNODE AddBrother(XMLNODE node)
{
  XMLNODE ID = findFreeNode();
  ResetNode(ID);
  nodes[ID].ID=ID;
  nodes[ID].name="BROTHER"; //Arbitrary name for all brothers
  nodes[ID].style=eXMLStyle_OneLine; //by default
  
  nodes[node].brother = ID;
  nodes[ID].parent = node;
  return ID;
}

static void ShitXML::AddChild(XMLNODE parent, XMLNODE child)
{
  if (nodes[parent].style==eXMLStyle_OneLine) {
    Display(String.Format("ShitXML::AddChild : error. You tried to add children to node '%d' ('%s') but it has style OneLine",parent,  nodes[parent].name));
    return;
  }
  
  //Display(String.Format("Addchild: '%s', '%s'", nodes[parent].name,  nodes[child].name)); //DEBUG
  
  //explore the parent and potentially its brothers to find a slot for the child
  XMLNODE bro=parent;
  while (nodes[bro].nbChildren>=MAXCHILDREN)
  {
    if(nodes[bro].brother==NONE)
      AddBrother(bro); //We add a brother

    bro = nodes[bro].brother; //we continue on to the brother
  }
  nodes[bro].children[nodes[bro].nbChildren] = child;
  nodes[child].parent=bro;
  nodes[bro].nbChildren++;
   
}

static void ShitXML::DeleteAll(XMLNODE root)
{
  //we recursvely delete all the brothers
  if (nodes[root].brother != NONE)
    ShitXML.DeleteAll(nodes[root].brother);
  
  //We recursively delete all the children.
  int i=0;
  while (i<nodes[root].nbChildren) {
    ShitXML.DeleteAll(nodes[root].children[i]);
    i++;
  }
  
  ResetNode(root);
}

void InitNodes()
{
  int i=0;
  while (i<MAXNODES)
  {
    ResetNode(i);
    i++;
  }
  
}

String MakeTab(int indent)
{
    String tab = "";
    int i=0;
    while (i<4*indent)
    {
       tab=tab.Append(" ");
       i++;
    }
    return tab;
}

String Indented(int indent,  String s)
{
  if (s==null) s="";
  
  String t = MakeTab(indent);
  return t.Append(s);
}

String OpenTag(String name)
{
   return String.Format("<%s>", name);
}

String CloseTag(String name)
{
   return String.Format("</%s>", name);
}


static XMLNODE ShitXML::FirstChild(XMLNODE parent) {
  return nodes[parent].children[0];
}


static XMLNODE ShitXML::NextChild(XMLNODE currentChild)
{
  XMLNODE parent = nodes[currentChild].parent;
  
  //we iterate to find againt the index of the child from which we started
  int i=0;
  XMLNODE child=nodes[parent].children[0];

  while (child!=currentChild) {
    i++;
    child = nodes[parent].children[i];
  }
  
  //now we look at the next child
  i++;
  if (i<nodes[parent].nbChildren) {
    return nodes[parent].children[i];
  } else {
    if (i>=MAXCHILDREN) { //ok, we're beyond the nb of children, but isn't it because there's a brother?
      parent = nodes[parent].brother;
      if (parent == NONE) { //there is no brother
          return NONE;
      } else { //there IS a brother...
        if (nodes[parent].nbChildren==0) //...but the brother has no children yet
          return NONE;
        else
          return nodes[parent].children[0]; //...and the brother does have children. We start from the first one.
      }
    } else { //we didn't find any next child. There is none. we're at the end of the search.
      return NONE;
    }    
  }

}


void WriteNode(int indent,  XMLNODE node)
{
  if (node != NONE) //we gave a tree leaf to the function. Tsk, tsk.
  {
    if (nodes[node].ID != NONE) //we gave a badly-initialized node to the function
    {
      if (nodes[node].style==eXMLStyle_Block) { //something like <a>
                                                //                  666
                                                //               </a>
        
        //open tag
        //f.WriteRawLine(Indented(indent, OpenTag(nodes[node].name)));
        SafeFile.AppendLine(Indented(indent, OpenTag(nodes[node].name)));
        
        //Children
        XMLNODE bro = node;
        while (bro!=NONE) {
          int i=0; 
          while (i<nodes[bro].nbChildren) {
            WriteNode(  indent+1,  nodes[bro].children[i]);
            i++;
          }
          bro = nodes[bro].brother;
        }
        
        //text
        //f.WriteRawLine(Indented(indent+1, nodes[node].txt));
        
        //SafeFile.AppendLine(Indented(indent+1, nodes[node].txt));
        
        
        //split the text into as many lines as ended with '['
        //
        String remainder = nodes[node].txt;
        while (remainder != "" && remainder != null) {
           int i=0;
           while (i<remainder.Length && remainder.Chars[i] != '[') {
             //Display(String.Format("r%d='%s'",i, remainder));
            i++;
           }
           String line = remainder.Before(i-1); //i-1 because '[' is trashed and replaced with <br>
           line = line.Append("<br>");
           remainder = remainder.After(i+1); //i+1 because we skip '[', obviously
           
           SafeFile.AppendLine(Indented(indent+1, line));
           //Display(String.Format("line='%s'",line));
           //Display(String.Format("rema='%s'",remainder));
           //AbortGame("");
           int temp;
        }
        
        
        
        //close tag
        //f.WriteRawLine(Indented(indent, CloseTag(nodes[node].name)));
        SafeFile.AppendLine(Indented(indent, CloseTag(nodes[node].name)));
      }
      else if (nodes[node].style==eXMLStyle_OneLine) { // something like <a>666</a>
        String line="";
        line=line.Append(OpenTag(nodes[node].name));
        line=line.Append(nodes[node].txt);
        line=line.Append(CloseTag(nodes[node].name));
        //f.WriteRawLine(Indented(indent, line));
        SafeFile.AppendLine(Indented(indent, line));
        
      }
      else {
        Display(String.Format("XML::WriteNode : unknown style for '%s': '%d'",nodes[node].name, nodes[node].style));
      }
    }
  }
}

static bool ShitXML::Dump(XMLNODE root,  String fileName)
{
  if (root<0 || nodes[root].ID == NONE) {
    Display(String.Format("Error: ShitXML::Dump : empty XML node %d", root));
    return false;    
  }
  
  
  if (SafeFile.Open(fileName)) {
    WriteNode(0, root);
    SafeFile.Close();
    return true;
  } else
      Display(String.Format("Error: ShitXML::Dump : Could not open '%s' for writing", fileName));

  return false;
  
}

  
/////////////////////////////////////
//
//        XML PARSING
//
////////////////////////////////////
  
String xmlBuffer;
int bufferStart=0; //global position of the first character of xmlBuffer;
int start=0; //global position of the character being read

File* fXML;


    /*
char buf_CharAt(int at)
{
  while (at-bufferStart) >= xmlBuffer.Length){
    if (!fXML.EOF) {
      xmlBuffer = xmlBuffer.Append(fXML.ReadRawLineBack());
    } else {
        Display(String.Format("buf_CharAt : requested %d, buffer length is %d", at-bufferStart,  xmlBuffer.Length));
        return eKeySpace;
    }
  }
  
  return xmlBuffer.Chars[at-bufferStart];
}

*/

bool ReachedEOF() {
    return fXML.EOF;
}

//reads from the file as many characters as needed to be able to read buffer at position 'start+howMany'
void LoadAhead(int howMany)
{
  while (start+howMany-bufferStart >= xmlBuffer.Length){
    if (!fXML.EOF) {
      xmlBuffer = xmlBuffer.Append(fXML.ReadRawLineBack());
    } else {
        //Display(String.Format("buf_CharAt : requested %d, buffer length is %d", start-bufferStart,  xmlBuffer.Length));
        //start++;
        //return eKeyReturn; //arbitrary value that is not likely to appear in the file
      xmlBuffer = xmlBuffer.Append(String.Format("%c", eKeyReturn)); //arbitrary value that is not likely to appear in the file
    }
  }  
}

//tells what character there is at position 'start+howMany', but does not change 'start'
char LookAhead(int howMany) {
  LoadAhead(howMany);
  return xmlBuffer.Chars[start+howMany-bufferStart];
}

//tells what character there is at position 'start' and increases 'start'
char GetNextChar()
{
  char c = LookAhead(0);
  start++;
  return c;
    
}



//call 'consume' every once in a while to reduce the size of xmlBuffer 
//(only if you're sure you won't need to read backwards)
String consume (int howMany)
{
  String ret = xmlBuffer.Before(howMany);
  xmlBuffer = xmlBuffer.After(howMany);
  bufferStart+=howMany;
  return ret;
}

void skipWhiteSpaces() 
{
  char c = LookAhead(0);
  while (c==' ' && !ReachedEOF())
  {
    start++;
    c = LookAhead(0);
  }
  //return c;
}

void GoBack(int howManyChars)
{
  start-=howManyChars;
}

//shows a certain amount of characters after the given position. Use this if a parsing error is detected.
String ShowXMLError2(int position) 
{
  return String.Format("'%s'", xmlBuffer.Substring(position-bufferStart,  10)); 
}

//shows a certain amount of characters after 'start'. Use this if a parsing error is detected.
String ShowXMLError() 
{
  return ShowXMLError2(start); 
}



enum TagType {
  eTagType_OpeningTag, 
  eTagType_ClosingTag, 
  eTagType_SoloTag  
};

//variables below are set by function 'SeekTag'. 
//Their values can be used only immediately after calling SeekTag.
//...Afterwards they will be overwritten by another call.
String rawDataBeforeTag;
String rawTagContents;
String cleanTagName;
String tagParams;
TagType tagType;
int seekStart;

void SeekTag()
{
    //reset all static variables
    rawDataBeforeTag = "";
    rawTagContents = "";
    cleanTagName = "";
    tagParams = "";
    seekStart = start;
    
    //get everything that's before the tag
    char c = GetNextChar();
    while (c!= '<') {
      rawDataBeforeTag = rawDataBeforeTag.AppendChar(c);
      c = GetNextChar();
    }
    
    //get everything that's inside the tag
    c = GetNextChar(); //that's because we're skipping '<'
    while (c!= '>') {
      rawTagContents = rawTagContents.AppendChar(c);
      c = GetNextChar();
    }
    
    cleanTagName = rawTagContents; //we gotta start with something don't we?
    
    //what kind of tag is it?
    if (cleanTagName.EndsWith("/")) { // < somet hing />
       tagType = eTagType_SoloTag;
       cleanTagName = cleanTagName.Before(cleanTagName.Length-1); //we remove the "/" at the end
    } else if (cleanTagName.StartsWith("/")) { // </ somet hing >
       tagType = eTagType_ClosingTag;
       cleanTagName = cleanTagName.After(1); //we remove the "/" at the beginning
    } else { // < somet hing >
        tagType = eTagType_OpeningTag;
    }

    cleanTagName = cleanTagName.Trim_Before_After(); //Remove white spaces at the beginning and at the end

    //remove the parameters
    int spacePosition = cleanTagName.IndexOf(" ");
    if ( spacePosition >=0) { //does it still contain at least one space?
      //if yes, it means it contains parameters after the actual tag name
      tagParams = cleanTagName.After(spacePosition+1);
      cleanTagName = cleanTagName.Before(spacePosition);
      //Display(String.Format("Found params to tag '<%s>' : '%s'. They will be stored but ignored.",cleanSectionName1,  params));
    }
  
   
}


void ReadSection(XMLNODE parent)
{
  char c;
  
  String raw2, tag2, cleanTag2, params2; TagType type2; int start2;
  
  //Display(String.Format("starting section.")); //DEBUG
  
  while (true) { //We continue as long as there are sequences of <tag>...</tag> at the same level
    
    SeekTag();
    String raw1 = rawDataBeforeTag;
    String tag1 = rawTagContents;
    String cleanTag1 = cleanTagName;
    String params1 = tagParams;
    TagType type1 = tagType;
    int start1 = seekStart;
    
    if (ReachedEOF())  { Display(String.Format("001 badly formed xml. Reached end of file while expecting an opening tag.[Here: %s", ShowXMLError2(start1))); return; }

    if (raw1.Trim_Before_After()!="") { //was there something else than spaces before that tag?
      Display(String.Format("002 badly formed xml. Expected '<', found '%s'. Here: %s", raw1,  ShowXMLError2(start1)));
      return;
    }

    if (type1 == eTagType_SoloTag) {
          Display(String.Format("003 badly formed xml. Found a solo tag '<%s>' while looking for an opening tag. [Here: %s", tag1,  ShowXMLError2(start1)));
          return;
    } else if (type1 == eTagType_ClosingTag) {
          Display(String.Format("004 badly formed xml. Found a closing tag '<%s>' while looking for an opening tag. [Here: %s", tag1,  ShowXMLError2(start1)));
          return;    
    }

    //now, we're sure that it's an opening tag. We create an XML noce to store it
    XMLNODE node = ShitXML.NewNode(cleanTag1); 
    ShitXML.SetParams(node,  params1); 
    ShitXML.SetFormattingStyle(node, eXMLStyle_Block); //otherwise you can't add children... :(
    ShitXML.AddChild(parent,  node);

    //Display(String.Format("Just added child '%s' to parent '%s'",nodes[node].name,  nodes[parent].name)); //DEBUG
        
    bool closingTag, openingTag, soloTag; String contents = "";
    while (!closingTag && !openingTag) { //we keep reading tags as long as we encounter solo tags
     
      closingTag = false; openingTag=false; soloTag=false;

      SeekTag();
      raw2 = rawDataBeforeTag;
      tag2 = rawTagContents;
      cleanTag2 = cleanTagName;
      params2 = tagParams;
      type2 = tagType;
      start2 = seekStart;      
     
      contents = contents.Append(raw2); //What we read before the tag.
      
      //Display(String.Format("contents so far: '%s'",contents)); //DEBUG
      
      if (ReachedEOF())  { Display(String.Format("005 badly formed xml. Reached end of file while expecting a closing tag to <%s>.[Here: %s", tag1, ShowXMLError2(start-10))); return; }
      
      if (type2 == eTagType_ClosingTag) {
        
          closingTag = true;
          
          GoBack(tag2.Length+2); //+2 = < > ; it will be processed (again) below.
        
      } else if (type2 == eTagType_SoloTag) {
        
          soloTag = true;
          if (params2 != "") {
            GoBack(tag2.Length+2);  // +2 = < >
            Display(String.Format("006 badly formed xml. Solo tag '<%s>' contains several words. It's forbidden. [Here: %s", tag2,  ShowXMLError2(start2)));
            return;
          }     
          
          //what kind of solo tag is it?
          if (cleanTag2.LowerCase() == "br") {
            contents = contents.Append("[");
          } else {
            Display(String.Format("007 xml warning: parser doesn't know how to handle Solo tag '<%s>'.[Here: %s", tag2,  ShowXMLError2(start2)));
            contents = contents.Append(cleanTag2.UpperCase());
          }
 
      } else {    // < somet hing>
      
          //Display(String.Format("opening tag: '<%s>'",cleanSectionName2)); //DEBUG
          openingTag=true;
          
      }

      
    } //while (!closingTag && !openingTag)
    

    
    //now that we have our opening or closing tag for sure, and that it's well-formed, let's see what's in it
    if (openingTag) {
      nodes[node].txt = "";
      contents = contents.Trim_Before_After();
      if (contents != "") {
          Display(String.Format("008 badly formed xml. Found some content in-between <%s> and <%s>: '%s'.[Here: %s", tag1, tag2,  contents.Truncate(20),  ShowXMLError()));
          contents = contents.Append(cleanTag2.UpperCase());      
      }

      
      //Go back before this opening tag. It will be processed in the level below
      GoBack(tag2.Length+2);  // +2 = < >

      ReadSection(node);
      
    } else { //if (openingTag)
      //Display(String.Format("storing contents: '%s'",contents)); //DEBUG
      nodes[node].txt = contents;
    }
  
    //HERE: Closing tag to the current child section. It was spotted (a) after a call to ReadSection,
    //      or (b) immediately after "contents", in the loop just above.
    // Typical situation (a):
    //       <a>
    //         <b></b> 
    //         <c></c>
    //  HERE</a>
    // Typical situation (b):
    //       <a>
    //         contents contents <br/> contents
    //  HERE</a>    

    SeekTag();
    raw2 = rawDataBeforeTag;
    tag2 = rawTagContents;
    cleanTag2 = cleanTagName;
    params2 = tagParams;
    type2 = tagType;
    start2 = seekStart; 
    
    //if (ReachedEOF())  { Display(String.Format("009 badly formed xml. Reached end of file while reading a closing tag.[Here: %s", ShowXMLError2(start2))); return; }
    
    if (type2 != eTagType_ClosingTag) {
        Display(String.Format("010 badly formed xml. Expected </%s>. Around here: %s", cleanTag1, ShowXMLError2(start2)));
        GoBack(tag2.Length+2); //+2 = < > 
        return;
    }
    if (cleanTag1!=cleanTag2)
    {
      Display(String.Format("011 badly formed xml. Opening tag=<%s> but closing tag=<%s>.", cleanTag1, cleanTag2));
      return;
    }

    //Display(String.Format("Finished reading '%s'", sectionName2)); //DEBUG

    
    
    ////////// Now we check what comes AFTER the closing tag //////////////////
    skipWhiteSpaces();
    
    if (ReachedEOF()) { //we're after the very last closing tag. Time to quit.
      //Display(String.Format("EOF ('%s')", xmlBuffer.Substring(start-20, 19) )); //DEBUG
      return;
    }
    c=LookAhead(0); //first character after 'start'
    if (c!='<') {
      //GoBack(1);
      Display(String.Format("012 badly formed xml. There cannot be rogue text between a closing tag (<%s>) and the next tag. Here: %s", tag2,  ShowXMLError()));
      return;
    } else {
      //HERE: if there is another child section after the child section that just ended
      //typical situation :
      // <a>
      //   <b></HEREb>
      //   <c></c>
      // </a>
      
      //Display(String.Format("Found <",null)); //DEBUG
      
      
      c=LookAhead(1);//second character after 'start'
      if (c!='/') { //it means we have a new section start
        //we do nothing, we'll just iterate
      } else { //two closing tags in a row: 
        //we don't want to steal a closing tag from the calling "ReadSection" => we just return
        //Display(String.Format("closing tag detected: '%s...'", xmlBuffer.Substring(start, 19) )); //DEBUG
        return;
      }

    } 
        

    
  } // while (!lastSibling) {
    
}


static void ShitXML::Parse(XMLNODE root,  String fileName)
{
 
  xmlBuffer="";
  start=0;
  bufferStart=0;


  fXML = File.Open(fileName,eFileRead);
  if (fXML==null) {
    Display(String.Format("ShitXML::Parse : ERROR : could not open '%s' for reading.", fileName));
    return;
  }
  
  ShitXML.SetFormattingStyle(root, eXMLStyle_Block); //otherwise you can't add children... :(
  
  //XMLNODE root = ShitXML.NewNode("root");
  ReadSection(root);

  fXML.Close();
 
}


void game_start()
{
  InitNodes();
}
