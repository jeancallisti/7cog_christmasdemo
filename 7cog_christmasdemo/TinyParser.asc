
int start; //position of next char to read, AFTER GetNextChar got called
int prevStart; //position of next char to read, BEFORE GetNextChar got called
String textToParse;
bool newLine; //set to true each time a new line character has been read ( '[' )
bool eof;

static void TinyParser::StartParsing(String str)
{
  textToParse=str;
  start=0;  
  prevStart=0;
  eof=false;
  newLine=false;
}




//returns the character in 'txt' starting from 'pos', 'ahead' characters ahead.
//And makes sure not to look beyond 'txt' 's boundaries.
static char TinyParser::LookAhead(int howMany)
{
  if (start+howMany<textToParse.Length)
    return textToParse.Chars[start+howMany];
  
  return eKeyReturn; //arbitrary return value, used as default. Could be any character that wouldn't show up in a String.
          
}


static bool TinyParser::EOF() {
  return eof;
}


static char TinyParser::GetNextChar() {
  newLine=false;
  if (start<textToParse.Length) {
    prevStart=start; //we update it only once, because we count special characters ('\'+code) as a single character
    char c = textToParse.Chars[start];
    start++;
    if (c==eKeyBackSlash) {//notice that any character after '\' is swallowed up
      if (start<textToParse.Length)
        c=textToParse.Chars[start]; //we read again
      else
        c=eKeyReturn; //a character that is not liekly to be found in a text
      start++;
    } else if (c=='[') {
      newLine=true;
    }
    return c;
  }
  
  //default
  eof=true;
  return eKeyReturn; //a character that is not liekly to be found in a text

}

static bool TinyParser::NewLine() //returns true if the last character that was read was the special char for a new line ( '[' )
{
  return newLine;
}

static int TinyParser::Start() 
{
  return start;
}

static int TinyParser::PrevStart() 
{
  return prevStart;
}