
//Extra sprites that are not part of Tumbleweed
void SetTranslatedSprites(eLanguage lang)
{
    if (lang == eLangEN) {

    }
    else if (lang == eLangIT) {

    }
    else if (lang == eLangFR) {
        
    }
    else if (lang == eLangDE) {
        
    } 
    else if (lang == eLangSV) {
        
    } 
    else if (lang == eLangPT) {
        
    } 
    else {
        AbortGame(String.Format("In Translations::SetTranslatedSprites : Language not implemented for sprites : %d", lang));
    }
}

static void Translations::IniFile_SetLanguage(eLanguage lang)
{
   iniFile.WriteInt("Misc", "Lang", lang);
   String iniFilePath = String.Format("$APPDATADIR$/%s", iniFileName);
   iniFile.Save(iniFilePath);
}

static void Translations::SwitchLanguage(eLanguage lang,  int nextRoom /* = 12 */)
{
    Translations.IniFile_SetLanguage(lang);

    Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = lang;
    
    //Adjust Tumbleweed language
    Verbs.InitGuiLanguage(); // Assigns the localized buttons graphics to the GUI elements
    Verbs.AdjustGUIText(); // Sets the localized texts of GUI elements that don't rely on graphics
    //End of adjust Tumbleweed
    
    String translationName = Languages.GetTranslationNameFromLanguage(lang);
    
    if (!Game.ChangeTranslation(translationName))
    {
        String msg = String.Format("In module Translations : Unable to change the translation to '%s'", translationName);
        Display(msg);
        AbortGame(msg);
    }
    
    //Sprites already in English. The player isn't supposed to change the language in winsetup.exe beforehand.
    SetTranslatedSprites(lang);
        
    gSelectLanguage.Visible = false;
    
    //Override the next room and force the game to go to checkpoints
    #ifdef TESTING
    nextRoom = eRoom_GUI_03_CheckPointSelection;
    #endif
    
    player.ChangeRoom(nextRoom, 0, 0);

}



//Returns -1 if the language was never saved into the .ini before.
static eLanguage Translations::IniFile_ReadLanguage()
{
   String iniFilePath = String.Format("$APPDATADIR$/%s", iniFileName);

  if (!iniFile.Load(iniFilePath)) { //the file was never created before (first-time playing game)
    return -1;
  }
  else if (!iniFile.KeyExists("Misc", "Lang")) {
    return -1;
  }
  return iniFile.ReadInt("Misc", "Lang");
}


//Lets you annotate strings. Everything up until "DATA:" won't appear at render time.
String SmartString(String s)
{
  String needle = "DATA:";
  int needlePos = s.IndexOf(needle);
  if (needlePos >= 0) {
    //Translate, then return the data
    s = GetTranslation(s);
    s = s.Substring(needlePos+needle.Length, s.Length-needle.Length);
  } else {
    String needle2 = "NEVERTRANSLATE:";
    int needlePos2 = s.IndexOf(needle2);
    if (needlePos2 >= 0) {
      //Return the data untranslated
      s = s.Substring(needlePos2+needle2.Length, s.Length-needle2.Length);
    }
  }
  return s;
}


void game_start()
{
  Game.ChangeTranslation(""); // Force-revert to "no translation" (default language)
  
  if (IsTranslationAvailable()) {
     //Otherwise it causes all sorts of issues when trying to switch language when running the embedded demo
     AbortGame("Please run the game without a translation. Select 'Default Language' in Winsetup.exe\nCurrently you're using '%s'.", Game.TranslationFilename);
  }
}



