//start hdt            
struct VerbCoinSettings {
    bool isEnabled ;
    bool isVisible;
    int x;
    int y;
    GUI* gui;
    bool animate;
};
VerbCoinSettings verbCoinSettings;

//end hdt


//TODO: what the fuck are those global variables doing here. They're not even from this module.
int GSloctype;            // the result of GetLocationType
int GSagsusedmode;        // on_mouse_click -> unhandled_event
int used_action;          // used_action = global_action, if not cancelled
int global_action;        // containing the current clicked action

String GSlocname;         // on_mouse_click -> unhandled_event



function tweenDisplay(int transparency, int toX, int toY, int toWidth, int toHeight) {
  
  verbCoinSettings.gui.StopAllTweens();
  verbCoinSettings.gui.TweenPosition(0.5, toX, toY, eNoBlockTween, eNoBlockTween);
  verbCoinSettings.gui.TweenSize(0.5, toWidth, toHeight, eNoBlockTween, eNoBlockTween);
}

/*
function on_mouse_click(MouseButton button) {
  
  int mrx=mouse.x+GetViewportX();
  int mry=mouse.y+GetViewportY();
  int x=mouse.x;
  int y=mouse.y;
  // get location under mouse cursor
  GSloctype=GetLocationType(x, y);
  GSlocname=Game.GetLocationName(x, y);
  GSagsusedmode=Mouse.Mode;
  used_action=global_action;
  
  if (!is_gui_disabled()) {    
    if (button==eMouseLeft) {
      gCircleVerb.SetPosition(x-gCircleVerb.Width/2, y-gCircleVerb.Height/2);
      gCircleVerb.Transparency = 100;
      gCircleVerb.Visible = true;
      gCircleVerb.TweenFadeIn(0.5);
      //tweenDisplay(60, bCircleAction.X+10, bCircleAction.Y-10, bCircleAction.Width+30, bCircleAction.Height+30);
      animate=true;
    }
  }
}
*/

//float angle = 0.2;

function rotate_point(int cx, int cy, float angle, Button* p)
{
  float s = Maths.Sin(angle);
  float c = Maths.Cos(angle);

  // translate point back to origin:
  p.X -= cx;
  p.Y -= cy;

  // rotate point
  int xnew = FloatToInt(IntToFloat(p.X) * c - IntToFloat(p.Y) * s);
  int ynew = FloatToInt(IntToFloat(p.X) * s + IntToFloat(p.Y) * c);

  // translate point back:
  p.X = xnew + cx;
  p.Y = ynew + cy;
}


static void VerbCoin::Enable(bool enable)
{
    verbCoinSettings.isEnabled = enable;
}



void SetActionAndProcessClick(Action new_action) {  
  Verbs.SetAction(new_action);  
  
  int x=verbCoinSettings.x;
  int y=verbCoinSettings.y;
  int mrx=x+GetViewportX(); //viewport-relative coordinates
  int mry=y+GetViewportY();

  
  GSloctype=GetLocationType(x, y);
  GSlocname=Game.GetLocationName(x, y);
  GSagsusedmode=Mouse.Mode;
  used_action=global_action;
  
  //on_mouse_left_clicked(x, y, mrx, mry);
  //on_mouse_click(eMouseLeft); //TODO : this is probably broken  now
}



static void VerbCoin::OnClick(GUIControl *control, MouseButton button)
{
    if (control.OwningGUI == gVerbCoin)
    {
        if(control.ID == bVerbCoinClosegui.ID) { //close
              //gVerbCoin.TweenFadeOut(0.5);
              verbCoinSettings.gui.Visible = false;
        } else {  
              Action tempbutton = Verbs.GetButtonAction(control.AsButton); //the IDs of the circle GUI buttons must be the same as the IDs of the 9verb buttons
              SetActionAndProcessClick(tempbutton);
        }
    } else {
        AbortGame("a mistake has been made.");
    }
}




static void VerbCoin::Show(bool show,  int x, int y){
    if (show) {
        verbCoinSettings.gui.SetPosition(x-gVerbCoin.Width/2, y-gVerbCoin.Height/2);
        verbCoinSettings.x = x;
        verbCoinSettings.y = y;
        
        verbCoinSettings.gui.Transparency = 0; //Why?
    } else {
        verbCoinSettings.gui.Transparency = 100; //Why?
    }
    verbCoinSettings.gui.Visible = show;
    verbCoinSettings.isVisible = show;  
}

//end HDT

function repeatedly_execute() {
  if(verbCoinSettings.animate){
    //bCircleAction.X = FloatToInt(IntToFloat(bCircleAction.X) * Maths.Cos(angle) - IntToFloat(bCircleAction.Y) * Maths.Sin(angle));
    //bCircleAction.Y = FloatToInt(IntToFloat(bCircleAction.Y) * Maths.Cos(angle) + IntToFloat(bCircleAction.X) * Maths.Sin(angle));
    
    //rotate_point(bCircleCenter.X, bCircleCenter.Y, 0.1, bCircleAction);
  }
}

void InitVerbCoin()
{
    verbCoinSettings.isEnabled = true;
    verbCoinSettings.animate = false; //TODO : why?
    verbCoinSettings.gui = gVerbCoin;
    VerbCoin.Show(false);
}


function game_start()
{
    InitVerbCoin();
}
