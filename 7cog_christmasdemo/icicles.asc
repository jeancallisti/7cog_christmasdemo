int nbIcicles = 0;
 #define MAX_ICICLES 20
 
struct IcicleData {
  Object* o;
  int originalGraphic;
  DynamicSprite* spr;
  int width;
  int x_center;  //where the center of the reflection will be rendered in the object (object coordinates)
  int y_top;
  int x3_width;
  int x2_width;
  int x1_width;
  int room;
  Region* reg;
  bool enabled;
  float horiz_scale;
  float vertic_scale;
  bool sprite_has_alpha;
};

IcicleData data[MAX_ICICLES];

//DynamicSprite* draw_sprite;

int GetObjectWidth(Object* o)
{
    DynamicSprite* ds = DynamicSprite.CreateFromExistingSprite(o.Graphic);
    int w = ds.Width;
    ds.Delete();
    return w;
}

static ICICLE Icicles::NewIcicle(Object* o,  int x_center,  int y_top,  Region* reg,  bool _sprite_has_alpha)
{
  if (nbIcicles>=MAX_ICICLES)
    AbortGame("Icicles::NewIcicle : Too many icicles in this game. increase MAX_ICICLES");
    
  ICICLE icicle = nbIcicles;
  
  data[icicle].o = o;
  data[icicle].x_center = x_center; //where the center of the reflection will be rendered in the object (object coordinates)
  data[icicle].width = GetObjectWidth(o);
  data[icicle].y_top = y_top;
  data[icicle].x3_width = 10; //arbitrary
  data[icicle].x2_width = 5; //arbitrary
  data[icicle].x1_width = 2; //arbitrary
  data[icicle].room = player.Room;
  data[icicle].reg = reg;
  data[icicle].enabled = false;
  data[icicle].originalGraphic = o.Graphic;
  data[icicle].spr = null;
  data[icicle].horiz_scale = 1.0;
  data[icicle].vertic_scale = 1.0;
  data[icicle].sprite_has_alpha = _sprite_has_alpha;
  
  nbIcicles++;
  return icicle;
}

static void Icicles::SetProportions(ICICLE icicle,    int x3_width,  int x2_width,  int x1_width)
{
  data[icicle].x3_width = x3_width;
  data[icicle].x2_width = x2_width;
  data[icicle].x1_width = x1_width;
}

static void Icicles::SetScale(ICICLE icicle,    float horiz,  float vertic)
{
  data[icicle].horiz_scale = horiz;
  data[icicle].vertic_scale = vertic;

}
  
   
   
//Credits for this function got to Scavenger and Khris : http://www.adventuregamestudio.co.uk/forums/index.php?topic=50550.0
void Offset_AndRepeat(this DynamicSprite*, int x, int y)
{
  int w = this.Width;
  int h = this.Height;
  x = x % w; if (x < 0) x += w;
  y = y % h; if (y < 0) y += h;
  if (x == 0 && y == 0) return;
 
  DynamicSprite *tempspr = DynamicSprite.Create(w, h);
  DrawingSurface *surface = tempspr.GetDrawingSurface();
 
  if (x > 0 && y > 0) surface.DrawImage(x - w, y - h, this.Graphic); //top-left
  if (x > 0) surface.DrawImage(x - w, y, this.Graphic); //bottom-left
  if (y > 0) surface.DrawImage(x, y - h, this.Graphic); //top-right
  surface.DrawImage(x, y, this.Graphic); //bottom-right
 
  surface.Release();
  surface = this.GetDrawingSurface();
  surface.Clear(COLOR_TRANSPARENT);
  surface.DrawImage(0, 0, tempspr.Graphic);
  tempspr.Delete();
  surface.Release();
}

//Credits for this function got to Scavenger and Khris : http://www.adventuregamestudio.co.uk/forums/index.php?topic=50550.0
void Offset_AndCrop(this DynamicSprite*, int x, int y)
{
  int w = this.Width;
  int h = this.Height;
  x = x % w; if (x < 0) x += w;
  y = y % h; if (y < 0) y += h;
  if (x == 0 && y == 0) return;
 
  DynamicSprite *tempspr = DynamicSprite.Create(w, h);
  DrawingSurface *surface = tempspr.GetDrawingSurface();
 
  surface.DrawImage(x, y, this.Graphic); //bottom-right
 
  surface.Release();
  surface = this.GetDrawingSurface();
  surface.Clear(COLOR_TRANSPARENT);
  surface.DrawImage(0, 0, tempspr.Graphic);
  tempspr.Delete();
  surface.Release();
}




//Returns an exact duplicate of the player's current frame.
//watch out for s2's lifecycle, though (because of AGS' garbage collection)
DynamicSprite* CopyFrame(Character* c)
{
  ViewFrame* f = Game.GetViewFrame(player.View, player.Loop, player.Frame);
  DynamicSprite* s2 = DynamicSprite.CreateFromExistingSprite(f.Graphic, true);
  if (f.Flipped)
    s2.Flip(eFlipLeftToRight);
  return s2;
}

// Crops a sprite, but also works if the requested area is larger
// or OUTSIDE of the original sprite. The areas outside of s will just be blank.
// (the original AGS "Crop" function leaves dirty pixels in the unhandled areas)
//
// IMPORTANT: This function only fixes the "x" coordinates, not the y coordinates.
//           That means it works like the standard AGS "Crop" function regarding "y".
void CleanCrop(this DynamicSprite* ,  int x,  int y ,  int w,  int h)
{
  if (x>=this.Width || x+w<0) { //if the requested area is fully outside of s
    //we force-clear s to avoid dirty pixels from the RAM
    DrawingSurface* ds = this.GetDrawingSurface();
    ds.Clear();
    ds.Release();
  } else if (x+w>=this.Width  || x < 0) { //if the requested area is partially outside of s2
    //trick : we crop s THEN enlarge it to avoid dirty pixels from the RAM
    if (x < 0) {
      //this.Crop(0, 0, w-x, this.Height);
      this.ChangeCanvasSize(w-x, this.Height, 0, 0); //better equivalent to Crop
      this.ChangeCanvasSize(w, this.Height, -x, 0);
    } else { //x+w>=s.Width 
      this.Crop(x, 0,  this.Width - x, this.Height);
      //this.ChangeCanvasSize(this.Width - x, this.Height, x, 0); //better equivalent to Crop
      this.ChangeCanvasSize(w, this.Height, 0, 0);
    }  
  } else { //the requested area is fully inside s2
    this.Crop(x, 0, w, this.Height);
  }
  
}

void DrawIcicle(ICICLE ic,  DrawingSurface* ds,  int x_center)
{
  
  
  //DEBUG
    //gDebugGUI.Visible = true;
    DebugListbox.Clear();
  //~DEBUG
  
  
  //position of the icicle object's center relative to the player character
  int relX = (data[ic].o.X +  data[ic].width/2) - player.x;
  
  //x3 part (its behaviour differs from the other parts because we process the
  //         left part and the right part at once: everything is twice wider).
  DynamicSprite* s2 = CopyFrame(player);
  int crop_x = relX + s2.Width/2 - data[ic].x3_width/2; //the left-side end of the bit we want to keep
  s2.CleanCrop(crop_x, 0, data[ic].x3_width, s2.Height);
  
  float zoom3 = 2.0;
  int x3_renderW = FloatToInt(IntToFloat(data[ic].x3_width)*zoom3);//zoom factor
  ds.DrawImage(x_center - x3_renderW/2, 0, s2.Graphic,  0, x3_renderW,  s2.Height);
  s2.Delete();

  
  //x2 part (left)
  s2 = CopyFrame(player);
  crop_x = relX + s2.Width/2 - data[ic].x3_width/2 - data[ic].x2_width;
  s2.CleanCrop(crop_x, 0, data[ic].x2_width, s2.Height);
  int x2_renderW = data[ic].x2_width;
  ds.DrawImage(x_center - x3_renderW/2 - s2.Width,  0, s2.Graphic, 0, s2.Width,  s2.Height);
  s2.Delete();


  //x2 part (right)
  s2 = CopyFrame(player);
  crop_x = relX + s2.Width/2 + data[ic].x3_width/2;
  s2.CleanCrop(crop_x, 0, data[ic].x2_width, s2.Height);
  ds.DrawImage(x_center + x3_renderW/2,  0, s2.Graphic, 0, s2.Width,  s2.Height);
  s2.Delete();
  
  
  //x1 part (left)
  s2 = CopyFrame(player);
  crop_x = relX + s2.Width/2 - data[ic].x3_width/2 - data[ic].x2_width- data[ic].x1_width;
  s2.CleanCrop(crop_x, 0, data[ic].x1_width, s2.Height);
  float zoom1 = 0.5;
  int x1_renderW = FloatToInt(IntToFloat(data[ic].x1_width)*zoom1);//zoom factor
  ds.DrawImage(x_center - x3_renderW/2 - x2_renderW - x1_renderW,  0, s2.Graphic,  0, x1_renderW,  s2.Height);
  s2.Delete();
  
  
  //x1 part (right)
  s2 = CopyFrame(player);
  crop_x = relX + s2.Width/2 + data[ic].x3_width/2 + data[ic].x2_width;
  s2.CleanCrop(crop_x, 0, data[ic].x1_width, s2.Height);
  ds.DrawImage(x_center + x3_renderW/2 + x2_renderW,  0, s2.Graphic,  0, x1_renderW,  s2.Height);
  s2.Delete();
  
  
  
  //DEBUG
  /*
    //gDebugGUI.Visible = true;
    //DebugListbox.Clear();
    DebugListbox.AddItem(String.Format("relX=%d",relX));
    DebugListbox.AddItem(String.Format("crop_x=%d",crop_x));
    DebugListbox.AddItem(String.Format("player.x=%d",player.x));
  
  
    ds.DrawingColor = 14;
    //ds.DrawLine(data[ic].x_center - x3_renderW/2 - x2_renderW, 0, data[ic].x_center +x3_renderW/2+x2_renderW , 0);
    ds.DrawingColor = 12;
    ds.DrawLine(data[ic].x_center - x3_renderW/2 , 0,data[ic].x_center +x3_renderW/2, 0);
  */
  //~DEBUG
   
  
}

void RenderIcicle(ICICLE ic)
{
  bool USE_ALPHA_CHANNEL = data[ic].sprite_has_alpha;

  
  //if (draw_sprite!=null)
  //  draw_sprite.Delete();
    
  if (data[ic].spr == null) {
    data[ic].spr = DynamicSprite.CreateFromExistingSprite(data[ic].originalGraphic, USE_ALPHA_CHANNEL);
  }
  

  DrawingSurface* ds = data[ic].spr.GetDrawingSurface();
  ds.Clear();
  ds.DrawImage(0,  0,  data[ic].originalGraphic, 0); //restore original image

  //Create a temp sprite and draw the distorted character into it, full-sized
  int WIDTH = 100; int HEIGHT=100;//100x100 is arbitrary. We assume everything fits in.
  DynamicSprite* temp_spr = DynamicSprite.Create(WIDTH, HEIGHT, USE_ALPHA_CHANNEL); 
  DrawingSurface* temp_ds = temp_spr.GetDrawingSurface();
  DrawIcicle(ic,  temp_ds, WIDTH/2); //we draw in the middle
  temp_ds.Release();
  
  int renderWidth = FloatToInt(IntToFloat(WIDTH)*data[ic].horiz_scale);
  int renderHeight = FloatToInt(IntToFloat(HEIGHT)*data[ic].vertic_scale);
  ds.DrawImage(data[ic].x_center-renderWidth/2, data[ic].y_top, temp_spr.Graphic, 0, renderWidth, renderHeight);
  ds.Release();
  data[ic].o.Graphic = data[ic].spr.Graphic;
  
  temp_spr.Delete();
}

static void Icicles::Enable(ICICLE icicle)
{
  data[icicle].enabled = true;
}

static void Icicles::DisableAll()
{
  int i=0;
  while (i<nbIcicles) {
    data[i].enabled = false;
    i++;
  }

}


    

void repeatedly_execute_always()
{
  int i=0;
  while (i<nbIcicles) {
    if (   data[i].room == player.Room
        && data[i].enabled == true)
    {
      if (Region.GetAtRoomXY(player.x, player.y) == data[i].reg)
        RenderIcicle(i);
    }
    i++;
  }
}

void game_start()
{
  //draw_sprite = null;
}


