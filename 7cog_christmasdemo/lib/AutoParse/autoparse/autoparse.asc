// Main script for module 'prsmod'
int random, inv[2], invspk;
String invent,idont,nchar,nhot,nobj,buffer,bff,curs[10];

#sectionstart game_start  // DO NOT EDIT OR REMOVE THIS LINE
//===================================================================
   function game_start() {
curs[0]="walk";
curs[1]="look";
curs[2]="use";
curs[3]="talk";
curs[4]="USEINV";
curs[5]="get";
curs[6]="pointer";
curs[7]="wait";
curs[8]="LEC";
curs[9]="verb";
#define NBCURS 10
buffer="";
}


#sectionend game_start // DO NOT EDIT OR REMOVE THIS LINE




#sectionstart on_key_press  // DO NOT EDIT OR REMOVE THIS LINE

int ParseMouseMode(String input) {
    int counter=0;
    while (counter < NBCURS) { //set cursor mode to typed word
      if (input.Contains(curs[counter]) > -1) {
        Display("Found %s", curs[counter]);
        return counter;
      }
      counter++;
    }
    return -1;
}

function on_key_press(int keycode) {
  // called when a key is pressed. keycode holds the key's ASCII code
  if (IsGamePaused() == 1) keycode=0;  // game paused, so don't react to keypresses
  if (keycode==17)  QuitGame(1);   // Ctrl-Q
  if (keycode==363) SaveGameDialog();   // F5
  if (keycode==365) RestoreGameDialog();  // F7
  if (keycode==367) RestartGame();  // F9
  if (keycode==434) SaveScreenShot("scrnshot.bmp");  // F12
  if (keycode==9)   gInventory.Visible = !gInventory.Visible;  // Tab, show inventory

  if (keycode==19)  Debug(0,0);  // Ctrl-S, give all inventory
  if (keycode==22)  Debug(1,0);  // Ctrl-V, version
  if (keycode==1)   Debug(2,0);  // Ctrl-A, show walkable areas
  if (keycode==24)  Debug(3,0);  // Ctrl-X, teleport to room
  if (((keycode >= 'A') && (keycode <= 'Z'))||(keycode==32)){  
		buffer = buffer.AppendChar(keycode);
		player.SayBackground(buffer);			}
  if ((keycode==8)&&(buffer.Length>0)) {  
		buffer = buffer.Truncate(buffer.Length-1);
		player.SayBackground(buffer);			}
  if (keycode == eKeyReturn) { //starts parsing, including any global commands
      String input = ("");
      input = String.Format("%s", buffer);
      buffer = ("");
      if (input != "") {
        //Display("Parsing %s", input);
        Parser.ParseText(input);

        mouse.Mode = eModeWait;
        
        int mode = ParseMouseMode(input);
        if (mode > eModeWalkto) {
            int counter = 1;
            invspk = 0;
            inv[0] = 0;
            inv[1] = 0;
            while (counter <= Game.InventoryItemCount) {
              if (input.Contains(inventory[counter].Name) > -1) { //check if spoke name of item
                if (invspk < 2) {
                  inv[invspk] = counter;
                  invspk++;
                } else Display("Please don't refer to more than two items at a time.");
                if (player.InventoryQuantity[counter] > 0) { //See if player has any
                  if (mouse.Mode != 7)
                    inventory[counter].RunInteraction(mouse.Mode);
                  else player.ActiveInventory = inventory[counter];
                  if (invspk > 1)
                    if ((player.InventoryQuantity[inv[0]] > 0) && (player.InventoryQuantity[inv[1]] > 0)) {
                      player.ActiveInventory = inventory[inv[0]];
                      if (inventory[inv[1]].IsInteractionAvailable(mouse.Mode)) inventory[inv[1]].RunInteraction(mouse.Mode);
                      else {
                        player.ActiveInventory = inventory[inv[1]];
                        inventory[inv[0]].RunInteraction(mouse.Mode);
                      }
                      mouse.Mode = 7;
                    }
                } else Display("You don't have any %s!", inventory[counter].Name);
              }
              counter++;
            }

            counter = 0;
            while (counter < Game.CharacterCount) {
              nchar = String.Format("%s", character[counter].Name);
              if ((input.Contains(nchar) > -1) && (nchar != "")) { //check if spoke name of Character
                if (player.Room == character[counter].Room) //check if Character in same room
                  character[counter].RunInteraction(mouse.Mode);
                else Display("%s isn't here!", nchar);
              }
              counter++;
            }

            counter = 0;
            while (counter < Room.ObjectCount) {
              if (input.Contains(object[counter].Name) > -1) { //check if spoke name of object
                nobj = String.Format("%s", object[counter].Name);
                object[counter].RunInteraction(mouse.Mode);
              }
              counter++;
            }

            counter = 1;
            while (counter < 30) {
              if (input.Contains(hotspot[counter].Name) > -1) { //check if spoke name of hotspot
                nhot = String.Format("%s", hotspot[counter].Name);
                hotspot[counter].RunInteraction(mouse.Mode);
              }
              counter++;
            }

            Game.GlobalStrings[1] = input; //Set for unique room commands

            if (input.Contains("quit") > -1) QuitGame(1);
            else if (input.Contains("save") > -1) SaveGameDialog();
            else if (input.Contains("restore") > -1) RestoreGameDialog();
            else if (input.Contains("restart") > -1) RestartGame();
            else if (input.Contains("inventory") > -1) gInventory.Visible = true;

        } else { //if mode
            Display("Unknown verb");
        } 
      } // if (input != "") 
  } //if == 13
}
#sectionend on_key_press // DO NOT EDIT OR REMOVE THIS LINE

#sectionstart unhandled_event // DO NOT EDIT OR REMOVE THIS LINE
function unhandled_event(int what, int type) {
  if (player.ActiveInventory.ID > 0) invent.Format("%s", player.ActiveInventory.Name);
  if (what == 1) {
    if (nhot == "") nhot.Format("s%", Game.GetLocationName(mouse.x, mouse.y));
    if (type == 1) Display("You see nothing intersing at the %s.", nhot);
    else if (type == 2) Display("You can't use with the %s!", nhot);
    else if (type == 3) Display("I can't use the %s with the %s", invent, nhot);
    else if (type == 4) Display("I can't talk with the %s.", nhot);
  } else if (what == 2) {
    if (nobj == "") nobj.Format("s%", Game.GetLocationName(mouse.x, mouse.y));
    if (type == 0) Display("You see nothing intersing about the %s.", nobj);
    else if (type == 1) Display("The %s is useless, leave it alone.", nobj);
    else if (type == 2) Display("I don't feel like talking with the %s.", nobj);
    else if (type == 3) Display("I can't use the %s with the %s", invent, nobj);
  } else if (what == 3) {
    if (nchar == "") nchar.Format("s%", Game.GetLocationName(mouse.x, mouse.y));
    if (type == 0) Display("%s is a very plain looking person.", nchar);
    else if (type == 1) Display("I don't think that %s will like this.", nchar);
    else if (type == 2) Display("%s has nothing to say to you.", nchar);
    else if (type == 3) Display("%s has no interest in your %s", nchar, invent);
    else if (mouse.Mode == 8) Display("Not at this time.");
  }

  nchar = "";
  nobj = "";
  nhot = "";
}
#sectionend unhandled_event  // DO NOT EDIT OR REMOVE THIS LINE