bool postItBelowRevealed; //changes to true when the player has clicked on the underneath post-it (note) to reveal it

//Checks that the current character is Indy in Indyclothes
void setIndyChar()
{
    Character* currentChar = player;
    if (currentChar.ID != cIndyClothes.ID) {
        cIndyClothes.ChangeRoom(eRoom_101_Catacombs,  240,133);
        cIndyClothes.SetAsPlayer();
        currentChar.ChangeRoom(eRoom_108_DumpRoom, 160, 100); //remove former character from this room
    }
}


//puts the character in the right place in the room
void placeChar()
{
    player.x = 160; player.y = 180;
    player.Transparency = 100; //make the player invisible.
}



function room_FirstLoad()
{
  
}


function room_AfterFadeIn()
{
    
    //cIndy2.ChangeRoom(2, 160, 100);
    Wait(1);
    
}

bool alreadyVisited;
String soulSentence; //used in two places

function room_Load()
{
    aFlip_page.Play();
    
    if (!alreadyVisited) {
          soulSentence ="A star represents the soul. I've never seen that before."; //used in two places
          //Display("cIndy2 is in %d", cIndy2.Room);
          setIndyChar();
          placeChar();
          
          #ifdef TESTING
          if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button
             
            CheckPoints.JumpDone(); //never forget to tell the engine we're done jumping. we do it immediately in case a cutscene would contain a 'ChangeRoom', thus calling 'isJumping' again
            
            if (CheckPoints.RequestedCheckpoint() == eChckpnt_101_catacombs) {
              player.x = 223;
              player.y = 129;

            }
          } else {
            //nothing to do
          }
          #endif
          

          /*
          //if we arrive from the board close-up, the player might be cIndy_closeup_suit
          if (player == cIndy_closeup_suit)
          {
            player.SetAsPlayer();
            cIndy_closeup_suit.Transparency=100; Wait(1);
            cIndy_closeup_suit.ChangeRoom(17);
            Wait(1);
          }
          */

          player.PlaceOnWalkableArea();//safety
          
          PlayerUI.DisableAndHide(); 
          FloatingHotspot.Enable();
          FloatingHotspot.SetColor(Game.GetColorFromRGB(255, 255, 255));
          mouse.Visible = true;
          mouse.Mode = eModeWalkto;
          //player.ChangeView(84);
          //Display("changed view");

          Wait(1);

          alreadyVisited = true;
        
    }
    setIndyChar();
    placeChar();
    
    gJournalDemo.Visible = false;
    
    cIndy2.ChangeRoom(eRoom_108_DumpRoom, 160, 100);
    Wait(1);
}

function room_RepExec()
{
    //This codee to manage interactions when "floating hotspot" is enabled 
    //(floating hotspot only does the floating hotspot on screen, not the interactions when player clicks)
    Hotspot* hat = Hotspot.GetAtScreenXY(mouse.x,  mouse.y);
    if ((!IsInterfaceEnabled()) || (hat == hotspot[0])) // user interface is disabled, a blocking event is running, OR mouse not over hotspot
    {
        mouse.UseDefaultGraphic();
        //mouse.Mode = eModeWalkto;
    }
    else if (hat != hotspot[0])
    {
        mouse.SaveCursorUntilItLeaves(); // this is used if you're actually changing the mouse.Mode, not just the graphic
        //mouse.UseModeGraphic(eModeInteract);
        mouse.Mode = eModeInteract;
    }  

}


function room_Leave()
{
    mouse.Mode = eModeWalkto;
}


function hExit_AnyClick()
{
    if (player.PreviousRoom >0)
        player.ChangeRoom(player.PreviousRoom, 0, 0);
    else 
        player.ChangeRoom(eRoom_101_Catacombs, 0, 0);
}



function hDrawing_AnyClick()
{
    player.Say("The drawing is lacking some details but that's definitely the one."); 
}

/*
function hSoul_AnyClick()
{
    
}
*/



function hPostIt_AnyClick()
{
    if (!postItBelowRevealed) {
        player.Say("Marcus confirmed my translation. Everything is OK.");
    } else {
        player.Say(soulSentence);
    }
    
}

function hLuke_AnyClick()
{
    player.Say("It says here:");
    player.Say(CataPuzzle.GetSaintSentence(eSaintLuke));
}

function hThomas_AnyClick()
{
    player.Say("It says here:");
    player.Say(CataPuzzle.GetSaintSentence(eSaintThomas));
}

function hJohn_AnyClick()
{
    player.Say("It says here:");
    player.Say(CataPuzzle.GetSaintSentence(eSaintJohn));
}

function hPostIt2_AnyClick()
{
    if (!postItBelowRevealed) {
        oPostIt.Visible = false;
        postItBelowRevealed = true;
    } else {
        player.Say(soulSentence);
    }
}

function hRelic_AnyClick()
{
    player.Say("I'm certain that this relic is hidden in this crypt.");
    player.Say("...But where?");
}
