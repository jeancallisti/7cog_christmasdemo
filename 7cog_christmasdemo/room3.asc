int graphicDoorClosed = 182;
int graphicDoorOpenWithBox = 183;
int graphicDoorOpenWithoutBox = 184;

AudioChannel* channelMusic; // we  ake it global to let it continue between cutscenes but still have control over it

int waitNoBlockCounter = -1;

function WaitNoBlock(int count) 
{
  if (waitNoBlockCounter <= 0) {
    waitNoBlockCounter = count;
  } else {
    AbortGame("There is already a WaitNoBlock going on.");
  }
}

enum CutSceneToStart {
    eCutscene_None        = 0, //there's a cutscene going on but none to start
    eCutscene_Jump        = 1, //cutscene where indy does sound effects in the tunnel and then jumps in (beginning of the game)
    eCutscene_Logo        = 2, //after "jump in" and before "get up". That's when Indy is inconscious and the credits roll
    eCutscene_Credits     = 3, //after "jump in" and before "get up". That's when Indy is inconscious and the credits roll
    eCutscene_GetUp       = 4, //after the "jump in" and "credits" custscene. That's when Indy stands up and the game starts
    eCutscene_Monk        = 5,  //After completing all the puzzles. The monk storms in
    eCutscene_ReadyToPlay = 6//All cutscenes finished, the player can start playing
    
};
CutSceneToStart cutsceneToStart;

bool puzzleAlreadySucceeded;

//room state variables
bool firstTimeClick_TintedGlass = true;
//bool mustPlayJumpCutscene;
//bool mustPlayMonkCutscene;

int doorSprite;

bool journalPermanentlyHidden;

//Checks that the current character is Indy in Indyclothes
void setIndyChar()
{
    Character* currentChar = player;
    if (currentChar.ID != cIndyClothes.ID) {
        cIndyClothes.ChangeRoom(eRoom_101_Catacombs,  240,133);
        cIndyClothes.SetAsPlayer();
        currentChar.ChangeRoom(eRoom_108_DumpRoom, 160, 100); //remove former character from this room
        Wait(1);
    }
}

//puts the character in the right place in the room
void placeChar()
{
    if (player.PreviousRoom == eRoom_101b_TintedGlass) {
        //in front of tinted glass
        player.x = 265;
        player.y = 108;
    }
}




//Saves skulls sprites to be able to restore them later
void scanSkulls()
{
    int NB_SKULLS = 11;
    Object* o[] = new Object[NB_SKULLS];
    eSkullsSide sides[] = new eSkullsSide[NB_SKULLS];
    o[0] = oSkull1; sides[0] = eSkullsLeft;
    o[1] = oSkull2; sides[1] = eSkullsLeft;
    o[2] = oSkull3; sides[2] = eSkullsLeft;
    o[3] = oSkull4; sides[3] = eSkullsMiddle;
    o[4] = oSkull5; sides[4] = eSkullsMiddle;
    o[5] = oSkull6; sides[5] = eSkullsMiddle;
    o[6] = oSkull7; sides[6] = eSkullsMiddle;
    o[7] = oSkull8; sides[7] = eSkullsMiddle;
    o[8] = oSkull9; sides[8] = eSkullsMiddle;
    o[9] = oSkull10; sides[9] = eSkullsRight;
    o[10] = oSkull11; sides[10] = eSkullsRight;

    CataPuzzle.Init(o, sides,  NB_SKULLS);
    

    Wait(1);
    CataPuzzle.ResyncSkullsGraphics();
    Wait(1);
}

//fades in journal button in the bottom-right corner
void showJournal()
{
    if (!journalPermanentlyHidden) {
        gJournalDemo.Transparency = 99;
        gJournalDemo.Visible = true;
        gJournalDemo.TweenTransparency(2.0, 0, eEaseOutTween, eNoBlockTween);    
    }
}

void hideJournalPermanently() {
    journalPermanentlyHidden = true;
    gJournalDemo.StopAllTweens();
    gJournalDemo.Visible = false;
    gJournalDemo.Transparency = 100;
    Wait(1);
}




bool fadeInFinished;
int checkpoint;


void playGetUpCutscene()
{
    ProgressMetrics.ReportProgress(eProgressNewGame);

    //Hide "Indiana jones and...". The credits keep roling though.
    IntroCredits_StopGameLogo();

    //Everything below happens no matter what

    //Make Indy get up
    Wait(150);
    
    //If the player skipped the cutscene, the music might still be playing. We fade it out now and let it die.
    if (channelMusic != null) {
        channelMusic.TweenVolume(8.0, 0, eEaseInEaseOutTween, eNoBlockTween);
    }
    
    player.z =0;
    player.x = 146; player.y = 173; //these coordinates must match the place where Indy has fallen. The animations might have a different size
    player.UnlockView();
    player.LockView(INDYCLOTH_GETUP);
    player.Animate(0,  5, eOnce, eNoBlock, eForwards);
    player.SayBackground("Ugh...");
    Wait(350);
    
    AudioChannel* channelMusic2 = aCatacombs_V2.Play(eAudioPriorityNormal, eRepeat); // Do't forget to reduce the default volume in the sound's properties
    
    //Finish cutscene
    player.UnlockView();
    player.x = 176; player.y = 167; //these coordinates must match the place where Indy has gotten up. The sprite might have a different size
    //TODO: play short 'Indy victory' cue.
    Wait(30);
    player.Say("All in an day's work for an archeologist.");
    player.Walk(154, 153, eBlock);
    player.FaceDirection(eDirectionDown);
    player.Say("Now I better find that relic.");
    
    //Re-enable GUI
    cutsceneToStart = eCutscene_ReadyToPlay;
    mouse.Mode = eModeWalkto;
    
    //Continue rolling some credits
    IntroCredits_StartNextCredit();
    
    CustomSave.Autosave();
}
void playLogoCutscene()
{
    //Find channel currently playing music : 
    AudioChannel* c = null;
    for (int i=0; i<System.AudioChannelCount; i++) {
        AudioChannel*  temp= System.AudioChannels[i];
        if (temp.PlayingClip == aIntro_music_00)
            c = temp;
    }
    
    //Skip ahead in the channel straight to the Indy theme: 
    if (c != null) {
        c.Seek(34500); //Starts at 34 seconds in aIntro_Music_00
    }
    
    //Start FOa-style credits
    IntroCredits_StartGameLogo();
    
    //Wait a bit before we show the credits rolling underneath
    WaitNoBlock(200);
    cutsceneToStart = eCutscene_Credits;
}

void playCreditsCutscene()
{
    //First batch of credits
    IntroCredits_StartNextCredit();
    cutsceneToStart = eCutscene_GetUp;
}


//Plays the cutscene where the monk storms in
function playMonkCutscene()
{
  
  hideJournalPermanently();

  Wait(1);
  
  StartCutscene(eSkipESCOnly);
  
  //Open the door
  oDoor.Graphic = doorSprite;
  aDoor.Play();
  cMonk.Transparency = 100; //Hide the monk temporarily to use him as a sound effect
  cMonk.ChangeRoom(player.Room, 95, 89, eDirectionDown);
  Wait(1);
  
  aCatacombs_V2.Stop();
  aMusic5.Play();
  cMonk.Say("*CLICK*");
  Wait(30);
  
  cMonk.x = 94; cMonk.y=79; cMonk.Transparency = 0; 
  RestoreWalkableArea(3); //restore walkable area inside the door so that the monk can walk AND is properly scaled
  Wait(1);
  
  cMonk.Walk(91, 93, eBlock);
  cMonk.Say("STOP RIGHT THERE, THIEF!");
  cMonk.Walk(87, 132, eBlock);
  
  EndCutscene();
  
  
  dMonk1.Start(); //start dialog
  

  
}

function playAFTERMonkCutscene()
{
  //TODO: Fnd why this line is needed. Why does the GUI briefly appear without it???
  gMain.Transparency = 100;
  PlayerUI.DisableAndHide();
  
  //Everything below is played no matter what
    aCatacombs_V2.Stop();
    aMusic5.Stop(); //The ominous music triggered by the monk
    AudioChannel* mChannel = aOff_to_norway00.Play(eAudioPriorityNormal, eOnce);
    
    player.Walk(player.x, player.y+10,eBlock);
    Wait(30);
    player.FaceAndSay(eDown, "Norway, here I come!");
    while(mChannel.IsPlaying) {
        Wait(10);
    }
  
  //Cleanly finish everything that needs to bo stopped here. (music, etc.)
  aCave_ambiant.Stop();
  
  player.ChangeRoom(eRoom_105_EuropeMap, 0, 0);
}



//pays the cutscene where Indy jumps in
function playJumpCutscene() 
{

    //Display("%d", channel.Volume);

    FloatingHotspot.Disable();
    gJournalDemo.Visible = false;
    
    StartCutscene(eSkipESCOnly);    


    channelMusic = aIntro_music_00.Play();
    channelMusic.Volume = channelMusic.Volume / 2;
    
    // Long pause during the music plays, before the beginning of the cutscene.
    // During that pause, the "Paris, 1937" appears then disappears.
    Wait(3*GetGameSpeed());
    
    gLocation.Transparency = 100;
    gLocation.Visible = true;
    Wait(1);
    gLocation.TweenTransparency(0.5, 0, eEaseInTween, eNoBlockTween);
    
    Wait(6*GetGameSpeed());
    
    gLocation.TweenTransparency(1.0, 100, eEaseInTween, eNoBlockTween);

    Wait(2*GetGameSpeed());
    
    AudioChannel* channelSounds = aBoobytrap_audacity.Play();
    
    player.Transparency = 100;
    
    Wait(20);
    
    player.x = 35;
    player.y = 156;
    Wait(1);
    player.SayBackground("*tap*");
    Wait(40);
    player.x = 40;
    player.y = 136;
    Wait(1);
    player.SayBackground("*tap*");
    Wait(40);
    player.x = 30;
    player.y = 146;
    Wait(1);
    player.SayBackground("*tap*");
    
    
    Wait(40);
    player.x = 35;
    player.y = 156;
    Wait(1);
    player.SayBackground("*tap*");
    Wait(40);
    player.x = 40;
    player.y = 136;
    Wait(1);
    player.SayBackground("*tap*");
    Wait(40);
    player.x = 30;
    player.y = 146;
    Wait(1);
    player.SayBackground("*tap*");
    Wait(30);
    
    
    player.SayBackground("*CLICK*");
    Wait(105);

    player.SayBackground("*rattle* *rattle* *rattle*");
    Wait(150);
    player.SayBackground("*RATTLE*");
    Wait(150);
    player.SayBackground("*tap* *TAP* *TAP*");
    Wait(300);

    player.SayBackground("Oof!");
    Wait(90);
    
    player.SayBackground("*WOOSH*");
    Wait(90);
    
    oFlameBurst.SetView(FLAMEBURST, 0, 0);
    oFlameBurst.Animate(0, 2, eOnce, eNoBlock, eForwards);
    
    player.SayBackground("Yagh!");
    Wait(150);
 
    player.SayBackground("*WOOSH*");
    Wait(50);
    
    oFlameBurst.SetView(FLAMEBURST, 0, 0);
    oFlameBurst.Animate(0, 2, eOnce, eNoBlock, eForwards);
    player.SayBackground("*BANG*");
    Wait(60);
    
    player.x = 86;
    player.y = 150;
    player.z = 30; //we make the player 30 pixels lower to avoid walkbehind issues with our animation
    Wait(1);
    player.Transparency = 0;
    player.LockView(INDYCLOTH_JUMP, eStopMoving);
    player.TweenPosition(1.0, player.x, player.y+50, eEaseInTween, eNoBlockTween); //make the animation move vertically
    player.Animate(0, 5, eOnce, eBlock, eForwards);    
    
    
    //Wait(10000); //Indy FoA credits
     
    gLocation.Visible = false;
    
    EndCutscene();
    
    //Stop the sounds. Let the music continue
    if (channelSounds !=null) {
        channelSounds.TweenVolume(1.0, 0, eEaseOutTween, eNoBlockTween);
    }
    
    cutsceneToStart = eCutscene_Logo;  
    Wait(1);
}

bool alreadyVisited;


//Open the door when the puzzle is succeeded
void puzzleSucceed()
{
    
    StartCutscene(eSkipESCOrRightButton);
        cNarr.ChangeRoom(player.Room, 284, 19);
        cNarr.Say("*CLICK*");
        AudioChannel* channel = aTinted_glass_open_music.Play ();
        oBoxDoor.Graphic = graphicDoorOpenWithBox;
        //player.FaceLocation(288, 78);
    EndCutscene();
    
    player.Say("Enter the elusive reliquary.");
    mouse.Mode = eModeWalkto;
    
    CustomSave.Autosave();
    
}

function room_AfterFadeIn()
{
    fadeInFinished = true;

    if (CataPuzzle.IsPuzzleSuceeded() && !puzzleAlreadySucceeded && DialogsLogic.GetVarBool("hasPushedCatacombsButton")) {
        
        puzzleSucceed();
        puzzleAlreadySucceeded = true;
    }
    
    DialogsLogic.SetVarBool("hasPushedCatacombsButton", false);
}



function room_FirstLoad()
{
      PlayerUI.DisableAndHide(); 
      FloatingHotspot.Disable();
      mouse.Visible = false;
      Wait(1);
}


function room_Load()
{
    mouse.Visible = false;
    /*
    if (player.PreviousRoom != eRoom_110_Journal) {
        music
    }
    */
    if (doorSprite == 0 && oDoor.Graphic != 0) {
        doorSprite = oDoor.Graphic;
    }
    
    //close the door
    oDoor.Graphic = 0;
    RemoveWalkableArea(3); //remove walkable area inside the monk's secret door 
    
    
    
    if (!alreadyVisited) {
      cutsceneToStart = eCutscene_None;
        oBoxDoor.Graphic = graphicDoorClosed;
        
      //CataPuzzle.Init(oSkull1,  oSkull11);  
        
      //everything below = first time in the room.
      //by default we'll play the "Indy jump" cutscene, unless a checkpoint changes that
      cutsceneToStart = eCutscene_Jump;
      
      AudioChannel* amb = aCave_ambiant.Play(eAudioPriorityNormal, eRepeat);
      if (amb)
        amb.Volume = 50;
        
      player.Transparency = 100; Wait(1);
      
      scanSkulls();
      
      setIndyChar();
      placeChar();
      
      #ifdef TESTING
      if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button
         
            CheckPoints.JumpDone(); //never forget to tell the engine we're done jumping. we do it immediately in case a cutscene would contain a 'ChangeRoom', thus calling 'isJumping' again
            checkpoint = CheckPoints.RequestedCheckpoint();
            
            if (CheckPoints.RequestedCheckpoint() == eChckpnt_101_catacombs) {
                player.x = 223;
                player.y = 129;
                cutsceneToStart = eCutscene_ReadyToPlay;
                player.Transparency = 0; Wait(1);
                FloatingHotspot.Enable();
                mouse.Visible = true;
                mouse.Mode = eModeWalkto;
            } else if (CheckPoints.RequestedCheckpoint() == eChckpnt_101_catacombs_withcutscene) {
                player.x = 223;
                player.y = 129;
                

            } else if (CheckPoints.RequestedCheckpoint() == eChckpnt_101_catacombs_MonkCutscene) {
                player.x = 244;
                player.y = 134;
                player.FaceDirection(eDirectionLeft);
                cutsceneToStart =eCutscene_Monk;
                player.Transparency = 0; Wait(1);
                
                FloatingHotspot.Enable();
                mouse.Visible = true;
                mouse.Mode = eModeWalkto;
            } else {
                //Display("Unknown checkpoint: %d", CheckPoints.RequestedCheckpoint() );
            }
      } else {
        //nothing to do
      }
      #endif
      

      /*
      //if we arrive from the board close-up, the player might be cIndy_closeup_suit
      if (player == cIndy_closeup_suit)
      {
        player.SetAsPlayer();
        cIndy_closeup_suit.Transparency=100; Wait(1);
        cIndy_closeup_suit.ChangeRoom(17);
        Wait(1);
      }
      */
      //player.Transparency = 0;
      player.PlaceOnWalkableArea();//safety
      

      //FloatingHotspot.Enable();
      FloatingHotspot.SetColor(Game.GetColorFromRGB(255, 255, 255));
      //mouse.Visible = true;
      //player.ChangeView(84);
      //Display("changed view");

      alreadyVisited = true;
      
      
    } else {
  
        //Everything below = not the first visit in the room
        cutsceneToStart = eCutscene_ReadyToPlay;
        
        setIndyChar();
        placeChar();
        
        player.Transparency = 0;
        
        if (player.PreviousRoom == eRoom_110_Journal) {
            Journal.AfterClose();
        }
        
        cIndy2.ChangeRoom(eRoom_108_DumpRoom, 160, 100); //Safety/dirty patch : this character was sometimes in this room for an unknown reason.
    }
    
    
}

function room_RepExec()
{
    
    
    if (waitNoBlockCounter > -1)
      waitNoBlockCounter--;
      
    if (journalPermanentlyHidden)
        hideJournalPermanently();
        
    //DIRTY HACK
    //Since hotspots descriptions can't be changed through code and since hotspots can't overlap, 
    //we manually change the description here depending on the puzzle's progress
    if (oBoxDoor.Graphic != graphicDoorOpenWithBox) {
        //FloatingHotspot.FixText("Tinted glass", "Tinted glass"); //DO NOTHIG
    } else {
        FloatingHotspot.FixText(GetTranslation("Tinted glass"), GetTranslation("Reliquary"), hBox.ID);
    }
    //END OF DIRTY HACK
    
    
    //This code to manage interactions when "floating hotspot" is enabled 
    //(floating hotspot only does the floating hotspot on screen, not the interactions when player clicks)
    Hotspot* hat = Hotspot.GetAtScreenXY(mouse.x,  mouse.y);
    if ((!FloatingHotspot.IsEnabled()) || (hat == hotspot[0])) // user interface is disabled, a blocking event is running, OR mouse not over hotspot
    {
        mouse.UseDefaultGraphic();
        //mouse.Mode = eModeWalkto;
    }
    else if (hat != hotspot[0])
    {
        mouse.SaveCursorUntilItLeaves(); // this is used if you're actually changing the mouse.Mode, not just the graphic
        //mouse.UseModeGraphic(eModeInteract);
        mouse.Mode = eModeInteract;
    }  
    

    if (fadeInFinished) {
    
    
        //run required cutscenes
            
        if (cutsceneToStart == eCutscene_ReadyToPlay && (!gJournalDemo.Visible || gJournalDemo.Transparency == 100)) {

              cutsceneToStart = eCutscene_None;
              //progressively show the journal button
              showJournal();
              FloatingHotspot.Enable();
              mouse.Visible = true;
              mouse.Mode = eModeWalkto;
        }   
        else if (cutsceneToStart==eCutscene_Jump) {
            cutsceneToStart = eCutscene_None;
            playJumpCutscene(); 
        }
        else if (cutsceneToStart==eCutscene_Monk) {
            cutsceneToStart = eCutscene_None;
            playMonkCutscene(); 
        }
        else if (cutsceneToStart==eCutscene_GetUp) {
            if (!IntroCredits_IsCreditsRunning()) {
              //We were inbetween playCreditsCutscene and playGetUpCutscene
              cutsceneToStart = eCutscene_None;
              playGetUpCutscene();
            }
        }
        else if (cutsceneToStart==eCutscene_Logo) {
            cutsceneToStart = eCutscene_None;
            playLogoCutscene();
        }
        else if (cutsceneToStart==eCutscene_Credits && waitNoBlockCounter == 0) {
            cutsceneToStart = eCutscene_None;
            playCreditsCutscene();
        }
        else if(DialogsLogic.GetVarBool("monkDialogFinished")) { //monkDialogFinished must be set at the end of the dialog
            DialogsLogic.SetVarBool("monkDialogFinished", false); //to avoid starting it repeatedly
            playAFTERMonkCutscene();
        }
        
        /*
        if (IsKeyPressed(eKeyEscape) && ) {
            cutsceneToStart = 
        }
        */
    }
}

bool IsClickingStuffAllowed()
{
    return (cutsceneToStart == eCutscene_ReadyToPlay || cutsceneToStart == eCutscene_None) 
    && !Game.InSkippableCutscene
    && !IntroCredits_IsLogoRunning();    

}

#define ASSERT_CAN_CLICK_STUFF if(!IsClickingStuffAllowed()) return;

function hPileOfBones_AnyClick()
{
    ASSERT_CAN_CLICK_STUFF
    
    mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
    //if (mouse.Mode == eModeInteract) {
        player.Walk(150, 138, eBlock);
        player.FaceDirection(eDirectionUp, eBlock);
        player.Say("That's an impressive pile of bones.");
        
    //}
}

void tintedGlassClick()
{
    ASSERT_CAN_CLICK_STUFF
    
    if (oBoxDoor.Graphic != graphicDoorOpenWithBox) {
        mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
        player.Walk(265, 108, eBlock);
        player.FaceDirection(eDirectionRight, eBlock);
        if(firstTimeClick_TintedGlass) {
            player.Say("A tinted glass? Underground?");
            firstTimeClick_TintedGlass = false;
        }
        player.ChangeRoom(eRoom_101b_TintedGlass, 0, 0);
    } else {
        mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
        player.Say("It's open now.");
    }
}

function hTintedGlass_AnyClick()
{
    ASSERT_CAN_CLICK_STUFF
    
    tintedGlassClick();
}

function hPassageway_AnyClick()
{
    ASSERT_CAN_CLICK_STUFF
    
    mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
    player.FaceLocation(31, 95, eBlock);
    player.Say("That was too close for my comfort.");
    player.Say("I'm not going back there before I find the relic.");
}


void toggleSkull(int sk){
    ASSERT_CAN_CLICK_STUFF
    
    mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
    int loopLeft = 1;
    int loopRight = 2;
    
    eSkullsSide side = CataPuzzle.GetSkullSide(sk);
    if (side==eSkullsLeft) {
        player.Walk(88, 110, eBlock);
        player.LockView(INDYCLOTH_TOUCH);
        player.Animate(loopLeft, 2, eOnce, eBlock);
        
    } else if (side==eSkullsMiddle && sk < 6) {
        player.Walk(148, 126, eBlock);
        player.LockView(INDYCLOTH_TOUCH);
        player.Animate(loopLeft, 2, eOnce, eBlock);
        
    } else if (side==eSkullsMiddle && sk >= 6) {
        player.Walk(155, 126, eBlock);
        player.LockView(INDYCLOTH_TOUCH);
        player.Animate(loopRight, 2, eOnce, eBlock);
        
    } else if (side==eSkullsRight) {
        player.Walk(233, 106, eBlock);
        player.LockView(INDYCLOTH_TOUCH);
        player.Animate(loopRight, 2, eOnce, eBlock);
        
    } else {
        Display("ERROR");
    }
    //int sk = 2; //the number of this skull
    CataPuzzle.ToggleSkull(sk);
    AudioChannel* channel = aSkull.Play();
    
    player.UnlockView();
    Wait(1);
    mouse.Mode = eModeWalkto;
}

//LEFT, bottom
function hSkull1_AnyClick(){ toggleSkull(0);}
//LEFT, medium
function hSkull2_AnyClick(){ toggleSkull(1);}
//LEFT, top
function hSkull3_AnyClick(){ toggleSkull(2);}


//MIDDLE
function hSkull4_AnyClick(){ toggleSkull(3);}
function hSkull5_AnyClick(){ toggleSkull(4);}
function hSkull6_AnyClick(){ toggleSkull(5);}
function hSkull7_AnyClick(){ toggleSkull(6);}
function hSkull8_AnyClick(){ toggleSkull(7);}
function hSkull9_AnyClick(){ toggleSkull(8);}

//RIGHT, bottom
function hSkull10_AnyClick(){ toggleSkull(9);}
//RIGHT, top
function hSkull11_AnyClick(){ toggleSkull(10);}

void cutsceneTakeBox()
{
    StartCutscene(eSkipESCOrRightButton);
        FloatingHotspot.Disable();
        player.Say("Let's snatch this thing before I get into any more trouble.");
        player.Walk(278, 116, eBlock);
        player.FaceDirection(eDirectionRight);
        player.LockView(INDYCLOTH_TOUCH);
        int loopRight = 2;
        player.Animate(loopRight, 2, eOnce, eBlock);
        player.UnlockView();
        Wait(1);
        oBoxDoor.Graphic = graphicDoorOpenWithoutBox;
        player.AddInventory(iRelic);
        
        player.Walk(244, 134, eBlock);
    EndCutscene();
    
    player.Say("Reliquaries usually contain bogus body parts.");
    player.Say("I wonder what this one actually contains?");
    
    cutsceneToStart = eCutscene_Monk;
}
//this hotspot is merged wit the "tinted glass" puzzle until the door opens
function hBox_AnyClick()
{
    ASSERT_CAN_CLICK_STUFF
    
    mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
    if (oBoxDoor.Graphic == graphicDoorOpenWithBox) {
        cutsceneTakeBox();

    } else {
        tintedGlassClick();
    }
}


void emptyInventory()
{
    for (int i = 0; i < Game.InventoryItemCount; i++)
        //player.InventoryQuantity[i] = 0;
        if (player.HasInventory(inventory[i]))
            player.LoseInventory(inventory[i]);
    
    player.AddInventory(iLighter);
    // DO NOT CALL (it makes the inventory flash briefly)
    //UpdateInventory();
}


function room_Leave()
{
    emptyInventory();
    
    //Dirty hack. Because of the "gMain.Transparency = 100" in dMonkFinal2
    gMain.Transparency = 0;
}

function hTimbers_AnyClick()
{
    ASSERT_CAN_CLICK_STUFF
 
    mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
    
   //if (mouse.Mode == eModeInteract) {    
    player.FaceLocation (197, 85, eBlock);
    player.Say ("Those look pretty steady.");
    player.Say ("I don't think they're hiding anything.");
   //}
}       

function hRandomSkulls_AnyClick()
{
    ASSERT_CAN_CLICK_STUFF
    
    mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
    player.FaceDirection(eDirectionDown);
    player.Say ("I hope that mine won't end up there.");

}


function hStalls_AnyClick()
{
    ASSERT_CAN_CLICK_STUFF

    mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
    if (mouse.x < 150) {
        player.Walk(100, 90, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionLeft);
    } else {
        player.Walk(200, 90, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionRight);
    }
    player.Say ("I don't see anything special there.");

}

//Heart
function hCarving2_AnyClick()
{
    ASSERT_CAN_CLICK_STUFF
    
    mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
    player.Walk(152, 130, eBlock);
    player.Say("I don't think it can be pushed or moved.");
    player.Say("It's just painted on.");
}

//Soul
function hCarving1_AnyClick()
{
    ASSERT_CAN_CLICK_STUFF
    
    mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
    player.Walk(72, 120, eBlock);
    player.Say("I've seen this symbol before.");
    player.FaceDirection(eDirectionDown);
    Wait(90);
    player.Say("But where?");
}

//Letter
function hCarving3_AnyClick()
{
    ASSERT_CAN_CLICK_STUFF
    
    mouse.Mode = eModeWalkto; //Dirty fix to bug "Indy gets stuck after interacting"
    
    player.Walk(247, 110, eBlock);
    player.Say("I don't think it can be pushed or moved.");
    player.Say("It's just painted on.");
}


