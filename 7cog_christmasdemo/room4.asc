enum knobSprites {
  eKnob_off = 780, 
  eKnob_on = 781
};

//Checks that the current character is Indy in Indyclothes
void setIndyChar()
{
    Character* currentChar = player;
    if (currentChar.ID != cIndyClothes.ID) {
        cIndyClothes.ChangeRoom(eRoom_101_Catacombs,  240,133);
        cIndyClothes.SetAsPlayer();
        currentChar.ChangeRoom(eRoom_108_DumpRoom, 160, 100); //remove former character from this room
    }
}


//puts the character in the right place in the room
void placeChar()
{
    player.x = 160; player.y = 180;
    player.Transparency = 100; //make the player invisible.
}

function hExit_AnyClick()
{
   // Journal.Close();
   player.ChangeRoom (eRoom_101_Catacombs);
}


function room_FirstLoad()
{
  setIndyChar();
  placeChar();
  
  if (eKnob_off != oKnob.Graphic) {
      AbortGame("Did something change?");
  }
  
  #ifdef TESTING
  if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button
     
    CheckPoints.JumpDone(); //never forget to tell the engine we're done jumping. we do it immediately in case a cutscene would contain a 'ChangeRoom', thus calling 'isJumping' again
    
    if (CheckPoints.RequestedCheckpoint() == eChckpnt_101b_tintedGlass) {
      player.x = 223;
      player.y = 129;

    }
  } else {
    //nothing to do
  }
  #endif
  

  /*
  //if we arrive from the board close-up, the player might be cIndy_closeup_suit
  if (player == cIndy_closeup_suit)
  {
    player.SetAsPlayer();
    cIndy_closeup_suit.Transparency=100; Wait(1);
    cIndy_closeup_suit.ChangeRoom(17);
    Wait(1);
  }
  */

  player.PlaceOnWalkableArea();//safety
  
  PlayerUI.DisableAndHide(); 
  FloatingHotspot.Enable();
  FloatingHotspot.SetColor(Game.GetColorFromRGB(255, 255, 255));
  mouse.Visible = true;
  mouse.Mode = eModeWalkto;
  //player.ChangeView(84);
  //Display("changed view");

  
}


function room_AfterFadeIn()
{

}

function room_Load()
{
    setIndyChar();
    placeChar();
    
    gJournalDemo.Visible = false;
}

function room_RepExec()
{
    //This codee to manage interactions when "floating hotspot" is enabled 
    //(floating hotspot only does the floating hotspot on screen, not the interactions when player clicks)
    Hotspot* hat = Hotspot.GetAtScreenXY(mouse.x,  mouse.y);
    if ((!IsInterfaceEnabled()) || (hat == hotspot[0])) // user interface is disabled, a blocking event is running, OR mouse not over hotspot
    {
        mouse.UseDefaultGraphic();
        //mouse.Mode = eModeWalkto;
    }
    else if (hat != hotspot[0])
    {
        mouse.SaveCursorUntilItLeaves(); // this is used if you're actually changing the mouse.Mode, not just the graphic
        //mouse.UseModeGraphic(eModeInteract);
        mouse.Mode = eModeInteract;
    }
    
    //Remove the extra data from the Description: "VER:1.1DATA:stone protrusion" --> "stone protrusion" 
    String desc = GetTranslation(hKnob.Name); //In AGS, the hotspot's Name is actually the Description

    //DIRTY HACK
    //Since hotspots descriptions can't be changed through code
    //we manually change the description here

        FloatingHotspot.FixText(desc, SmartString(desc), hKnob.ID);

    //END OF DIRTY HACK

}



function room_Leave()
{
    //make the player visible again
    player.Transparency = 0;
}



function hGlass1_AnyClick()
{
    player.Say("This is a thingie");
}

function hHead_AnyClick()
{
    player.Say("His name is written around his head.");
    if (CataPuzzle.IsInitialized()) {
        player.Say(String.Format("It appears to be %s.",CataPuzzle.GetSaintName()));
        player.Say("He's the one whose words I should follow.");
    } else {
        player.Say("DEBUG: you need to visit the catacombs room at least once.");
    }
}

function hScroll_AnyClick()
{
    player.Say("The scroll says:");
    player.Say("%s", CataPuzzle.GetSaintClue());
}

function hKnob_AnyClick()
{
  oKnob.Graphic = eKnob_on;
  Wait(1);
  aCatacombs_knob.Play();
  
  if (CataPuzzle.IsPuzzleSuceeded()) {
      DialogsLogic.SetVarBool("hasPushedCatacombsButton", true);
      player.ChangeRoom(eRoom_101_Catacombs);
  } else {
    Wait(3*GetGameSpeed());
    player.Say(SmartString("VER:1.1DATA:Nothing happens."));
    oKnob.Graphic = eKnob_off;
    
  }
}
