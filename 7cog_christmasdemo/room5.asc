// room script file

AudioChannel* channelWind;

bool fadeInFinished = false;

int HARBOUR_WALKABLE_AREA = 4;

//Available cutscenes to play
enum Cutscenes {
    eCutNone = 0, 
    eCutLetPlayerPlay = 1, 
    eCutShipArrival_part1 = 2, 
    eCutShipArrival_part2 = 3, 
};

enum IceCrackSprites {
    eIceCrack_NoCrack = 0, 
    eIceCrack_CrackVisible = 495, 
    eIceCrack_CrackFullyOpen = 496, 
};

enum FurnaceDoorSprites {
    eFurnaceClosed = 194, 
    eFurnaceHalfOpen = 195, 
    eFurnaceNoDoor = 200
};

enum FurnaceDoorStates {
  eFurnaceDoorState_Closed = 0, 
  eFurnaceDoorState_HalfOpen = 1, 
  eFurnaceDoorState_Fallen = 2
  
};


// Let some non-blocking time elapse while ship (and potentially truck) do their thing
int creditsFrameCount = -1;
Cutscenes cutsceneToPlay = eCutShipArrival_part1;


void PlayCutscene_ShipArrival_Part1()
{
    cutsceneToPlay = eCutNone;
    
     
    //Start the second batch of credit names (first one was in the catacombs) and let it roll automatically
    IntroCredits_StartNextCredit();
    
    
    FloatingHotspot.Disable(); 
    PlayerUI.DisableAndHide();
    mouse.Visible = false;
    Wait(1);
    
    StartCutscene(eSkipESCOrRightButton);
    
    float time = 5.0;
    oMovingShip.SetView(MOVINGSHIP);
    oMovingShip.Animate(0, 10, eRepeat, eNoBlock);
    oMovingShip.TweenPosition(time,  oMovingShip.X + 40,  oMovingShip.Y+10, eLinearTween, eNoBlockTween);
    //Wait(FloatToInt(IntToFloat(GetGameSpeed())*time)); //Wait 'time' seconds
    
    creditsFrameCount = FloatToInt(IntToFloat(GetGameSpeed())*(time+5.0)); //Non-blocking Wait 'time' seconds
    
}

void PlayCutscene_ShipArrival_Part2()
{
    ProgressMetrics.ReportProgress(eProgressNorway);

    oMovingShip.Visible = false;
    EndCutscene();
    player.x = 357; player.y = 129;Wait(1);
    Wait(60);
    player.Say("I hope the trip was worth it.");
    
    PlayerUI.EnableAndShow();
    gAction2.Visible = true;
    
    mouse.Visible = true;
    
    cutsceneToPlay = eCutNone;
    
}

void emptyInventory()
{
    for (int i = 0; i < Game.InventoryItemCount; i++)
    if (player.HasInventory(inventory[i]))
        //player.InventoryQuantity[i] = 0;
        player.LoseInventory(inventory[i]);
    UpdateInventory();
}

function room_FirstLoad()
{

    player.AddInventory(iLighter);
    RemoveWalkableArea (3);
    RemoveWalkableArea (6);
    
    
}

function region1_Standing()
{
    player.ChangeRoom(eRoom_103_NorwayInside, 0, 0);
}

void InitSteam() 
{
    //We show some steam above the crack only if the crack is there.
    oSteamCrack.SetView(STEAM);
    oSteamCrack.Animate(0, 10, eRepeat, eNoBlock);
    if (oIceCrack.Visible && oIceCrack.Graphic == eIceCrack_CrackVisible) {
        oSteamCrack.Visible = true;  
    } else {
        oSteamCrack.Visible = false;
    }
    
    //We show some steam above the pipe only if one of the final pipes is powered
    oSteamPipe.SetView(STEAM);
    oSteamPipe.Animate(0, 10, eRepeat, eNoBlock);
    
    bool hasSteam = DialogsLogic.GetVarBool("hasVisitedIceCave")
        && (
            SteamPuzzle.HasPower("steam11") || SteamPuzzle.HasPower("steam10")
            || SteamPuzzle.HasPower("steam09") || SteamPuzzle.HasPower("steam08")
            || SteamPuzzle.HasPower("steam07")
        );
    if (hasSteam) {
        oSteamPipe.Visible = true;  
    } else {
        oSteamPipe.Visible = false;
    }
    
}

bool alreadyVisited = false;
function room_Load()
{   
    //channelWind = aSnow_tempest.Play(eAudioPriorityNormal, eRepeat); //Rather annoying for the player
    
    //This is a quick hack to fix the fact that sometimes the half-transparent vehicles from the Map module don't fully disappear
    gVehicle1.Visible = false;
    gVehicle2.Visible = false;
    
    player.ChangeView (INDYCLOTH_WALK_NOSOUND);

    InitSteam();
    
    if (!alreadyVisited) {
        oIceCrack.Graphic = eIceCrack_NoCrack;


        #ifdef TESTING
        if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button

            CheckPoints.JumpDone(); //never forget to tell the engine we're done jumping. we do it immediately in case a cutscene would contain a 'ChangeRoom', thus calling 'isJumping' again

            emptyInventory();
                
            if (CheckPoints.RequestedCheckpoint() == eChckpnt_113_NorwayOven) {
                player.x = 664;
                player.y = 151;

                player.AddInventory(iShovel);
                player.AddInventory(iEmptyBucket);
                player.AddInventory(iOilLamp);
                cutsceneToPlay = eCutLetPlayerPlay;
                alreadyVisited = true;
                
                hBurntStructure.Enabled = true;

            }
        } else {
            //nothing to do
        }
        #endif
    } 
          
    creditsFrameCount = -1;
  
    //In case the player arrives from the "Europe map" room, where he's set to transparent
    if (player.Transparency > 95)
        player.Transparency = 0;
    
    
        
    //coming from inside the church
    if (player.PreviousRoom == eRoom_103_NorwayInside) {
        player.x = 277; player.y = 134;
        
    } 
    //coming from the ice cave
    else if (player.PreviousRoom == eRoom_104_NorwayIceCave) {
        DialogsLogic.SetVarInt("eDialog_IceCrackOpened", 1);
        player.UnlockView();
         player.x = 688; player.y = 134;   
    }
         
    //Coming from Hatch Close Up
    else if (player.PreviousRoom == 14) {
        player.x = 695; player.y = 124;
        player.FaceDirection (eDirectionUp);

        //Cancel the weird UI of the hatch close-up : 
        player.Transparency = 0;
        PlayerUI.EnableAndShow(); 
        FloatingHotspot.Disable();
        mouse.Visible = true;
        mouse.Mode = eModeWalkto;
        
        cutsceneToPlay = eCutLetPlayerPlay;
  
    } else if (!alreadyVisited) {
        //default; We will play the "arrival" custscene
        player.x = 0; player.y =0; //hide the plyer off-screen
        oMovingShip.Visible = true;
        oMovingShip.X = 170; oMovingShip.Y = 133;
        cutsceneToPlay = eCutShipArrival_part1; //this will be picked up after fade-in
        
        PlayerUI.DisableAndHide();
        Mouse.Visible = false;
        Wait(1);
    }
    
    //Sync the ice crack graphic in case we took some shortcut
    if (DialogsLogic.GetVarInt("eDialog_IceCrackOpened")==1) {
      oIceCrack.Visible = true;
      oIceCrack.Graphic = eIceCrack_CrackFullyOpen;
    }
    
    //fix for smooth scrolling
    SmoothScroll_ScrollingOff(); //Re-activated after fade-in
    SetViewport(player.x - System.ViewportWidth/2,  0);
    Wait(1);

    
    htoValley2.Enabled = false;
    hship.Enabled = false ;
    hSea.Enabled = false;
    hBurntStructure.Enabled = false;
    hWarehouse.Enabled = false;
    
    cMarcus.Transparency = 100;
    cMarcus.Clickable = false ;
    cMarcus.ManualScaling = true;
    cMarcus.Scaling = 20 ;
    

    alreadyVisited = true;
}

function region2_Standing()
{
    //cutscene: walk from valley to mountain.
    
    player.StopMoving();
    StartCutscene(eSkipESCOrRightButton);
    //disable all regions to avoid triggering their events while we walk on them in the cutscenes
    region[2].Enabled = false;
    region[3].Enabled = false;
    
    hBurntStructure.Enabled = true ;
    player.Walk(465, 115, eBlock);
    Wait(1);
    int pivotY = 109; //the y where Indy will flip from background to foreground
    player.x = 663; player.y = pivotY+43;Wait(1);
    
    player.z = -player.y; player.y = 0; Wait(1);//To force Indy appearing behind the hill, we artifically make his y =0 and we use z instead.
    Wait(1);
    
    int savedView = player.View; //Save to set back later
    player.FaceDirection(eDirectionDown); //For smooth transition to the Reverted view
    Wait(1);
    player.ChangeView(INDYCLOTH_WALK_REVERTED); //The downhill illusion requires Indy to turn his back while walking "down"
    player.FaceDirection(eDirectionUp); //For smooth transition to the Reverted view
    Wait(1);
    
    player.Walk(678,  -43, eBlock, eAnywhere); //walk upwards behind hill
    player.y = pivotY; player.z = 0; Wait(1); //flip back to normal
    player.ChangeView(savedView);

    EndCutscene();
    
    player.Walk(678,  116, eBlock, eAnywhere); //finish walking downhill
    
    //re-enable regions
    region[2].Enabled = true;
    region[3].Enabled = true;
    
    player.SetWalkSpeed(6, player.WalkSpeedY);

}

function hToMountain_AnyClick()
{
    if (Verbs.UsedAction(eGA_WalkTo)) {
        player.Walk(410, 120, eNoBlock);
    }
}

function htoValley_AnyClick()
{
    eObjectType objType=eHeavy;

    if (Verbs.UsedAction(eGA_WalkTo)) {
        player.Walk(675, 106, eNoBlock);
    }
}

function hChurchEntrance_AnyClick()
{
  bool isInHarbour = !region[4].Enabled;

  if (isInHarbour && Verbs.UsedAction(eGA_WalkTo)) {
    player.Walk(162,  123);
  } else {
    if (Verbs.MovePlayer(271, 129)) { //Use Tumbleweed's "delayed action" system.
      player.FaceDirection(eDirectionLeft, eBlock);
      if (Verbs.UsedAction(eGA_WalkTo)) {
        //Do nothing
      } else if (Verbs.UsedAction(eGA_LookAt)) {
          player.Say("The door is unlocked.");
      } else {
          player.Say("That makes no sense.");
      }
    }
  }
}



function oFurnace1_AnyClick()
{
  int x = 616;
  int y = 96;

  int walk_x = 627;
  int walk_y = 104;

  eObjectType objType=eHeavy;

  int loopLeft = 1;
  if (Verbs.MovePlayer(walk_x, walk_y)) { //Use Tumbleweed's "delayed action" system.

    if (Verbs.UsedAction(eGA_7CoG_LookAt)) {
      player.FaceAndSay2 (x,y,"A large pile of half-frozen snow has cluttered the old iron door.");
    } else if (Verbs.UsedAction(eGA_PickUp)) {
      player.FaceAndSay2 (x, y, "No, there is no time for snowballing.");
    } else if (Verbs.UsedAction(eGA_UseInv)) {
        if (player.ActiveInventory == iShovel) {
            StartCutscene (eSkipESCOrRightButton);
            player.Walk (walk_x, walk_y, eBlock, eWalkableAreas);
            player.FaceAndSay2 (x, y, "Usually I pay some kids to shovel the snow off my sidewalk.");
            player.LockView(INDY_SHOVELSNOW);
            player.Animate (loopLeft, 5, eRepeat, eNoBlock);
            Wait(80);
            oFurnace1.Visible=false;
            oFurnace2.Visible=true;
            player.UnlockView();
            player.Walk (627, 80, eBlock, eWalkableAreas);
            player.LockView(INDY_SHOVELSNOW);
            player.Animate (loopLeft, 5, eRepeat, eNoBlock);
            Wait(80);
            oFurnace2.Visible=false;
            oFurnace3.Visible=true;
            player.UnlockView();
            oFurnace3.Baseline = 87;
            oDoor.Visible=true;
            oDoor.Baseline = 88;
            RestoreWalkableArea (3);
            EndCutscene();
            player.FaceAndSay2 (x, y, "Phew!");
        } else if (player.ActiveInventory == iEmptyBucket) {
            player.Walk (walk_x, walk_y, eBlock, eWalkableAreas);
            player.FaceDirection(eDirectionUp, eBlock);
            player.Say("I can get snow anywhere, but I don't think I need fresh water."); //TODO: Better explanation
        } else if (player.ActiveInventory == iFullBucket) {
            player.Walk (walk_x, walk_y, eBlock, eWalkableAreas);
            player.FaceDirection(eDirectionUp, eBlock);
            player.Say("Can you imagine how much salt water I'd need to melt that much snow?");
        } else if (player.ActiveInventory == iPaddlingOar) {
            player.Walk (walk_x, walk_y, eBlock, eWalkableAreas);
            player.FaceDirection(eDirectionUp, eBlock);
            player.Say("That wouldn't work: The snow is slightly frozen and the oar is far from sharp.");
        } else if (player.ActiveInventory == iShovelHead) {
            player.Walk (walk_x, walk_y, eBlock, eWalkableAreas);
            player.FaceDirection(eDirectionUp, eBlock);
            player.Say(SmartString("VER:1.1DATA:I can't do much with only the head."));
        }   else {
            Verbs.Unhandled(objType);
        }
    } else {
        Unhandled_FaceLocation(x, y, objType);
    }
  }
}







function room_AfterFadeIn()
{

    fadeInFinished = true;

    SmoothScroll_ScrollingOn();
}

void game_start() {
    cutsceneToPlay = eCutNone;
    oMovingShip.Visible = false;
}

// Detect if the music is playing or if the travel music is still playing
void ManageMusic() { 
    AudioChannel* travelMusicChannel = null;
    AudioChannel* norwayMusicChannel = null;
    
    //Find  the desiredchannels
    for (int i=0; i< System.AudioChannelCount; i++) {
       AudioChannel* c = System.AudioChannels[i]; 
       if (c.PlayingClip == aChristmas_Salmon_v3_2_2_2) {
        norwayMusicChannel = System.AudioChannels[i];
       } else if (c.PlayingClip == aEuropemap00) {
        travelMusicChannel = c;
       }
    }
    
    //None were found
    if(norwayMusicChannel == null && travelMusicChannel == null) {
        aChristmas_Salmon_v3_2_2_2.Play(eAudioPriorityNormal, eRepeat);
    }
}


function room_RepExec()
{
  if (fadeInFinished) {
    
    if (creditsFrameCount > 0) {
      creditsFrameCount--;
    } else if (creditsFrameCount == 0) {
      cutsceneToPlay = eCutShipArrival_part2;
      creditsFrameCount = -1;
    }

    switch (cutsceneToPlay) {
        case eCutNone : 
            break;
        case eCutLetPlayerPlay : 
            //do nothing but make sure the interface is available
            PlayerUI.EnableAndShow();
            mouse.Visible = true;
            cutsceneToPlay = eCutNone;
            break;
        case eCutShipArrival_part1 : 
            PlayCutscene_ShipArrival_Part1();
            break;
        case eCutShipArrival_part2 : 
            PlayCutscene_ShipArrival_Part2();
            break;
            
    }
    
    ManageMusic();
        
  }
}


void TouchFurnaceDoor()
{
  int walk_x = 617;
  int walk_y = 113;
    
  if (Verbs.MovePlayer(walk_x, walk_y)) { //Use Tumbleweed's "delayed action" system.
    player.FaceDirection(eDirectionLeft);
    player.LockView(INDYCLOTH_TOUCH);
    int loopLeft = 1; int loopRight = 2;
    player.Animate(loopLeft, 2, eOnce, eBlock);
    player.UnlockView();
  }
}


function oDoor_AnyClick()
{
  int x = 600;
  int y = 77;
  
  int walk_x = 617;
  int walk_y = 113;
  
  int loopLeft = 1;
  
  eObjectType objType = eHeavy;
  
  if (Verbs.MovePlayer(walk_x, walk_y)) { //Use Tumbleweed's "delayed action" system.

    // LOOK AT
    if (Verbs.UsedAction(eGA_LookAt)) {
        player.Walk(walk_x, walk_y, eBlock, eWalkableAreas);
        
        // State 0 or 1  (closed or half open)
        if (DialogsLogic.GetVarInt("eDialog_DoorState") == eFurnaceDoorState_Closed 
        || DialogsLogic.GetVarInt("eDialog_DoorState") == eFurnaceDoorState_HalfOpen) {
            player.FaceAndSay2(x, y, "It seems to have some ornament on the inside. Strange!");
            player.FaceAndSay2(x, y, "The angle's not right, I don't see anything. I'd need to open it.");
            
        // State 2 : STILL IN USE???
        } /* else if (DialogsLogic.GetVarInt("eDialog_DoorState") == eFurnaceDoorState_Fallen) {
            player.FaceAndSay2(x, y, "Let's have a look at this furnace door.");
            player.ChangeRoom(14, 50, 50, eDirectionDown);
        } */

    // INVENTORY
    } else if (Verbs.UsedAction(eGA_UseInv)) {
        if (player.ActiveInventory == iOilLamp || player.ActiveInventory == iOilLampLit) {
            TouchFurnaceDoor();
            player.Say("There. It's still awfully rusty but at least it's not welded shut.");
            DialogsLogic.SetVarBool ("eDialog_hasDoorBeenOiled",true);
        } else if (player.ActiveInventory == iPaddlingOar) {
            player.FaceLocation(x, y);
            player.Say("Hey, this oar is probably over a thousand years old. I won't use it as a lever!");
        } else if (player.ActiveInventory == iBroomStick) {
            player.FaceLocation(x, y);
            player.Say("It would surely break it.");
        } else {
            Verbs.Unhandled(objType);
        }
        
    // CLOSE, PUSH
    } else if (Verbs.UsedAction(eGA_Close) || (Verbs.UsedAction(eGA_Push))) {
        
        if (!DialogsLogic.GetVarBool("eDialog_hasDoorBeenOiled")) {
           TouchFurnaceDoor();
           player.Say("This door is completely gripped! It won't move at all.");
        } else {
            // State 0  (closed)
            if (DialogsLogic.GetVarInt("eDialog_DoorState") == eFurnaceDoorState_Closed) {
                // First or second push
                if (DialogsLogic.GetVarInt("eDialog_DoorCounter") == 0 || DialogsLogic.GetVarInt("eDialog_DoorCounter") == 1) {
                    player.Walk(walk_x, walk_y, eBlock, eWalkableAreas);
                    player.FaceAndSay2(x, y, "It's already closed.");
                }
                
            // State 1
            } else if (DialogsLogic.GetVarInt("eDialog_DoorState") == eFurnaceDoorState_HalfOpen) {
                
                //First push
                if (DialogsLogic.GetVarInt("eDialog_DoorCounter") == 0) {
                    TouchFurnaceDoor();
                    //aDoor_creak2.Play();
                    aMetal_door.Play();
                    oDoor.Graphic = eFurnaceClosed;
                    player.FaceAndSay2(x, y, "Hmmm, it's getting better. Let's do it again.");
                    DialogsLogic.SetVarInt("eDialog_DoorCounter", 1);
                    DialogsLogic.SetVarInt("eDialog_DoorState", eFurnaceDoorState_Closed);
                //Second push
                } else if (DialogsLogic.GetVarInt("eDialog_DoorCounter") == 1) {
                    player.Walk(walk_x, walk_y, eBlock, eWalkableAreas);
                    player.FaceAndSay2(x, y, "I think it's time for a final pull instead.");
                }
            }
        }
    // OPEN, PULL
    } else if (Verbs.UsedAction(eGA_Open) || (Verbs.UsedAction(eGA_Pull))) {
        if (!DialogsLogic.GetVarBool("eDialog_hasDoorBeenOiled")) {
           TouchFurnaceDoor();
           player.Say("This door is completely gripped! It won't move at all.");
        } else {        
            // State 0 (closed)
            if (DialogsLogic.GetVarInt("eDialog_DoorState") == eFurnaceDoorState_Closed) {
                
                //First pull
                if (DialogsLogic.GetVarInt("eDialog_DoorCounter") == 0) {
                    TouchFurnaceDoor();
                    //aDoor_creak1.Play();
                    //aDoor_creak2.Play();
                    aMetal_door.Play();
                    oDoor.Graphic = eFurnaceHalfOpen;

                    player.FaceAndSay2(x, y, "It's very rusty, it got stuck half-way. I might loosen it with some efforts.");
                    DialogsLogic.SetVarInt("eDialog_DoorState", eFurnaceDoorState_HalfOpen);
                    
                //Second pull
                } else if (DialogsLogic.GetVarInt("eDialog_DoorCounter") == 1) {
                    TouchFurnaceDoor();
                    aMetal_door.Play();
                    oDoor.Graphic = eFurnaceHalfOpen;
                    player.FaceAndSay2(x, y, "Almost there. One of the hinges is crumbling away though.");
                    DialogsLogic.SetVarInt("eDialog_DoorState", eFurnaceDoorState_HalfOpen);
                }
                
            // State 1 (half open)
            } else if (DialogsLogic.GetVarInt("eDialog_DoorState") == eFurnaceDoorState_HalfOpen) {
                
                //First pull
                if (DialogsLogic.GetVarInt("eDialog_DoorCounter") == 0) {
                    TouchFurnaceDoor();

                    player.FaceAndSay2(x, y, "It won't open further. I need to continue making it move in either direction.");
                    DialogsLogic.SetVarInt("eDialog_DoorState", eFurnaceDoorState_HalfOpen);
             
                //Second pull
                } else if (DialogsLogic.GetVarInt("eDialog_DoorCounter") == 1) {
                    player.FaceDirection(eDirectionUp);
                    player.Say("OK, one final push should do it!");
                    TouchFurnaceDoor();
                    aMetal_door.Play();
                    cNarr.ChangeRoom(player.Room, 600, 81);
                    cNarr.Say("*CLUNK!*");
                    //player.Say("I don't know my own strength!");
                    //player.LockView(INDYCLOTH_WALK_REVERTED);
                    //player.Walk(621, 94, eBlock, eWalkableAreas);
                    //player.UnlockView();
                    
                    DialogsLogic.SetVarInt("eDialog_DoorState", eFurnaceDoorState_Fallen);
                    //aDoor_creak1.Play();
                    oFurnace3.Graphic = eFurnaceNoDoor;
                    oDoor.Visible = false;
                    aIce_break.Play();
                    oFallenDoor.Visible = true;
                    Wait(1);
                    
                    //First half of the slide                    
                    oFallenDoor.TweenPosition(1.0,  626, 104, eEaseInTween, eBlockTween);
                    player.Walk(640, 104, eNoBlock, eWalkableAreas);
                    
                    //Second half of the slide
                    oFallenDoor.TweenPosition(2.0,  700, 118, eEaseOutTween, eBlockTween);
                    aIce_break.Play();
                    oIceCrack.Visible = true;
                    oIceCrack.Graphic = 495;
                    RestoreWalkableArea(6);
                    cNarr.x = 724; cNarr.y= 118;
                    aBroken_ice.Play();
                    cNarr.Say("*CRACK!*");
                    Wait(1);
                    oSteamCrack.Visible = true;
                    oSteamCrack.Transparency = 100;
                    Wait(1);
                    oSteamCrack.TweenTransparency(1.0,  0, eEaseOutTween, eNoBlockTween);
                    
                    oFallenDoor.TweenPosition(0.5,  oFallenDoor.X-5, oFallenDoor.Y-2, eEaseOutTween, eBlockTween);
                    player.Say("I'm just glad it didn't fall on my feet.");
                    DialogsLogic.SetVarInt("eDialog_DoorState", 2);
                    
                    CustomSave.Autosave();
                }
            } else {
                Verbs.Unhandled(objType);
            }
        }
    } else {
        Unhandled_FaceLocation(x, y, objType);
    }
  }
}

function oIceCrack_AnyClick()
{
  int x = 730;
  int y = 110;
  
  int walk_x = 695;
  int walk_y = 125;
  
  int loopRight = 2;
  eObjectType objType = eHeavy;
  
  if (Verbs.UsedAction(eGA_WalkTo)) {
    if  (DialogsLogic.GetVarInt ("eDialog_IceCrackOpened")==1) {
      player.Walk (715, 130, eBlock, eAnywhere);
    } else {
      player.Walk (707, 124, eBlock, eWalkableAreas);
    }
  } else if (Verbs.UsedAction(eGA_LookAt) || Verbs.UsedAction(eGA_Open) || Verbs.UsedAction(eGA_Push) || Verbs.UsedAction(eGA_Pull)) {
      if  (DialogsLogic.GetVarInt ("eDialog_IceCrackOpened")==0) {
        player.FaceAndSay2 (x,y,"I should try to get rid of that ice.");
      } else {
        player.FaceAndSay2 (x,y,SmartString("VER:1.1DATA:It's open. All I have to do is crawl into it."));
      }
  } else if (Verbs.UsedAction(eGA_UseInv)) {
    if (player.ActiveInventory == iShovel) {
      if  (DialogsLogic.GetVarInt ("eDialog_IceCrackOpened")==0) {
        player.Walk (walk_x, walk_y, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionRight);
        player.LockView(INDY_SHOVELSNOW);
        player.Animate (loopRight, 5, eRepeat, eNoBlock);
        Wait(80);
        player.UnlockView();
        oIceCrack.Graphic = eIceCrack_CrackFullyOpen ;
        region[6].Enabled = true ;
        DialogsLogic.SetVarInt ("eDialog_IceCrackOpened",1);
        oSteamCrack.Visible=false;
      } else {
        player.FaceAndSay2 (x,y,SmartString("VER:1.1DATA:What now? It took me a lot of efforts to reveal that passageway."));
      }
    } else {
      Verbs.Unhandled(objType);
    }
  } else {
    Verbs.Unhandled(objType);
  }
}


function hToHarbour_AnyClick()
{
  eObjectType objType=eHeavy;

  if (Verbs.UsedAction(eGA_WalkTo)) {
      player.Walk(201, 122, eNoBlock);
  }
}

function region4_Standing()
{
    //Walk from Valley to Harbour
    
    region[4].Enabled = false;
    
    hToHarbour.Enabled = false;
    htoValley2.Enabled = true ;
    hship.Enabled = true ;
    hSea.Enabled = true;
    hWarehouse.Enabled = true;
        
    player.Walk (219, 120, eBlock, eAnywhere);
    SetWalkBehindBase (3, 132);
    player.ManualScaling = true ;
    player.Scaling = 20;
    player.Walk (222, 128, eBlock, eAnywhere);
    player.Walk (138, 119, eBlock, eAnywhere);
    
    
    region[5].Enabled = true ;
}


function region5_Standing()
{
    //walk from Harbour to Valley
    
    hToHarbour.Enabled = true ;
    htoValley2.Enabled= false ;
    hship.Enabled = false ;
    hSea.Enabled = false;
    hWarehouse.Enabled = false;

    
    region[5].Enabled = false ;
    
    player.Walk (218, 128, eBlock, eAnywhere);
    player.Walk (218, 120, eBlock, eAnywhere);
    player.ManualScaling = false ;
    SetWalkBehindBase (3, 123);
    player.Walk (213, 134, eBlock, eWalkableAreas);
    
    region[4].Enabled = true ;
    
}

function hship_AnyClick()
{
    eObjectType objType=eHeavy;
    int x = 146;
    int y = 123;


    //player can look from anywhere
    if (Verbs.UsedAction (eGA_7CoG_LookAt)) {
        player.FaceLocation(157, 115);
        player.Say(SmartString("VER:1.1DATA:I see someone rummaging inside. The guy is turning his back, he doesn't see me."));
    } else {
        //if the player is not in the harbour lets make him walk there
        if (GetWalkableAreaAt(player.x, player.y) != HARBOUR_WALKABLE_AREA) {
           player.Walk(203, 124);
        } else {
            if (Verbs.MovePlayer(x, y)) { //Use Tumbleweed's "delayed action" system.

              //standard interaction
              if (Verbs.UsedAction (eGA_TalkTo)) {
                player.Walk (x, y, eBlock, eWalkableAreas);
                player.FaceDirection(eDirectionRight);
                player.Say("AHOY! ANYONE ON BOARD?");
                Wait(60);
                cMarcus.Transparency = 0 ;
                cMarcus.Say ("Hva er det?");
                player.FaceCharacter (cMarcus, eBlock);
                player.Walk(128, 118, eNoBlock, eWalkableAreas);
                cMarcus.Walk (134, 118, eBlock, eAnywhere);
                player.FaceDirection(eDirectionRight);
                if (DialogsLogic.GetVarBool("hasHelpedFisherman") || player.HasInventory(iHose)) {
                  if (player.HasInventory(iHose)) {
                      player.LoseInventory(iHose);
                      DialogsLogic.SetVarBool("hasHelpedFisherman", true);
                      
                      player.Say("Look, I found the hose you were asking for.");
                      cMarcus.Say("Wonderful! Let me try my little experiment.");
                      cMarcus.Walk (153,120,eBlock,eAnywhere);
                      cMarcus.Transparency = 100 ;
                      cMarcus.Clickable = false ;
                      Wait(60);
                      cMarcus.Say("*CLANG!*");
                      Wait(60);   
                      cMarcus.Say("*BONK!*");
                      Wait(60);   
                      cMarcus.Say("It works!");
                      cMarcus.Transparency = 0 ;
                      player.FaceCharacter (cMarcus, eBlock);
                      cMarcus.Walk (134, 118, eBlock, eAnywhere);
                      cMarcus.Say("Thank you mister!");
                      cMarcus.Say("Now, tell me. How can I help you?");
                      
                      CustomSave.Autosave();
                          
                  } else {
                      cMarcus.Say("Tusen takk again for helping me! I'm confident I can sail away tomorrow at dawn.");
                  }
                  dFishman01.Start();
                } else {
                  dFishermanBusy.Start();
                }
              } else if (Verbs.UsedAction (eGA_7CoG_Pull) || Verbs.UsedAction (eGA_7CoG_Push)) {
                player.Walk (x, y, eBlock, eWalkableAreas);
                player.Say("Shaking the boat will only make them hostile. Why not just call?");
              } else if (Verbs.UsedAction (eGA_7CoG_Open)) {
                player.Walk (x, y, eBlock, eWalkableAreas);
                player.Say("The boat is surely open already, but there's someone inside.");
                player.Say("Why not just call?");
              } else if (Verbs.UsedAction (eGA_WalkTo)) {
                player.Walk (x, y, eBlock, eWalkableAreas);
              } else {
                Verbs.Unhandled(objType);
                
              }
            } 
        }
    }
}


function region6_WalksOnto()
{
    player.FaceDirection (eDirectionRight);
    player.LockView(INDYCLOTH_CROUCH);
    Wait(10);
    player.LockView(INDYCLOTH_CRAWL);
    Wait(10);
    player.UnlockView ();
    
    player.ChangeRoom (eRoom_104_NorwayIceCave, 158, 144, eDirectionDown);
}

function hWarehouse_AnyClick()
{
    eObjectType objType=eHeavy;
    
    if (Verbs.UsedAction (eGA_7CoG_LookAt) || Verbs.UsedAction (eGA_WalkTo)) {
      player.FaceLocation (15, 89);
      player.Say (SmartString("VER:1.1DATA:There are a few houses and buildings, nothing of much interest."));
      player.Say (SmartString("VER:1.1DATA:But I wonder where is everyone."));
    } else {
      Verbs.Unhandled(objType);
    } 
}

function hSea_AnyClick()
{
    eObjectType objType=eHeavy;
    
    if (Verbs.UsedAction (eGA_7CoG_LookAt) || Verbs.UsedAction (eGA_WalkTo)) {
      player.FaceLocation (130, 89);
      player.Say ("The sea seems pretty still.");
    } else if (Verbs.UsedAction (eGA_7CoG_UseInv)) {
        if (player.ActiveInventory == iEmptyBucket) {
          if (Verbs.MovePlayer(125, 108)) { //Use Tumbleweed's "delayed action" system.
            player.LockView(INDYCLOTH_CROUCH);
            Wait(60);
            player.UnlockView ();
            player.LoseInventory(iEmptyBucket);
            player.AddInventory(iFullBucket);
          }
        } else if (player.ActiveInventory == iFullBucket) {
            player.Say("The bucket is already full.");
        } else {
            Verbs.Unhandled(objType);
        } 
    } else {
      Verbs.Unhandled(objType);
    } 
}

function hChurch_AnyClick()
{
    eObjectType objType=eHeavy;
    
    if (Verbs.UsedAction (eGA_7CoG_LookAt)) {
      player.FaceLocation (260, 89);
      player.Say ("It's one of those medieval Scandinavian churches, entirely made of wood.");
      player.Say ("It's exceptionally well preserved.");
      player.Say ("Even though it's technically christian, I'm certain Vikings were still around when it was built.");
    } else {
      if (Verbs.UsedAction(eGA_WalkTo)) {
        player.Walk(280, 140);
      } else {
        Verbs.Unhandled (objType);
      } 
    }
}

function hShed_AnyClick()
{
    eObjectType objType=eHeavy;
     
    if (Verbs.UsedAction(eGA_LookAt)) {
      player.FaceLocation (289, 101);
      player.Say ("Those old storehouses can be found everywhere.");
      player.Say ("Scandinavians would preserve salted meet and other goods in them.");
    } else if (Verbs.MovePlayer(398, 116)) { //Use Tumbleweed's "delayed action" system.
        player.Walk(388, 112, eBlock, eAnywhere); //Walk inside
        
        bool isStillLookingForHose = !DialogsLogic.GetVarBool("hasHelpedFisherman") && !player.HasInventory(iHose);
        
        if (isStillLookingForHose) {
           if (!DialogsLogic.GetVarBool("hasReceivedFishermanMission")) {
               //Nothing to do
           } else {
               if (!DialogsLogic.GetVarBool("eDialog_isOilLampBurning")) {
                   //Nothing
               } else {
                   Wait(60);
                   player.Say("Hmm...");
                   Wait(60);
                   player.Say("Found it!");
                   player.AddInventory(iHose);
               }
           }
        } else {
            // Nothing to display when Indy explores the shed and has ALREADY accomplished the quest
        }
        Wait(60);
        player.Walk(398, 116, eBlock, eAnywhere); //Walk out
        
        if (isStillLookingForHose) {
           //The quest is not completed yet
           if (!DialogsLogic.GetVarBool("hasReceivedFishermanMission")) {
               if (!DialogsLogic.GetVarBool("eDialog_isOilLampBurning")) {
                   //Indy doesn't know what he searches and it's too dark
                   player.Say("There's a TON of junk in there, but it's too dark.");
                   player.Say("A lighter is not bright enough to search through it.");
               } else {
                   //Indy doesn't know what he searches but he has a lamp
                   player.Say("There's a lot of useless junk in there.");
               }
           } else {
               if (!DialogsLogic.GetVarBool("eDialog_isOilLampBurning")) {
                   //Indy knows what he searches but it's too dark
                   player.Say("There's a TON of junk in there, but it's too dark.");
                   player.Say("A lighter is not bright enough to search through it.");
                   
               } else {
                   //Indy knows what he searches and he has the lamp burning
                   player.Say("That wasn't easy.");
                   player.Say("I also found a shovel head. Not brand new but still good.");
                   player.AddInventory(iShovelHead);
               }
           }
        } else {
            // The quest is already completed or Indy is carrying the hose
            player.Say("I don't think I'll find anything useful anymore in there.");
        }
    } else {
      Verbs.Unhandled(objType);
    }
}

function room_Leave()
{
if (channelWind != null)
   channelWind.Stop();
}

function hBurntStructure_AnyClick()
{
    int x = 615;
    int y = 112;

    eObjectType objType=eHeavy;
    
    if (Verbs.UsedAction (eGA_LookAt)) {
      player.FaceLocation (x, y, eBlock);
      player.Say ("I'd say it was a furnace or an oven. It's OLD.");
      player.Say ("But it looks like it burnt very recently.");
    } else if (Verbs.MovePlayer(x, y)) { //Use Tumbleweed's "delayed action" system.

      if (Verbs.UsedAction (eGA_PickUp)) {
        player.FaceLocation (x, y, eBlock);
        player.Say ("There are just some remains of this so called building.");
      } else if (Verbs.UsedAction (eGA_Push)) {
        player.FaceLocation (x, y, eBlock);
        player.Say ("I don't want to destroy this completely!");
      } else {
        Verbs.Unhandled(objType);
      }
    }
      
}

function hCarvedStone_AnyClick()
{
      int x = 664;
      int y = 133;
  
      eObjectType objType=eHeavy;
      
      if (Verbs.UsedAction (eGA_LookAt)) {
        player.FaceLocation (x, y, eBlock);
        player.Say ("No doubt, there used to be some Vikings nearby.");
      } else if (Verbs.MovePlayer(x, y)) { //Use Tumbleweed's "delayed action" system.

        if (Verbs.UsedAction (eGA_PickUp)) {
          player.FaceLocation (x, y, eBlock);
          player.Say (SmartString("VER:1.1DATA:Why should I be wandering around with that stone on my back?"));
        } else {
          Verbs.Unhandled(objType);
        }
      }
}

function hStonePipe_AnyClick()
{
      int x = 703;
      int y = 117;
  
      eObjectType objType=eHeavy;
      
      
      if (Verbs.UsedAction (eGA_LookAt)) {
        player.FaceLocation (x, y, eBlock);
        player.Say ("If I didn't know better, I'd say this stone looks like... An ancient pipe?");
        player.Say ("I pops straight out of the ice wall... And back again into the ground, to God knows where.");
      } else {
        
        //Small hack to avoid walking on the exit region
        if (player.y < 116 && player.x < 662) {
          player.Walk(player.x, 117, eBlock);
        }
        if (player.x < 662) {
          player.Walk(683, player.y, eBlock);
        }
        if (Verbs.MovePlayer(x, y)) { //Use Tumbleweed's "delayed action" system.

          if (Verbs.UsedAction (eGA_PickUp)) {
            player.FaceDirection (eDirectionLeft);
            player.Say ("It's a huge stone literally popping out of the mountain.");
          } else {
            Verbs.Unhandled(objType);
          }
        }
      }
}

function oSteamCrack_AnyClick()
{
      int x = 722;
      int y = 102;
  
      eObjectType objType=eHeavy;
      
      if (Verbs.UsedAction (eGA_LookAt)) {
        player.FaceLocation (x, y, eBlock);
        player.Say ("There's something going on behind that wall.");
      } else {
        Verbs.Unhandled(objType);
      }
}

function oSteamPipe_AnyClick()
{
      int x = 694;
      int y = 89;
  
      eObjectType objType=eHeavy;
      
      if (Verbs.UsedAction (eGA_LookAt)) {
        player.FaceLocation (x, y, eBlock);
        player.Say ("My fiddling with the pipes did something!");
        player.Say ("This steam is going somewhere.");
      } else {
        Verbs.Unhandled(objType);
      }
}

function oFallenDoor_AnyClick()
{  
      eObjectType objType=eHeavy;
      
      if (Verbs.UsedAction (eGA_LookAt)) {
        player.Walk (oFallenDoor.X+10, oFallenDoor.Y, eBlock);
        player.FaceDirection(eDirectionDown); // Don't change that. The loops for CROUCH are a bit weird.
        player.Say ("Let's have a closer look...");
        player.LockView(INDYCLOTH_CROUCH);
        player.Animate (0, 5, eOnce,  eBlock);
        player.UnlockView();
        player.ChangeRoom(14, 0, 0);
      } else if (Verbs.MovePlayer(oFallenDoor.X-20, oFallenDoor.Y-5)) { //Use Tumbleweed's "delayed action" system.
        player.FaceDirection(eDirectionLeft, eBlock);
        if (Verbs.UsedAction (eGA_PickUp)){
          player.Say ("It's made of massive font... Let's leave it here.");
        } else {
          Verbs.Unhandled(objType);
        }
      }
}

function region3_WalksOnto()
{
    //cutscene: walk from mountain to valley.
    
    player.StopMoving();
    StartCutscene(eSkipESCOrRightButton);
    //disable all regions to avoid triggering their events while we walk on them in the cutscenes
    region[2].Enabled = false;
    region[3].Enabled = false;
    
    hBurntStructure.Enabled = false ; 
    int pivotY = 109; //the y where Indy will flip from background to foreground
    //player.Walk(678, pivotY+2, eBlock,  eAnywhere);
    player.Walk(677, pivotY, eBlock,  eAnywhere);
    
    player.z = -player.y; player.y = 0; //To force Indy appearing behind the hill, we artifically make his y =0 and we use z instead.
    Wait(1);
    
    int savedView = player.View; //Save to set back later
    player.FaceDirection(eDirectionUp); //For smooth transition to the Reverted view
    Wait(1);
    player.ChangeView(INDYCLOTH_WALK_REVERTED); //The downhill illusion requires Indy to turn his back while walking "down"
    player.FaceDirection(eDirectionDown); //For smooth transition to the Reverted view
    Wait(1);
    
    player.Walk(player.x, player.y + 60, eBlock, eAnywhere); //walk downwards behind hill
        
    //move Indy to the valley and flip back to normal
    player.z = 0; player.x = 446; player.y = 116; Wait(1);
    player.ChangeView(savedView);
    EndCutscene();

    
    player.Walk(381,  131, eBlock, eAnywhere); //walk out of the trench
    
    //re-enable regions
    region[2].Enabled = true;
    region[3].Enabled = true;
    
    player.SetWalkSpeed(4, player.WalkSpeedY);
}


//Too many people miss the "path to harbour" hotpost, even after making it massive. Time to go nuclear.
//Any click to the left takes indy there. Any lick to the right brings indy back
void on_mouse_click(MouseButton button) {
  if (mouse.y < 150) {
    bool isInHarbour = !region[4].Enabled;
    if (!isInHarbour && Verbs.UsedAction(eGA_WalkTo) && Screen.Viewport.X + mouse.x < 214) {
      player.Walk(207,  123);
    }
    
    if (isInHarbour && Verbs.UsedAction(eGA_WalkTo) && Screen.Viewport.X + mouse.x > 214) {
      player.Walk(162,  123);
    }
  }
}
