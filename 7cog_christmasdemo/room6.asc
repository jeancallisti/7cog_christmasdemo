bool alreadyVisited = false;
bool forceStartFinalCustcene;

bool cAgsvaldLevitating;
int levitatingX[3];
int levitatingY[3];
int currentLevitatingSpot;

bool isUpstairs() {
    return (player.y< 39);
}

enum tongueSprites {
    eSpr_tongueUp = 585, 
    eSpr_tongueDown = 586 
    
};


//Indy touches left or right depending on isLeft
void AnimTouch(bool isLeft) 
{
    int loopLeft = 1; int loopRight = 2;
    int loop = loopLeft;
    if (!isLeft)
        loop = loopRight;
    player.FaceDirection(eDirectionUp, eBlock);
    player.LockView (INDYCLOTH_TOUCH);
    player.Animate (loop, 2, eOnce, eBlock);
    player.UnlockView();
}


void emptyInventory()
{
    for (int i = 0; i < Game.InventoryItemCount; i++) {
        //player.InventoryQuantity[i] = 0;
        if (player.HasInventory(inventory[i]))
            player.LoseInventory(inventory[i]);
    }
    UpdateInventory();
}

function room_FirstLoad()
{
    //Enable dialog about holes in the wall
    dFishmanChurch1.SetOptionState(3, eOptionOn);
    
    
    if (player.PreviousRoom != eRoom_102_NorwayOutside && player.PreviousRoom != eRoom_103_NorwayInside && player.PreviousRoom != eRoom_104_NorwayIceCave) {
        emptyInventory();
        //For tests
        //player.AddInventory();
        
        //FOR DEBUG
        player.AddInventory(iGemBlue);
        player.AddInventory(iGemYellow);
        player.AddInventory(iGemRed);
        player.AddInventory(iFullBucket);
        player.AddInventory(iLighter);
        
        //FOR DEBUG
        
    }
    Mouse.Mode = eModeWalkto;
    PlayerUI.EnableAndShow();
    Mouse.Visible = true;
}

function region1_Standing()
{
    player.ChangeRoom(eRoom_102_NorwayOutside, 0, 0);
}

void UpdateSteam() {
    
    bool hasVisited = DialogsLogic.GetVarBool("hasVisitedIceCave");
    
    oSteam1.Visible  = hasVisited && SteamPuzzle.HasPower("steam11");
    oSteam2.Visible  = hasVisited && SteamPuzzle.HasPower("steam10");
    oSteam3.Visible  = hasVisited && SteamPuzzle.HasPower("steam09");
    oSteam4.Visible  = hasVisited && SteamPuzzle.HasPower("steam08");
    oSteam5.Visible  = hasVisited && SteamPuzzle.HasPower("steam07");
    
    bool isPowered = oSteam1.Visible || oSteam2.Visible || oSteam3.Visible || oSteam4.Visible || oSteam5.Visible;
    
    //basin steam : if the machine is not powered, the steam disappears
    if (!hasVisited || !isPowered) {
        oSteamBasin1.Transparency = 100; //Back to fully invisible
        oSteamBasin2.Transparency = 100; 
        oSteamBasin3.Transparency = 100; 
    }

}

void InitLevitating()
{
    cAgsvaldLevitating = true;
    
    cAgsvald.StopAllTweens();
    levitatingX[0] = cAgsvald.x;
    levitatingY[0] = cAgsvald.y;
    
    levitatingX[1] = cAgsvald.x+15;
    levitatingY[1] = cAgsvald.y-10;
    
    levitatingX[2] = cAgsvald.x-5;
    levitatingY[2] = cAgsvald.y+15;
    
    currentLevitatingSpot = 0;
    
    cAgsvald.TweenPosition(2.0, levitatingX[currentLevitatingSpot+1],  levitatingY[currentLevitatingSpot+1], eEaseInEaseOutTween, eNoBlockTween);
}

void EndingCutscene() {
    
    CustomSave.Autosave();
    ProgressMetrics.ReportProgress(eProgressEnding);

    PlayerUI.DisableAndHide();

    player.PlaceOnWalkableArea();
    player.Walk(153, 133, eBlock);
    
    ShakeScreenBackground(GetGameSpeed() / 4, 2, GetGameSpeed() * 2);

    aLa_criatura.Play();
    
    StartCutscene(eSkipESCOnly);
    player.Walk(179, 153, eBlock);
    player.FaceDirection(eDirectionUp, eBlock);
    
    cAgsvald.Transparency = 100;
    cAgsvald.ChangeRoom(player.Room, 132, 137, eDirectionDown);
    cAgsvald.TweenTransparency(1.5, 0,  eEaseInEaseOutTween, eBlockTween);
    //cAgsvald.TweenPosition(2.0, cAgsvald.x,  cAgsvald.y+10, eEaseInEaseOutTween, eRepeatTween);
    InitLevitating();
    
    cAgsvald.Say("WHO DARES WAKING ME FROM MY ETERNAL SLUMBER?");
    player.Say("Uh oh!");
    player.ChangeView(INDYCLOTH_WALK_REVERTED);
    player.Walk(player.x+20,  player.y+10, eBlock, eAnywhere);
    player.ChangeView(INDYCLOTH_WALK);
    player.FaceDirection(eDirectionUp, eBlock);
    player.Say("I'm afraid that was me, Agsvald!");
    cAgsvald.Say("DO YOU KNOW MY NAME?");
    player.Say("Well yes, you wrote it for me.");
    Wait(120);
    player.Say("Do you remember now?");
    cAgsvald.Say("IF I HAD TO REMEMBER ALL THE PLACES WHERE I WROTE MY NAME!");
    player.Say("That's not a very dignified answer...");
    cAgsvald.Say("I'VE ALWAYS FOUND LOKI MORE INSPIRATIONAL THAN ODIN.");
    player.Say("No kidding.");

    cAgsvald.Say("DID YOU COME LOOKING AFTER YOUR SHIELDLESS GOD?");
    player.Say("Well now it doesn't seem that important anymore.");
    cAgsvald.Say("HA! HA! HA!");
    ShakeScreenBackground(GetGameSpeed() / 4, 2, GetGameSpeed() * 2);
    player.ChangeView(INDYCLOTH_WALK_REVERTED);
    player.Walk(player.x+20,  player.y+20, eBlock, eAnywhere);
    player.ChangeView(INDYCLOTH_WALK);
    player.FaceDirection(eDirectionUp, eBlock);
    player.Say("Easy there, Nur-Ab-Sal.");
    
    cAgsvald.Say("NUR AB WHO?");
    player.Say("Never mind.");
    
    cAgsvaldLevitating = false;
    cAgsvald.StopAllTweens();
    cAgsvald.TweenPosition(2.0, 90,  150, eEaseInEaseOutTween, eBlockTween);
    //cAgsvald.TweenPosition(2.0, cAgsvald.x,  cAgsvald.y+10, eEaseInEaseOutTween, eRepeatTween);
    InitLevitating();
        
    cAgsvald.Say("TONIGHT IS A VERY SPECIAL NIGHT!");
    cAgsvald.Say("IT WILL BE THE LONGEST NIGHT OF THE YEAR.");
    player.Say("So?");
    cAgsvald.Say("THIS MUST BE CELEBRATED, AS IT HAS ALWAYS BEEN.");
    player.Say("With flowers and dances?");
    cAgsvald.Say("NO, WITH BEER AND DRUNKEN SINGING.");
    cAgsvald.Say("I MUST GO NOW, THEY ARE ALL WAITING FOR ME.");
    
    cAgsvaldLevitating = false;


    cAgsvald.StopAllTweens();
    cAgsvald.TweenPosition(2.0, 135,  140, eEaseInEaseOutTween, eBlockTween);
    //cAgsvald.TweenPosition(2.0, cAgsvald.x,  cAgsvald.y+10, eEaseInEaseOutTween, eRepeatTween);
    InitLevitating();
    
    player.Say("Wait!");
    cAgsvald.Say("HO HO HO!");
    
    
    cAgsvald.StopAllTweens();
    cAgsvald.ManualScaling = true;

    cAgsvald.TweenPosition(2.0, cAgsvald.x,  -100, eEaseInEaseOutTween, eBlockTween);
    //cAgsvald.Walk(cAgsvald.x,  cAgsvald.y-100, eBlock, eAnywhere);
    
    //player.Walk(player.x,  player.y - 20, eBlock);
    
    Wait(120);
    
    EndCutscene();
    player.ChangeRoom(eRoom_114_NorwayOutside_Night, 0, 0);
}


function room_Load()
{
    
    if (!alreadyVisited) {
        ChurchPuzzle.AddEntity("basin", eChurchState_basinEmpty, eChurchType_Basin, oBasin);
        
        ChurchPuzzle.AddEntity("eyeLeft", eChurchState_undefined, eChurchType_DragonEye, oEyeLeft);
        ChurchPuzzle.AddEntity("eyeMiddle", eChurchState_undefined, eChurchType_DragonEye, oEyeMiddle);
        ChurchPuzzle.AddEntity("eyeRight", eChurchState_undefined, eChurchType_DragonEye, oEyeRight);
        
        ChurchPuzzle.AddEntity("shieldLeft", eChurchState_shieldDiag, eChurchType_Shield, oShield3);
        ChurchPuzzle.AddEntity("shieldMiddle", eChurchState_shieldDiag, eChurchType_Shield, oShield2);
        ChurchPuzzle.AddEntity("shieldRight", eChurchState_shieldDiag, eChurchType_Shield, oShield1);

        ChurchPuzzle.SyncGraphics();
        
        alreadyVisited = true;
        
      #ifdef TESTING
      if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button
         
            CheckPoints.JumpDone(); //never forget to tell the engine we're done jumping. we do it immediately in case a cutscene would contain a 'ChangeRoom', thus calling 'isJumping' again

            if (CheckPoints.RequestedCheckpoint() == eChckpnt_103b_NorwayInside_EndCutscene) {
                forceStartFinalCustcene = true;
                return;
            } else {
                //Display("Unknown checkpoint: %d", CheckPoints.RequestedCheckpoint() );
            }
      } else {
        //nothing to do
      }
      #endif
        
    }
    
    //Below, we pick seemingly-random loops between 0 and 2 so that the steam animations are not in sync
    oSteamBasin1.SetView (STEAM);
    oSteamBasin1.Animate(2, 10, eRepeat, eNoBlock, eForwards);
    oSteamBasin1.Transparency = 100; //Start fully invisible
    oSteamBasin2.SetView (STEAM);
    oSteamBasin2.Animate(2, 10, eRepeat, eNoBlock, eForwards);
    oSteamBasin2.Transparency = 100; //Start fully invisible
    oSteamBasin3.SetView (STEAM);
    oSteamBasin3.Animate(2, 10, eRepeat, eNoBlock, eForwards);
    oSteamBasin3.Transparency = 100; //Start fully invisible
    
    oSteam1.SetView (STEAM);
    oSteam1.Animate (0, 15, eRepeat, eNoBlock, eBackwards);

    oSteam2.SetView (STEAM);
    oSteam2.Animate (1, 11, eRepeat, eNoBlock, eForwards);

    oSteam3.SetView (STEAM);
    oSteam3.Animate (2, 9, eRepeat, eNoBlock, eBackwards);

    oSteam4.SetView (STEAM);
    oSteam4.Animate (1, 7, eRepeat, eNoBlock, eBackwards);

    oSteam5.SetView (STEAM);
    oSteam5.Animate (0, 8, eRepeat, eNoBlock, eForwards);
      
        
    player.ChangeView (INDYCLOTH_WALK_WOOD);

    UpdateSteam();
    
    if (player.PreviousRoom == eRoom_102_NorwayOutside) {
        player.x = 108; player.y = 100;
        player.FaceDirection (eDirectionDown);
        
        
        
    } else {
        //default
        player.x = 108; player.y = 100;
        
    }
}



function oBasin_AnyClick()
{   
  int x = 133 ;
  int y = 127 ;
      
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }
  
  if (Verbs.MovePlayer(x, y)) { //Use Tumbleweed's "delayed action" system.
    Action usedAction = Verbs.GetUsedAction();
    switch(usedAction){
      case eGA_LookAt: 
        player.FaceDirection(eDirectionDown);
        player.Say("It's an ancient baptism font. I guess it had a different purpose in Viking times.");
        player.Say("It's right in front of that curved line on the floor.");
        break;  
      case eGA_7CoG_UseInv:
        if (player.ActiveInventory == iFullBucket) {
        player.Walk (156, 138, eBlock, eWalkableAreas);
        player.LockView(INDYCLOTH_CROUCH);
        player.Animate (0, 5, eOnce, eBlock);
        Wait(60);
        player.UnlockView ();
        player.LoseInventory(iFullBucket);
        player.AddInventory(iEmptyBucket);
        
        ChurchPuzzle.SetEntityState("basin",eChurchState_basinFull);
        ChurchPuzzle.SyncGraphics();
        
        CustomSave.Autosave();
            
        } else if (player.ActiveInventory == iEmptyBucket) {
          player.FaceLocation (x, y, eBlock);
          player.Say ("The bucket is empty. I'm no magician.");
        } else {
            Verbs.Unhandled();
        }
        break;
      default:
        Verbs.Unhandled();
        break;
    }
  }
}

function hPostItNote_AnyClick()
{
    if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }
    
  if (Verbs.MovePlayer(36, 123)) { //Use Tumbleweed's "delayed action" system.
    Action usedAction = Verbs.GetUsedAction();
    switch(usedAction){
      case eGA_LookAt: 
        player.FaceDirection(eDirectionLeft);
        player.Say("It's a handwritten note pinned to the wall.");
        player.Say("It says : 'The key is behind the cross'.");
        
        if (!player.HasInventory(iCabinetKey)) { 
            player.FaceDirection(eDirectionRight);
            Wait(80);
            player.Say("I don't see any cross.");
        }
        break;
      default:
        Verbs.Unhandled();
        break;
    }
  }
}

function hPainting1_AnyClick()
{

  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }
  
  if (Verbs.MovePlayer(49, 108)) { //Use Tumbleweed's "delayed action" system.

    Action usedAction = Verbs.GetUsedAction();
    switch(usedAction){
      case eGA_LookAt: 
          player.FaceDirection(eDirectionLeft, eBlock);
          player.Say("This one represents the resurrection of Jesus.");
          break;
      case eGA_PickUp:
      case eGA_Pull : 
          player.Say("It's worthless.");
          break;       
      default:
        Verbs.Unhandled();
        break;
    }
  }
}

function hPainting2_AnyClick()
{
    
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }

  if (Verbs.MovePlayer(152, 100)) { //Use Tumbleweed's "delayed action" system.

    Action usedAction = Verbs.GetUsedAction();
    switch(usedAction){
      case eGA_LookAt: 
          player.FaceDirection(eDirectionRight, eBlock);
          player.Say("This one represents Jesus being crucified.");
          break;
      case eGA_PickUp:
      case eGA_Pull : 
          if (!player.HasInventory(iCabinetKey)) {
              player.FaceDirection(eDirectionRight, eBlock);
              player.Say("Hey! There's a small key taped behind the painting!");
              player.AddInventory(iCabinetKey);
              
              CustomSave.Autosave();
          } else {
              player.Say("I've already taken the key.");
          }
          break;       
      default:
        Verbs.Unhandled();
        break;
    }
  }
}

function hPainting3_AnyClick()
{
    
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }

  if (Verbs.MovePlayer(164, 105)) { //Use Tumbleweed's "delayed action" system.

    Action usedAction = Verbs.GetUsedAction();
    switch(usedAction){
      case eGA_LookAt: 
          player.FaceDirection(eDirectionRight, eBlock);
          player.Say("This one represents a Roman soldier putting a crown of thorns on Jesus' head.");
          break;
      case eGA_PickUp:
      case eGA_Pull : 
          player.Say("It's worthless.");
          break;       
      default:
        Verbs.Unhandled();
        break;
    }
  }
}

function hPainting4_AnyClick()
{
    
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }

  if (Verbs.MovePlayer(216, 123)) { //Use Tumbleweed's "delayed action" system.

    Action usedAction = Verbs.GetUsedAction();
    switch(usedAction){
      case eGA_LookAt: 
          player.FaceDirection(eDirectionRight, eBlock);
          player.Say("This one represents Jesus healing the lepers.");
          break;
      case eGA_PickUp:
      case eGA_Pull : 
          player.Say("It's worthless.");
          break;       
      default:
        Verbs.Unhandled();
        break;
    }
  }
}

function hPainting5_AnyClick()
{
    
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }

  if (Verbs.MovePlayer(224, 131)) { //Use Tumbleweed's "delayed action" system.

    Action usedAction = Verbs.GetUsedAction();
    switch(usedAction){
      case eGA_LookAt: 
          player.FaceDirection(eDirectionRight, eBlock);
          player.Say("This one represents Joseph of Arimathea collecting the blood of Jesus in the Grail.");
          break;
      case eGA_PickUp:
      case eGA_Pull : 
          player.Say("It's worthless.");
          break;       
      default:
        Verbs.Unhandled();
        break;
    }
  }
}



#define IF_WALK_TO_CABINET if (Verbs.MovePlayer(27, 126)) 
#define FACE_CABINET player.FaceDirection(eDirectionUp, eBlock);


void openCabinetDoor()
{
    

    IF_WALK_TO_CABINET {
      FACE_CABINET
      AnimTouch(true);
      oCabinetDoor.Graphic = 481;
      if (!DialogsLogic.GetVarBool("hasTakenBucket"))
          oBucket.Visible = true;
      if (!DialogsLogic.GetVarBool("hasTakenBroomStick"))
          oBroomStick.Visible = true;   

      oHatch.Visible = true;
      DialogsLogic.SetVarBool("isCabinetDoorOpen",true);
    }
}

void closeCabinetDoor() {
    IF_WALK_TO_CABINET {
      FACE_CABINET
      AnimTouch(true);
      oCabinetDoor.Graphic = 482;
      oBucket.Visible = false;
      oHatch.Visible = false;
      DialogsLogic.SetVarBool("isCabinetDoorOpen",false);
    }
}

int doorPushCount = 0;

function oCabinetDoor_AnyClick()
{
    
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }

  bool isUnlocked = DialogsLogic.GetVarBool("hasUnlockedCabinet");
  bool isOpen = DialogsLogic.GetVarBool("isCabinetDoorOpen");
  
  IF_WALK_TO_CABINET {
    FACE_CABINET
    Action usedAction = Verbs.GetUsedAction();
    switch(usedAction){
      case eGA_LookAt: 
          player.FaceDirection(eDirectionLeft);
          player.Say("A thick wooden door. How authentic.");
          break;
      case eGA_Open:
      case eGA_Pull : 
          if (isUnlocked) {
              //door unlocked. Is it already open?
              if (isOpen) {
                  player.Say("It's already open");
              } else {
                  openCabinetDoor();
              }
          } else {
              player.Say("The door is locked.");
          }
          break;  
          
      case eGA_Close:
      case eGA_Push :
          if (isOpen) {
              closeCabinetDoor();
          } else {
              doorPushCount++;
              if (doorPushCount > 1 && doorPushCount %3 == 0 ) {
                player.Say(SmartString("VER:1.1DATA:I've pushed the lock three times, but nothing happened."));
                player.Say(SmartString("VER:1.1DATA:Maybe I should push the lock that's inside?"));
              } else {
                player.Say("It's already closed");
              }
          }
          break;  
      case eGA_UseInv : 
          if (player.ActiveInventory == iCabinetKey) {
              AnimTouch(true);
              player.Say("It fits.");
              cNarr.ChangeRoom(player.Room, 0, 0);
              cNarr.SayAt(0, 97, 100, "*CLICK*");
              DialogsLogic.SetVarBool("hasUnlockedCabinet", true);
              
          } else {
              Verbs.Unhandled();
          }
          break;
      default:
        Verbs.Unhandled();
        break;
    }
  }
  

}

void GoDownstairs()
{
  player.Walk(149, 29, eBlock);
  StartCutscene(eSkipESCOrRightButton);
    player.LockView(INDYCLOTH_WALK_REVERTED);
    player.Walk(player.x-10, player.y+10, eBlock, eAnywhere);
    player.x = 134;  player.y = 87; 
    player.UnlockView();
    Wait(1);
    player.Walk(149, 96, eBlock, eAnywhere);
    player.ManualScaling = false;
    player.Walk(149, 100, eBlock, eAnywhere);
  EndCutscene();
}
function hStairsDown_AnyClick()
{

  if (isUpstairs()) {  
    if (Verbs.MovePlayer(145, 29)) { //Use Tumbleweed's "delayed action" system.
      GoDownstairs();
    }
  } else {
    
    if (Verbs.MovePlayer(146, 97)) { //Use Tumbleweed's "delayed action" system.

      Action usedAction = Verbs.GetUsedAction();
      switch(usedAction){
        case eGA_LookAt: 
            player.Say("these stairs lead to the balcony.");
            break;
        case eGA_Open:
        case eGA_Pull : 
        case eGA_Close:
        case eGA_Push : 
        case eGA_UseInv : 
        case eGA_TalkTo : 
        case eGA_GiveTo : 
            Verbs.Unhandled();
            break;
        default:
          StartCutscene(eSkipESCOrRightButton);
          
          player.Walk(132, 84, eBlock, eAnywhere);
          player.x = 140;  player.y = 37; player.ManualScaling = true; player.Scaling = 50;Wait(1);
          player.Walk(150, 30, eBlock, eAnywhere);
          EndCutscene();
          break;
      }  
    }
  }
}

function hStairsUp_AnyClick()
{

    
  if (!isUpstairs()) { player.Say("I should go upstairs to do that."); return; }

  if (Verbs.MovePlayer(149,  30)) { //Use Tumbleweed's "delayed action" system.

    Action usedAction = Verbs.GetUsedAction();
    switch(usedAction){
      case eGA_LookAt: 
          player.Say("These stairs lead to the ground floor.");
          break;
      case eGA_Open:
      case eGA_Pull : 
      case eGA_Close:
      case eGA_Push : 
      case eGA_UseInv : 
      case eGA_TalkTo : 
      case eGA_GiveTo : 
          Verbs.Unhandled();
          break;
      default:
        GoDownstairs();
        break;
    }  
  }
}

function hBench_AnyClick()
{
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }

  int x=180;
  int y=130;
  if (Verbs.MovePlayer(x,  y)) { //Use Tumbleweed's "delayed action" system.

    Action usedAction = Verbs.GetUsedAction();
    switch (usedAction) {
      case eGA_WalkTo:
          player.Walk (mouse.x, y, eBlock, eWalkableAreas);
          break;
      case eGA_7CoG_LookAt :
          if (!DialogsLogic.GetVarBool("hasTakenGum")) {
              player.Walk (x, y, eBlock, eWalkableAreas);
              player.FaceDirection(eDirectionUp, eBlock);
              player.Say ("My parents made me sit countless hours on those church benches.");
              player.Walk (170, 125, eBlock, eAnywhere);  
              player.Say ("I remember how rugged the wood felt.");
              player.Walk(player.x,  player.y -3, eBlock, eAnywhere);
              Wait(60);
              player.Say ("Yuck! There's a gum glued to it!");
              player.Say ("It's one of those awful old 'gums' made of chewed bark.");
              player.Say ("Oh well, now that I've touched it.");

              player.LockView (INDYCLOTH_CROUCH);
              player.Animate (1, 40, eOnce, eBlock);
              player.UnlockView();
              player.AddInventory (iGum);
              player.Walk (170, 130, eBlock, eAnywhere); 
              player.Say ("Umph.");
              DialogsLogic.SetVarBool("hasTakenGum", true);
          } else {
              player.Walk (x, y, eBlock, eWalkableAreas);
              player.FaceDirection(eDirectionUp, eBlock);
              player.Say("I'm not starting a collection of old chewing gum, thanks.");
          }
          break;
          
      case eGA_Use :
          player.FaceLocation(x, y, eBlock);
          player.Say ("Gross.");
          break;
      default:
          Verbs.Unhandled();
          break;
    }
  }
}

function oPaddle_AnyClick()
{
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }

  int x=185;
  int y=130;

  int loopRight = 2;
        
  if (Verbs.MovePlayer(x,  y)) { //Use Tumbleweed's "delayed action" system.

    Action usedAction = Verbs.GetUsedAction();
    switch (usedAction) {
      case eGA_WalkTo:
          player.Walk (x, y, eBlock, eWalkableAreas);
          break;
      case eGA_7CoG_LookAt :
          player.FaceLocation(x, y);
          player.Say ("A rowing paddle. Not too surprising when everyone here is a fisherman.");
          player.Say ("It seems in good shape.");
          break;
      case eGA_7CoG_PickUp :
          player.Say("Why not.");
          player.Walk(180, 123, eBlock, eWalkableAreas);
          player.FaceDirection(eDirectionRight, eBlock);
          player.LockView(INDYCLOTH_TOUCH);
          player.Animate(loopRight, 2, eOnce, eNoBlock);
          Wait(60);
          oPaddle.X = oPaddle.X+3;Wait(1);
          oPaddle.TweenPosition(1.5,  oPaddle.X,  oPaddle.Y+25, eEaseInEaseOutTween, eBlockTween  );
          oPaddle.Visible = false;
          player.AddInventory(iPaddlingOar);
          player.UnlockView();
          player.Walk(player.x,  player.y+15, eBlock, eAnywhere);
          player.Say("I used an old technique for efficient packing.");
          player.Say("It was invented by pirates in the Caribbeans.");
          break;
      default:
          Verbs.Unhandled();
          break;
    }
  }
}

function oShield3_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();

  if (usedAction==eGA_7CoG_LookAt) {
    player.Say("A medieval shield used as a decoration.");
    return;
  }
  
  if (!isUpstairs()) { player.Say("I should go upstairs to do that."); return; }

  if (Verbs.MovePlayer(146,  31)) { //Use Tumbleweed's "delayed action" system.

    switch(usedAction){

      case eGA_7CoG_PickUp : 
          player.Say("That's weird. The shield seems to be attached to an axis.");
      case eGA_7CoG_Push : 
          ChurchPuzzle.Interact(oShield3);
          break;
      case eGA_7CoG_Pull : 
          ChurchPuzzle.Interact(oShield3);
          break;
      default:
          Verbs.Unhandled();
          break;
    }  
  }
}

function oShield2_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();

  if (usedAction==eGA_7CoG_LookAt) {
    player.Say("A medieval shield used as a decoration.");
    return;
  }
  
  if (!isUpstairs()) { player.Say("I should go upstairs to do that."); return; }

  if (Verbs.MovePlayer(158,  31)) { //Use Tumbleweed's "delayed action" system.

    switch(usedAction){

      case eGA_7CoG_PickUp : 
          //TODO: move this interaction to the module
          player.Say("That's weird. The shield seems to be attached to an axis.");
      case eGA_7CoG_Push : 
          ChurchPuzzle.Interact(oShield2);
          break;
      case eGA_7CoG_Pull : 
          ChurchPuzzle.Interact(oShield2);
          break;
      default:
          Verbs.Unhandled();
          break;
    }  
  }
}

function oShield1_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();

  if (usedAction==eGA_7CoG_LookAt) {
    player.Say("A medieval shield used as a decoration.");
    return;
  }
  
  if (!isUpstairs()) { player.Say("I should go upstairs to do that."); return; }

  if (Verbs.MovePlayer(168,  31)) { //Use Tumbleweed's "delayed action" system.

    switch(usedAction){
      case eGA_7CoG_PickUp : 
          //TODO: move this interaction to the module
          player.Say("That's weird. The shield seems to be attached to an axis.");
      case eGA_7CoG_Push : 
          ChurchPuzzle.Interact(oShield1);
          break;
      case eGA_7CoG_Pull : 
          ChurchPuzzle.Interact(oShield1);
          break;
      default:
          Verbs.Unhandled();
          break;
    }  
  }
}

function hStone_AnyClick()
{
  eObjectType objType=eHeavy;

  Action usedAction = Verbs.GetUsedAction();
  int x=248;
  int y=132;
  
  if (usedAction==eGA_7CoG_LookAt) {
    player.FaceLocation(x, y);
    player.Say("This stelle has drawings of fog horns on it.");
    player.Say("There's a hole carved into each drawing. They seem to be running deep.");
    return;
  }
  
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }

  if (Verbs.MovePlayer(x,  y)) { //Use Tumbleweed's "delayed action" system.

    switch(usedAction){

      case eGA_UseInv : 
          if (player.ActiveInventory == iPaddlingOar || player.ActiveInventory == iBroomStick) {
              player.Walk(x,  y, eBlock);
              player.FaceDirection(eDirectionLeft);
              player.Say(SmartString("VER:1.1DATA:Nah. I think they're just holes. I don't see any mechanism."));
          } else if (player.ActiveInventory == iGum) {
              player.Walk(x,  y, eBlock);
              player.FaceDirection(eDirectionLeft);
              player.Say(SmartString("VER:1.1DATA:Those holes are pretty large. It's hopeless trying to patch them up."));
          } else {
              Verbs.Unhandled(objType);
          }
          break;
      default:
          Verbs.Unhandled(objType);
          break;
    }  
  }
}




#define HASPOWER SteamPuzzle.HasPower

void FinalSequence()
{
    //Fade out current music
    AudioChannel* c = null;
    for (int i=0; i < System.AudioChannelCount; i++) {
        AudioChannel* temp = System.AudioChannels[i];
        if (temp.PlayingClip == aChristmas_Salmon_v3_2_2_2)
            c = System.AudioChannels[i];
    }
    
    if (c!=null) {
        //AudioClip* clip = c.PlayingClip;
        c.TweenVolume(3.0,  0  );
    }
    
    bool isBasinFull = ChurchPuzzle.GetEntityState("basin") == eChurchState_basinFull;
    bool isShieldsCorrect = ChurchPuzzle.IsShieldsCorrect();
    bool isEyesCorrect = ChurchPuzzle.IsEyesCorrect();
    bool isNotesCorrect = ChurchPuzzle.IsNotesCorrect();
    
    //FOR DEBUG
    /*
    isBasinFull = false;
    isShieldsCorrect = false;
    isEyesCorrect = false;
    isNotesCorrect = false;
    */
    //FOR DEBUG
    
    ShakeScreenBackground(GetGameSpeed() / 4, 2, GetGameSpeed() * 2);
    
    aMystery_theme_1_0.Play(eAudioPriorityNormal, eOnce);
    
    player.FaceDirection(eDirectionLeft);
    player.ChangeView(INDYCLOTH_WALK_REVERTED);
    player.Walk(player.x - 30,  player.y + 5, eBlock);
    player.ChangeView(INDYCLOTH_WALK);
    player.FaceDirection(eDirectionRight);
    player.Say("Wow!");
    
    //MUSIC NOTES
    player.Walk(208,  135, eBlock);
    player.FaceDirection(eDirectionRight, eBlock);

    bool noteIsOn[5];
    
    noteIsOn[0] = DialogsLogic.GetVarBool("hasVisitedIceCave") && HASPOWER("steam11");
    noteIsOn[1] = DialogsLogic.GetVarBool("hasVisitedIceCave") && HASPOWER("steam10");
    noteIsOn[2] = DialogsLogic.GetVarBool("hasVisitedIceCave") && HASPOWER("steam09");
    noteIsOn[3] = DialogsLogic.GetVarBool("hasVisitedIceCave") && HASPOWER("steam08");
    noteIsOn[4] = DialogsLogic.GetVarBool("hasVisitedIceCave") && HASPOWER("steam07");
      
    //DEBUG
    /*
    noteIsOn[0] = true;
    noteIsOn[3] = true;
    noteIsOn[4] = true;
    */
    //DEBUG
    
    bool allOn = (noteIsOn[0] && noteIsOn[1]  && noteIsOn[2]  && noteIsOn[3]  && noteIsOn[4]);
    
    if (cNarr.Room != player.Room)
        cNarr.ChangeRoom(player.Room, 0, 0);
    
    if (isNotesCorrect) {
        //notes from the top to the bottom
        Object* steamObj = null;
        
        aHorns.Play();
        
        for (int i=4; i>=0; i--) {
            if (noteIsOn[i]) {
                switch (i) {
                    case 0 : steamObj = oSteam1; break;
                    case 1 : steamObj = oSteam2; break;
                    case 2 : steamObj = oSteam3; break;
                    case 3 : steamObj = oSteam4; break;
                    case 4 : steamObj = oSteam5; break;
                }
                cNarr.x = steamObj.X - 30; cNarr.y = steamObj.Y + 10;
                cNarr.Say("POOOOOOOO");
            }
        }
        player.Say("Agsvald's fog horns! Alright!");
        
    } else {
        //notes from the top to the bottom
        Object* steamObj = null;
        
        aSteam.Play();
        for (int i=4; i>=0; i--) {
            if (noteIsOn[i]) {
                switch (i) {
                    case 0 : steamObj = oSteam1; break;
                    case 1 : steamObj = oSteam2; break;
                    case 2 : steamObj = oSteam3; break;
                    case 3 : steamObj = oSteam4; break;
                    case 4 : steamObj = oSteam5; break;
                }
                cNarr.x = steamObj.X - 30; cNarr.y = steamObj.Y + 10;
                cNarr.Say("pshhhhh...");
            }
        }
        Wait(60);
        if (allOn) {
          player.Say(SmartString("VER:1.1DATA:Surely a good melody doesn't have ALL the notes at the same time."));
        } else {
          player.Say("Umph. It doesn't sound like a proper melody?");
        }
    }
    
    

    
    //Basin
    player.Walk(140, 128, eBlock);
    bool checkHeat = false;
    player.FaceDirection(eDirectionRight);
    if (isBasinFull) { // The power is implicitly on so we can start the mist
        if (oSteamBasin1.Transparency != 0) {
            oSteamBasin1.TweenTransparency(2.0, 0, eEaseInEaseOutTween, eNoBlockTween);
            oSteamBasin2.TweenTransparency(2.0, 0, eEaseInEaseOutTween, eNoBlockTween);
            oSteamBasin3.TweenTransparency(2.0, 0, eEaseInEaseOutTween, eBlockTween);
        }
        player.FaceDirection(eDirectionDown, eBlock);
        player.Say("Some sea water mist!");
    } else {
        if (cNarr.Room != player.Room) {
            cNarr.ChangeRoom(player.Room, 0, 0);
            Wait(1);
        }
        cNarr.x = 150; cNarr.y = 140;
        cNarr.Say("*Crrrrrrr*");
        player.Say(SmartString("VER:1.1DATA:Is it supposed to make this sizzling noise?"));
        checkHeat = true;
    }
    
    //Shields
    player.Walk(178,  135, eBlock);
    player.FaceDirection(eDirectionUp, eBlock);
    if (isShieldsCorrect) {
        for (int i=0; i<3; i++) {
            oShield1.Y = oShield1.Y +1;
            oShield2.Y = oShield2.Y -1;
            oShield3.Y = oShield3.Y +1;
            Wait(40);
            oShield1.Y = oShield1.Y -1;
            oShield2.Y = oShield2.Y +1;
            oShield3.Y = oShield3.Y -1;
            Wait(40);
        }
        player.Say("It's like they're moving along a wave! Perfect!");
    } else {
        for (int i=0; i<3; i++) {
            oShield1.X = oShield1.X -1;
            oShield2.X = oShield2.X -1;
            oShield3.X = oShield3.X -1;
            Wait(40);
            oShield1.X = oShield1.X +1;
            oShield2.X = oShield2.X +1;
            oShield3.X = oShield3.X +1;
            Wait(40);
        }
        player.Say("They're just clunking but nothing good seems to be happening.");

    }
    
    // Dragon eyes
    player.Walk(143,  135, eBlock);
    player.FaceDirection(eDirectionUp, eBlock);
    if (isEyesCorrect) {
        oJewelsShining.StopAllTweens();
        oJewelsShining.Transparency = 100;
        oJewelsShining.Visible = true;
        Wait(1);
        
        for (int i=0; i<3; i++) {
            oJewelsShining.TweenTransparency(0.7, 0, eEaseInEaseOutTween, eBlockTween);
            oJewelsShining.TweenTransparency(0.7, 100, eEaseInEaseOutTween, eBlockTween);
        }
        oJewelsShining.TweenTransparency(0.2, 100, eLinearTween, eBlockTween);
        Wait(1);
        oJewelsShining.Visible = false;
        player.Say("The dragon is coming to life!");
    } else {
        for (int i=0; i<3; i++) {
            oTongue.X = oTongue.X +1;
            Wait(30);
            oTongue.X = oTongue.X -1;
            Wait(30);
        }
        player.Say("Something is not quite triggering there.");
    }
    

    
    // Basin follow-up
    if (checkHeat) {
        player.Walk(125, 133, eBlock);
        player.FaceDirection(eDirectionDown, eBlock);
        player.LockView(INDYCLOTH_CROUCH);
        player.Animate(0, 5, eOnce, eBlock);
        Wait(100);
        
        player.UnlockView();
        player.FaceDirection(eDirectionLeft, eBlock);
        player.Say("The stone is very hot, but... Not mist at all.");
        player.Say(SmartString("VER:1.1DATA:That's where the sizzling noise came from."));

        //player.Say("Pretty disappointing.");
    }
    
    
    bool allCorrect = isBasinFull && isShieldsCorrect && isEyesCorrect && isNotesCorrect;
    bool someCorrect = isBasinFull || isShieldsCorrect || isEyesCorrect || isNotesCorrect;
    
    if (c!=null)
        c.Stop(); // To make sure that it doesn't stay faded out forever and restarts at some point.
    
    if (allCorrect) {
        EndingCutscene();
    } else {
        player.Walk(82, 135, eBlock);
        player.Say("I have a hunch that's not just an art installment.");
        if (someCorrect) {
            player.Say("Well, at least SOME of it seemed correct.");
        }
        player.Say("I need to make this thing work!");
    }
    
    
}


function oTongue_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();
  int x=145;
  int y=136;

  if(usedAction==eGA_7CoG_LookAt) {
    player.FaceLocation(x, y);
    player.Say("This dragon has an unusually long tongue.");
    return;
  }
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }
    
  if (Verbs.MovePlayer(x,  y)) { //Use Tumbleweed's "delayed action" system.

    int loopLeft = 1; int loopRight = 2;
  
    bool hasPower =  DialogsLogic.GetVarBool("hasVisitedIceCave") && (
                            HASPOWER("steam11")|| HASPOWER("steam10")|| HASPOWER("steam09") 
                            || HASPOWER("steam08") || HASPOWER("steam07"));
                                
    switch(usedAction){

        case eGA_7CoG_PickUp:
            player.Walk(x, y, eBlock);
            AnimTouch(true);
            player.Say("I can't pick it up entirely but it seems to be able to slide.");
            break;
        case eGA_7CoG_Pull:
            player.Walk(x, y, eBlock);
            player.FaceDirection(eDirectionUp);

            player.LockView(INDYCLOTH_TOUCH);
            player.Animate(loopLeft, 2, eOnce, eNoBlock);
            Wait(30);
            oTongue.Graphic = eSpr_tongueDown;
            Wait(30);
            oTongue.Graphic = eSpr_tongueUp;
            player.UnlockView();
            
            player.FaceDirection(eDirectionDown);
            

            //DEBUG
            /*
            hasPower = true;
            player.Say("TO REMOVE: hasPower = true");
            */
            //DEBUG
            
            if (hasPower) {
                FinalSequence();
            } else {
                player.FaceDirection(eDirectionLeft, eBlock);
                Wait(60);
                player.FaceDirection(eDirectionRight, eBlock);
                Wait(60);
                player.Say("Nothing happened.");
            }
            

            break;
            
        default:
            Verbs.Unhandled();
            break;
    }  
  }
}

function oBucket_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();
  int x=11;
  int y=128;

  if(usedAction==eGA_7CoG_LookAt) {
    player.FaceLocation(x, y);
    player.Say("I don't see the mop.");
    return;
  }
  
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }
  int loopRight = 2;
  
  if (Verbs.MovePlayer(x,  y)) { //Use Tumbleweed's "delayed action" system.

    switch(usedAction){
      case eGA_7CoG_PickUp:
          player.Walk(x, y, eBlock);
          AnimTouch(true);
          player.AddInventory(iEmptyBucket);
          oBucket.Visible = false;
          DialogsLogic.SetVarBool("hasTakenBucket", true);
          break;
      default:
          Verbs.Unhandled();
          break;
    }  
  }
}

function oOilLamp_AnyClick()
{
      int loopRight = 2;

  if (Verbs.MovePlayer(93,  143)) { //Use Tumbleweed's "delayed action" system.

    Action usedAction = Verbs.GetUsedAction();
    switch(usedAction){
      case eGA_7CoG_LookAt: 
        player.FaceDirection(eDirectionRight, eBlock);
        player.Say("There's a small oil lamp resting on the basin.");
        break;
      case eGA_7CoG_UseInv:
          if (player.ActiveInventory == iLighter) {
              player.Say(SmartString("VER:1.1DATA:That'd be more useful if I took the lamp first."));
          } else {
              Verbs.Unhandled();
          }
          break;
      case eGA_7CoG_PickUp:
        player.Say("I was sent by church representatives, after all.");
        player.Walk(95, 150, eBlock, eAnywhere);
        player.Walk(105, 152, eBlock, eAnywhere);
        player.FaceDirection(eDirectionUp);
        player.LockView(INDYCLOTH_CROUCH);
        player.Animate(loopRight, 5, eOnce, eBlock);
        Wait(20);
        player.AddInventory(iOilLamp);
        oOilLamp.Visible = false;
        player.UnlockView();
        player.Walk(player.x-15,  player.y-10, eBlock, eAnywhere);
        player.Walk(player.x-5,  player.y-10, eBlock, eAnywhere);
        
        player.FaceDirection(eDirectionDown);
        break;
      default:
        Verbs.Unhandled();
    }
  }
}

function oBroomStick_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();
  int x=20;
  int y=120;

  if(usedAction==eGA_7CoG_LookAt) {
    player.FaceLocation(x, y);
    player.Say("There's only the stick, the rest is missing.");
    return;
  }
  
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }
  int loopRight = 2;
  
  if (Verbs.MovePlayer(x,  y)) { //Use Tumbleweed's "delayed action" system.

    switch(usedAction){
      case eGA_7CoG_PickUp:
          AnimTouch(true);
          player.AddInventory(iBroomStick);
          DialogsLogic.SetVarBool("hasTakenBroomStick", true);

          oBroomStick.Visible = false;
          break;
      default:
          Verbs.Unhandled();
          break;
    }  
  }
}



function hDragonHead_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();
  int x=142;
  int y=135;

  if(usedAction==eGA_7CoG_LookAt) {
    player.FaceLocation(x, y);
    player.Say("It still has tiny seashells here and there."); 
    player.Say("I think it could have been at the front of a Viking longboat.");
    player.Say(SmartString("VER:1.1DATA:There's a cavity in place of each eye."));
    return;
  }
  
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }
  int loopRight = 2;
  
  if (Verbs.MovePlayer(x,  y)) { //Use Tumbleweed's "delayed action" system.

    switch(usedAction){

      case eGA_7CoG_Push:
      case eGA_7CoG_Pull:
          AnimTouch(true);
          
          player.Say("It won't budge.");
          break;
      default:
          Verbs.Unhandled();
          break;
    }  
  }
}

void TouchDragon() {
      int loopRight = 2;
    AnimTouch(true);
}

void InteractEye(Object* o)
{
  Action usedAction = Verbs.GetUsedAction();
  int x=142;
  int y=135;

  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }
          
  if (usedAction == eGA_LookAt) {
    //Look at : we only force Indy to not stay at the back of the church.
    int walkX = player.x;
    int walkY = player.y;

    if (walkY < 127)
        walkY = 127;
      
    if (Verbs.MovePlayer(walkX,  walkY)) {
        player.FaceLocation(x, y);
        ChurchPuzzle.Interact(o);
    }
    return;
  }
  
  
  if (Verbs.MovePlayer(x,  y)) { //Use Tumbleweed's "delayed action" system.

    switch(usedAction){

      case eGA_7CoG_UseInv:
          if (player.ActiveInventory == iGemBlue || player.ActiveInventory == iGemYellow || player.ActiveInventory == iGemRed) {
              player.Walk(x, y, eBlock);
              TouchDragon();
          
              ChurchPuzzle.Interact(o);
          } else {
              Verbs.Unhandled();
          }
          break;
      case eGA_7CoG_Pull:
      case eGA_7CoG_PickUp:
          ChurchPuzzle.Interact(o);
          break;
      default:
          Verbs.Unhandled();
          break;
    }  
  }
}


function oEyeMiddle_AnyClick()
{
  InteractEye(oEyeMiddle);
}

function oEyeRight_AnyClick()
{
  InteractEye(oEyeRight);
}

function oEyeLeft_AnyClick()
{
  InteractEye(oEyeLeft);
}


void InteractSteam() {
  Action usedAction = Verbs.GetUsedAction();
  int x=261;
  int y=93;

  if (isUpstairs()) { player.Say("I'm too far away."); return; }

  if (Verbs.MovePlayer(x,  y)) { //Use Tumbleweed's "delayed action" system.

    switch(usedAction){
      case eGA_7CoG_LookAt: 
          player.Say("It seems like my fiddling with the pipes did something after all.");
          break;
      default:
          Verbs.Unhandled();
          break;
    }  
  }
}

function oSteam1_AnyClick()
{
    InteractSteam();
}

function oSteam2_AnyClick()
{
    InteractSteam();
}

function oSteam3_AnyClick()
{
    InteractSteam();
}

function oSteam4_AnyClick()
{
    InteractSteam();
}

function oSteam5_AnyClick()
{
    InteractSteam();
}


bool pushCount = 0;

function oHatch_AnyClick()
{
  int x=27;
  int y=127;
    
  int loopLeft = 1;
  
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }
  
  IF_WALK_TO_CABINET {
    FACE_CABINET
    Action usedAction = Verbs.GetUsedAction();

    switch(usedAction){
      case eGA_7CoG_LookAt: 
          player.FaceLocation(x, y);
          player.Say("Just the striking plate to the door's lock.");
          break;
      case eGA_7CoG_Push: 
          if (    DialogsLogic.GetVarBool("hasRevealedDoorMechanism")) {
              player.LockView(INDYCLOTH_TOUCH);
              player.Animate(loopLeft, 2, eOnce, eBlock);
              player.UnlockView();
              pushCount++; 
              if (pushCount == 3) {
                  cNarr.ChangeRoom(player.Room, 11, 79 );
                  aWoodenMechanism.Play();
                  cNarr.Say("*CLICK*");
                  player.Say("A secret compartment just opened at the back of the cabinet!");
                  player.Say("WOW! It contains two huge gems!");
                  player.Walk(player.x-5,  player.y, eBlock, eAnywhere);
                  player.LockView(INDYCLOTH_TOUCH);
                  player.Animate(loopLeft, 2, eOnce, eBlock);
                  player.UnlockView();
                  player.AddInventory(iGemBlue);
                  player.AddInventory(iGemRed);
                  player.Walk(player.x+10,  player.y, eBlock, eAnywhere);
                  player.Say("I believe this church holds many secrets.");
                  
                  CustomSave.Autosave();
                      
              } else if (pushCount > 3) {
                  player.Say("I think there's nothing more here.");
              }
          } else {
              Verbs.Unhandled();
          }
          break;
      default:
          Verbs.Unhandled();
          break;
    }  
  }
}


function room_RepExec()
{

}

void repeatedly_execute_always()
{
    if (cAgsvaldLevitating)
    {
        //Manage levitation
        int nextSpot = (currentLevitatingSpot + 1) % 3;
        int targetX = levitatingX[nextSpot];
        int targetY = levitatingY[nextSpot];
        
        if (cAgsvald.x == targetX && cAgsvald.y == targetY) {
            cAgsvald.StopAllTweens();
            currentLevitatingSpot = nextSpot;
            nextSpot = (currentLevitatingSpot + 1) % 3;
            cAgsvald.TweenPosition(2.0, levitatingX[nextSpot],  levitatingY[nextSpot], eEaseInEaseOutTween, eNoBlockTween);
        }
        
    }
}

function room_AfterFadeIn()
{
    if (forceStartFinalCustcene)
        EndingCutscene();
}

function hWallNotes_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();
  int x=88;
  int y=29;

  if (!isUpstairs()) { player.Say("I should go upstairs to do that."); return; }
  
  if (Verbs.MovePlayer(x,  y)) { //Use Tumbleweed's "delayed action" system.

    switch(usedAction){
      case eGA_7CoG_LookAt: 
          player.FaceDirection(eDirectionRight);
          player.Say(SmartString("VER:1.1DATA:There are some carvings in the wood here."));
          player.Say(SmartString("VER:1.1DATA:Unfortunately it's too dark up here to see what it represents."));
          break;
      case eGA_7CoG_UseInv:
          if (player.ActiveInventory == iOilLamp || player.ActiveInventory == iLighter || player.ActiveInventory == iOilLampLit) {
              player.Walk(x, y, eBlock);
              player.FaceDirection(eDirectionRight);
              Wait(1);
              
              //we need to move Indy down the Z axis because we need Indy (Y:34) to be on top 
              // of the light (Y:34) which is on top of the stairs walkbehind (Y:33).
              player.y = player.y+10;
              player.z = 10;
              
              oEnlightenedWall.Transparency = 100;
              oEnlightenedWall.Visible = true;
              Wait(1);
              oEnlightenedWall.TweenTransparency(0.5,  0, eEaseInTween, eBlockTween);
              Wait(GetGameSpeed()*3);
              player.SayAt(player.x - 70,  player.y, 200,  SmartString("VER:1.1DATA:Three dots drawn on five horizontal lines."));
              Wait(GetGameSpeed()*3);
              oEnlightenedWall.TweenTransparency(0.5,  100, eEaseInTween, eBlockTween);
              oEnlightenedWall.Visible = false;
              Wait(1);
              //player back to normal
              player.z = 0;
              player.y = player.y-10;
              Wait(1);
              
              player.Walk(player.x,  player.y +10);
              player.SayAt(player.x - 70,  player.y, 200,  SmartString("VER:1.1DATA:I'll be damned if that doesn't mean something."));

          } else {
              Verbs.Unhandled();
          }
          break;
      default:
          Verbs.Unhandled();
          break;
    }  
  }
}

function hExit_AnyClick()
{
  if (isUpstairs()) { player.Say("I should go downstairs to do that."); return; }
 
  Action usedAction = Verbs.GetUsedAction();

  if (usedAction == eGA_LookAt) {
    player.FaceLocation(105,  91);
    player.Say(SmartString("VER:1.1DATA:It looks windy outside."));
    return;
  }
  if (Verbs.MovePlayer(105,  110)) { //Use Tumbleweed's "delayed action" system.

    switch(usedAction){
      case eGA_WalkTo : 
          player.Walk(105,  90);
          break;
      default:
          Verbs.Unhandled(eHeavy);
          break;
    }  
  }
}
