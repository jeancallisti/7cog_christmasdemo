bool alreadyVisited;
bool alreadyVisited_AfterFadeIn;

function room_Load()
{
        //coming from Norway outside
        if (player.PreviousRoom == eRoom_102_NorwayOutside) {
        
        //player.ChangeView (INDYCLOTH_WALK);
        player.x = 158; player.y = 144;
        player.Walk (158, 152, eBlock, eWalkableAreas);
        }
  
  
  
  
    if (!alreadyVisited) {
        
        DialogsLogic.SetVarBool("hasVisitedIceCave", true);
        
        //Steam puzzle        
        SteamPuzzle.AddEntity("switch00", eSteamState_switchUp, eSteamType_switch,   oSwitch0);
        SteamPuzzle.AddEntity("switch01", eSteamState_switchDown, eSteamType_switch,  oSwitch1);
        SteamPuzzle.AddEntity("switch02", eSteamState_switchDown, eSteamType_switch,  oSwitch2);
        SteamPuzzle.AddEntity("switch03", eSteamState_switchUp, eSteamType_switch,  oSwitch3);
        SteamPuzzle.AddEntity("switch04", eSteamState_switchDown, eSteamType_switch,  oSwitch4);
     
        // leak objects
        SteamPuzzle.AddEntity("leak00", eSteamState_leakNotFixed, eSteamType_leak,  oLeak0);

        //steam objects
        SteamPuzzle.AddEntity("steam00", eSteamState_steamOn, eSteamType_steam,   oSteam0);
        SteamPuzzle.AddEntity("steam01", eSteamState_steamOn, eSteamType_steam,   oSteam1);
        SteamPuzzle.AddEntity("steam02", eSteamState_steamOff, eSteamType_steam,   oSteam2);
        SteamPuzzle.AddEntity("steam03", eSteamState_steamOff, eSteamType_steam,   oSteam3);
        SteamPuzzle.AddEntity("steam04", eSteamState_steamOff, eSteamType_steam,   oSteam4);
        SteamPuzzle.AddEntity("steam05", eSteamState_steamOff, eSteamType_steam,   oSteam5);
        SteamPuzzle.AddEntity("steam06", eSteamState_steamOff, eSteamType_steam,   oSteam6);
        SteamPuzzle.AddEntity("steam07", eSteamState_steamOff, eSteamType_steam,   oSteam7);
        SteamPuzzle.AddEntity("steam08", eSteamState_steamOff, eSteamType_steam,   oSteam8);
        SteamPuzzle.AddEntity("steam09", eSteamState_steamOff, eSteamType_steam,   oSteam9);
        SteamPuzzle.AddEntity("steam10", eSteamState_steamOff, eSteamType_steam,   oSteam10);
        SteamPuzzle.AddEntity("steam11", eSteamState_steamOff, eSteamType_steam,   oSteam11);
        SteamPuzzle.AddEntity("steam12", eSteamState_steamOff, eSteamType_steam,   oSteam12);
        
        //Some steam objects remain permanently invisible, even thoug they're here (to control power from other rooms output)
        oSteam11.Transparency = 100;
        oSteam10.Transparency = 100;
        oSteam9.Transparency = 100;
        oSteam8.Transparency = 100;
        oSteam7.Transparency = 100;
        
        
        
        #ifdef TESTING
        if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button

            CheckPoints.JumpDone(); //never forget to tell the engine we're done jumping. we do it immediately in case a cutscene would contain a 'ChangeRoom', thus calling 'isJumping' again

            if (CheckPoints.RequestedCheckpoint() == eChckpnt_104_NorwayIceCave) {
                player.x = 155;
                player.y = 155;

                alreadyVisited = true;
                
                player.AddInventory(iGum);
                player.AddInventory(iPaddlingOar);
            }
        } else {
            //nothing to do
        }
        #endif
        
        
    }
    

    PlayerUI.EnableAndShow();
    //FloatingHotspot.Enable();

    alreadyVisited = true;
}

function room_RepExec()
{
    
   
    
}

function oSwitch0_AnyClick()
{
  
    player.Walk (169, 163, eBlock, eWalkableAreas);
    SteamPuzzle.Interact(oSwitch0);
}

function oSwitch1_AnyClick()
{
  
    player.Walk (149, 151, eBlock, eWalkableAreas);
    SteamPuzzle.Interact(oSwitch1);
}

function oSwitch2_AnyClick()
{
    player.Walk (135, 148, eBlock, eWalkableAreas);
    SteamPuzzle.Interact(oSwitch2);

}

function oLeak0_AnyClick()
{
    SteamPuzzle.Interact(oLeak0);
}

function oSwitch3_AnyClick()
{
    player.Walk (110, 153, eBlock, eWalkableAreas);
    SteamPuzzle.Interact(oSwitch3);
}

function oSwitch4_AnyClick()
{
    player.Walk (114, 143, eBlock, eWalkableAreas);
    SteamPuzzle.Interact(oSwitch4);
}


function region1_WalksOnto()
{
    player.StopMoving();
    player.Walk(player.x,  player.y - 2, eBlock, eAnywhere);
    player.LockView(INDYCLOTH_CROUCH);
    Wait(10);
    player.LockView(INDYCLOTH_CRAWL);
    Wait(10);
    
    player.ChangeRoom(eRoom_102_NorwayOutside,  700,  125);
}

function oJewel_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();
  int x=140;
  int y=143;
  int loopRight = 2;
  
  switch(usedAction){
    case eGA_7CoG_LookAt: 
        player.FaceLocation(x, y);
        player.Say("Talk about tantalizing!");
        break;
    case eGA_7CoG_PickUp:        
        player.Say("Climbing up a steep wall made of smooth ice? Sounds easy... and safe.");
        break;
    case eGA_7CoG_UseInv:  
    
        //In version 1.1 Indy has to use the whip instead of the paddling oar
        if (player.ActiveInventory == iWhip) {
            if (Verbs.MovePlayer(108, 150)) {
              player.FaceDirection(eDirectionRight, eBlock);
              //Whip animation
              player.Say(SmartString("Let's see if I can still aim properly."));
              player.LockView(INDYCLOTH_WHIP);
              player.Animate(0, 5, eOnce, eNoBlock);
              Wait(140);
              
              //Jewel falls before whip finished
              oJewel.TweenPosition(1.0, oJewel.X, 145, eEaseInTween, eNoBlockTween);
              Wait(30);
              
              //Finish whip animation
              player.UnlockView();
              Wait(1);
              
              //Indy walks under the jewel
              player.Walk(150,  145, eNoBlock, eAnywhere);
              Wait(20);
              
              player.LockView(INDYCLOTH_CROUCH);
              Wait(20);
              player.AddInventory(iGemYellow);
              oJewel.Visible=false;
              player.UnlockView();
              player.Walk(player.x,  player.y+5);
              player.Say("At least Marcus won't tell it's wasn't worth buying my ticket to Norway.");
              
              

              


              CustomSave.Autosave();

            }
  
        }
        //This is obsolete in version 1.1 as the paddling oar has been removed
        else if (player.ActiveInventory == iPaddlingOar) {
            player.Say("It's not jousting, but almost.");
            player.Walk(x, y, eBlock);
            player.LockView(INDYCLOTH_PADDLEWIGGLE);
            player.Animate(0, 5, eOnce, eBlock);
            Wait(60);
            player.UnlockView();
            
            oJewel.X = oJewel.X-1;
            Wait(30);
            oJewel.TweenPosition(1.0, oJewel.X, 145, eEaseInTween, eNoBlockTween);
            Wait(60);
            player.LockView(INDYCLOTH_CROUCH);
            Wait(20);
            player.AddInventory(iGemYellow);
            oJewel.Visible=false;
            player.UnlockView();
            player.Walk(player.x,  player.y+5);
            player.Say("At least Marcus won't tell it's wasn't worth buying my ticket to Norway.");
            
            CustomSave.Autosave();
        // End of obsolete section     
        } else if (player.ActiveInventory == iShovel){
            player.Walk(x, y, eBlock);
            player.FaceDirection(eDirectionUp, eBlock);
            player.Say("It's way too short!");
            
        } else {
            Verbs.Unhandled();
        }
        break;
    default:
        Verbs.Unhandled();
        break;
  }  
}

function room_AfterFadeIn()
{
    if (!alreadyVisited_AfterFadeIn) {
      
        CustomSave.Autosave();
          
        ProgressMetrics.ReportProgress(eProgressIceCave);


        player.FaceDirection(eDirectionLeft);
        Wait(40);
        player.FaceDirection(eDirectionRight);
        Wait(40);
        player.FaceDirection(eDirectionLeft);
        Wait(40);
        player.Say("Well, well, well.");
        player.Say(" It seems our friend Agsvald kept some secrets after all.");
        alreadyVisited_AfterFadeIn = true;
    }
}

function hLongboat_AnyClick()
{
  eObjectType objType=eHeavy;

  Action usedAction = Verbs.GetUsedAction();
  int x=140;
  int y=143;
  int loopRight = 2;
  
  switch(usedAction){
    case eGA_7CoG_LookAt: 
        player.FaceLocation(x, y);
        player.Say("Up and ready to sail!");
        Wait(30);
        player.Say("...Or to raid.");
        break;
    default:
        Verbs.Unhandled(objType);
        break;
  }  
}

function hMetalNotes_AnyClick()
{
  eObjectType objType=eHeavy;

  Action usedAction = Verbs.GetUsedAction();
  int x=145;
  int y=155;
  
  switch(usedAction){
    case eGA_7CoG_LookAt: 
        if (Verbs.MovePlayer(x,  y)) {
            player.FaceDirection(eDirectionUp);
            player.Say(SmartString("VER:1.1DATA:Five horizontal rows."));
            player.Say(SmartString("VER:1.1DATA:Each of them has one or several pipes running into it."));
            player.Say(SmartString("VER:1.1DATA:With a bit of work I could direct steam into some of them."));
        }
        break;
    default:
        Verbs.Unhandled(objType);
        break;
  }  
}
