/*
 * SnowRainPS module script
 * AGS Version: 3.0 and later.
 * Author: Aditya Jaieel (helios123)
 * Version: 1.0
 * Copyright (C) 2010 Aditya Jaieel (helios123)
 *
 * License: 
 * --------
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


 
#define REGION_COUNT  15 //a room can have a maximum of this many regions
#define MAX_RECT_COUNT 50 //maximum rects that can be created
#define DEF_REGION_LOOP_COUNT 25 //the maximum number of loops the particle can stay visible after entering a region
#define MIN_PARTICLE_LIFE 5 //minimum life in a rect or a region
#define MIN_HEIGHT_ABOVE_BASE 5 //height from bottom for an overlay particle colliding with an object
#define MAX_TRANSPARENCY 75 //maximum transparency a particle can attain
#define MIN_TRANSPARENCY 25 //minimum transparency a particle can attain
#define TRANS_DIFF 50 //MAX_TRANSPARENCY - MIN_TRANSPARENCY
#define MAX_NO_WIND_DEV 3 //x co-ordinate of snow particles will vary by this amount max. when no wind is present.

//Variables
int xcoords[]; //array of x co-ordinates
int ycoords[]; //array of y co-ordinates
int trans[]; //array of transparency of each particle. This changes when the particle enters a region or rect.
int particleType[]; //array of particle types
int particleLifeInRectOrRegion[]; //array number of loops a particle will live after entering a rect or region
int rotAngles[]; //array of angle of rotations
int spriteSlots[]; //array of sprite slot numbers for each particle
int yMin[]; //minimum value of y from where the particles start disappearing
int yMax[]; //maximum value of y from where the particles start disappearing
int xMin[]; //minimum value of x from where the particles start disappearing
int xMax[]; //maximum value of x from where the particles start disappearing
int xIncArray[]; //array of x axis increments
int yIncArray[]; //array of y axis increments
int rotIncArray[]; //array of rotation increments
bool regions[REGION_COUNT]; //array containing status of which regions are to be used for particles for disappearing
int maxLifeInRegion[REGION_COUNT]; //array of maximum number of loops the particle can stay visible after entering a region

function SnowRainPS_Data::SetParticleSystemIncrements(int xIncrement, int yIncrement, int rotIncrement)
{
  if(xIncrement > 0)
  {
    this.xInc = xIncrement;
  }
  if(yIncrement > 0)
  {
    this.yInc = yIncrement;
  }
  if(rotIncrement >= 0)
  {
    this.rotInc = rotIncrement;
  }
  
  int i = 0;
  while(i < this.totalParticleCount)
  {
    xIncArray[i] = 1 + Random(this.xInc - 1);
    yIncArray[i] = 1 + Random(this.yInc - 1);
    rotIncArray[i] = this.rotInc;
    if(this.rotInc > 1)
    {
      rotIncArray[i] = 1 + Random(this.rotInc - 1);
    }
    
    i++;
  }
}

function SnowRainPS_Data::ParticleSystemEnableRegion(int regionID, int lifeInRegion)
{
  if((regionID >=1) && (regionID <= 15))
  {
    regionID--;
    regions[regionID] = true;
    if(lifeInRegion < 0)
    {
      lifeInRegion = DEF_REGION_LOOP_COUNT;
    }
    maxLifeInRegion[regionID] = lifeInRegion;
  }
}

function SnowRainPS_Data::ParticleSystemDisableRegion(int regionID)
{
  if((regionID >=1) && (regionID <= 15))
  {
    regions[regionID - 1] = false;
  }
}

function SnowRainPS_Data::ParticleSystemAddRect(int left, int top, int right, int bottom)
{
  if((left > 0) && (top > 0) && (right > 0) && (bottom > 0) && (this.rectCount < MAX_RECT_COUNT))
  {
    int temp;
    if(left > right)
    {
      temp = left;
      left = right;
      right = temp;
    }
    
    if(top > bottom)
    {
      temp = bottom;
      bottom = top;
      top = temp;
    }
    
    if(right > Room.Width)
    {
      right = Room.Width;
    }
    
    if(bottom > Room.Height)
    {
      bottom = Room.Height;
    }
    
    xMin[this.rectCount] = left;
    xMax[this.rectCount] = right;
    yMin[this.rectCount] = top;
    yMax[this.rectCount] = bottom;
    this.rectCount++;
  }
}

function SnowRainPS_Data::ParticleSystemRemoveLastRect()
{
  if(this.rectCount >= 0)
  {
    this.rectCount--;
  }
}

protected function SnowRainPS_Data::IsObscuredBy(int index)
{
  bool obscured = false;
  
  if(this.collisionDetect)
  {
    Object *objAtXY = Object.GetAtScreenXY(xcoords[index], ycoords[index]);
    Character *charAtXY = Character.GetAtScreenXY(xcoords[index], ycoords[index]);
    
    if((objAtXY != null) && objAtXY.Visible)
    {
      if(index >= this.particleCount)//overlay particle
      {
        obscured = objAtXY.Solid && ((ycoords[index] - objAtXY.Y) < MIN_HEIGHT_ABOVE_BASE);
      }
      else
      {
        obscured = true;
      }
    }
    else if(charAtXY != null)
    {
      obscured = charAtXY.Solid;
    }
  }
  
  return obscured;
}

function SnowRainPS_Data::SetParticleSystemData(SnowRainPS_ParticleSystemType ps, SnowRainPS_WindDirectionType direction)
{
  if(ps != NO_CHANGE_PARTICLE)
  {
    this.systemType = ps;
  }
  if(direction != NO_CHANGE_WIND)
  {
    this.windDirection = direction;
  }
}

function SnowRainPS_Data::SetParticleSystemSpriteData(int slotNumber, int imageCount)
{
  this.newSpriteCount = imageCount;
  this.newSpriteSlot = slotNumber;
}

protected function SnowRainPS_Data::RandomSpriteNumber()
{
  int tempSlot = this.spriteSlot;
  if(this.spriteImages > 1)
  {
    int randomIncrement = Random(this.spriteImages - 1);
      tempSlot += randomIncrement;
  }
  
  return tempSlot;
}

protected function SnowRainPS_Data::UpdateSpritesArray(int index)
{
  if(index >= 0)
  {
    spriteSlots[index] = this.RandomSpriteNumber();
  }
  else
  {
    int i = 0;
    while(i < this.totalParticleCount)
    {
      spriteSlots[i] = this.RandomSpriteNumber();
      i++;
    }
  }
}

protected function SnowRainPS_Data::SetInitialCoordinates(int index, bool ignoreWindDirection)
{
  if(this.active)
  {
    if((xcoords[index] < 0) && (ycoords[index] < 0)) //the co-ordinates were of a particle which was not rendered
    {
      ignoreWindDirection = ((index % 2) == 0); //so ignore the wind direction for some
    }
    xcoords[index] = Random(Room.Width);
    ycoords[index] = Random(Room.Height);
    xIncArray[index] = 1 + Random(this.xInc - 1);
    yIncArray[index] = 1 + Random(this.yInc - 1);
    rotIncArray[index] = this.rotInc;
    if(this.rotInc > 1)
    {
      rotIncArray[index] = 1 + Random(this.rotInc - 1);
    }
    particleLifeInRectOrRegion[index] = -1;
    trans[index] = MIN_TRANSPARENCY;
    
    if(this.systemType == SNOW_AND_RAIN)
    {
      //SNOW = 0, RAIN = 1
      particleType[index] = Random(1);
    }
    else
    {
      particleType[index] = this.systemType;
    }
    
    if(this.rotInc > 0)
    {
      rotAngles[index] = 1 + Random(358);
    }
    else
    {
      rotAngles[index] = 0;
    }
    
    if(!ignoreWindDirection)
    {
      if(this.windDirection == LEFT_TO_RIGHT_DIAGONAL) //make starting point towards the left of the screen
      {
        if(xcoords[index] > ycoords[index])
        {
          xcoords[index] -= ycoords[index];
          ycoords[index] = 0;
        }
        else
        {
          ycoords[index] -= xcoords[index];
          xcoords[index] = 0;
        }
      }
      else if(this.windDirection == RIGHT_TO_LEFT_DIAGONAL) //make starting point towards the right of the screen
      {
        int xdelta = Room.Width - xcoords[index];
        if(xdelta > ycoords[index])
        {
          xcoords[index] += ycoords[index];
          ycoords[index] = 0;
        }
        else
        {
          ycoords[index] -= xdelta;
          xcoords[index] += xdelta;
        }
      }
      else if(this.windDirection == LEFT_TO_RIGHT_HORIZONTAL)//set x co-ordinate to 0
      {
        xcoords[index] = 0;
      }
      else if(this.windDirection == RIGHT_TO_LEFT_HORIZONTAL)//set x co-ordinate to Room.Width
      {
        xcoords[index] = Room.Width;
      }
      else //no wind, so set starting point along the top of the screen
      {
        ycoords[index] = Random(10);
      }
    }
    //set sprite image
    this.UpdateSpritesArray(index);
  }
  else
  {
    xcoords[index] = -1;
    ycoords[index] = -1;
  }
}

function SnowRainPS_Data::SetParticleSystemOverlayPercent(int overlayPerc)
{
  if(overlayPerc < 0)
  {
    overlayPerc = 50;
  }
  else if(overlayPerc > 100)
  {
    overlayPerc = 100;
  }
  
  if(overlayPerc != 0)
  {
    this.overlayCount = this.totalParticleCount*overlayPerc/100;
  }
  else
  {
    this.overlayCount = 0;
  }
  
  this.overlayPerc = overlayPerc;
  this.particleCount = this.totalParticleCount - this.overlayCount;
}

function SnowRainPS_Data::InitParticleSystem(SnowRainPS_ParticleSystemType ps,  int spriteNumber, int numSprites, SnowRainPS_WindDirectionType direction, int numParticles, int overlayPerc, int xIncrement, int yIncrement, int rotIncrement)
{  
  bool doInit = true;
  bool tempBool;
  String errMsg = "ParticleSystem Init failed as:\n";
  
  tempBool = (ps != NO_CHANGE_PARTICLE);
  doInit = doInit && tempBool;
  if(!tempBool)
  {
    errMsg = errMsg.Append(String.Format("Particle system type cannot be NO_CHANGE_PARTICLE in init.\n"));
  }
  
  tempBool = (direction != NO_CHANGE_WIND);
  doInit = doInit && tempBool;
  if(!tempBool)
  {
    errMsg = errMsg.Append(String.Format("Wind direction cannot be NO_CHANGE_WIND in init.\n"));
  }
  
  tempBool = (spriteNumber > 0);
  doInit = doInit && tempBool;
  if(!tempBool)
  {
    errMsg = errMsg.Append(String.Format("Sprite slot %d is not proper.\n", spriteNumber));
  }
  
  if(doInit) //check if a valid sprite is given
  {
    //initialize the variables
    this.SetParticleSystemData(ps,  direction);
    if(numParticles <= 0)
    {
      numParticles = 50; //default if value less than or equal to zero
    }
    
    this.totalParticleCount = numParticles;
    
    this.SetParticleSystemOverlayPercent(overlayPerc);
    
    this.spriteSlot = spriteNumber; //the sprite slot number
    this.spriteImages = 1;
    if(numSprites > 0)
    {
      this.spriteImages = numSprites;
    }
    
    xcoords = new int[numParticles];
    ycoords = new int[numParticles];
    spriteSlots = new int[numParticles];
    rotAngles = new int[numParticles];
    particleType = new int[numParticles];
    particleLifeInRectOrRegion = new int[numParticles];
    trans = new int[numParticles];
    xIncArray = new int[numParticles];
    yIncArray = new int[numParticles];
    rotIncArray = new int[numParticles];
    
    yMax = new int[MAX_RECT_COUNT];
    yMin = new int[MAX_RECT_COUNT];
    xMax = new int[MAX_RECT_COUNT];
    xMin = new int[MAX_RECT_COUNT];
    this.rectCount = 0;
    
    this.theOverlay = null;
    this.bgChanged = false;
    this.active = true;
    this.SetParticleSystemIncrements(xIncrement,  yIncrement, rotIncrement);
    this.collisionDetect = false;
    this.enableTransParency = false;
    this.xincflag = 1;
    
    //create initial co-ordinates
    int i = 0;
    while(i < (this.particleCount+this.overlayCount))
    {
      this.SetInitialCoordinates(i, true);
      i++;
    }
    
    i = 0;
    while(i < REGION_COUNT)
    {
      regions[i] = false;
      i++;
    }
    
    //set pointers
    this.dsRoom = null;
    i = 0;
    while(i < 5)
    {
      this.dsBackup[i] = null;
      i++;
    }
    this.dsSprite = null;
  }
  else
  {
    AbortGame(errMsg.Append("\nPlease check your script."));
  }
}

function SnowRainPS_Data::ShutdownParticleSystem()
{
  if((this.particleCount + this.overlayCount) > 0)
  {
    //remove the overlay
    if(this.theOverlay != null)
    {
      this.theOverlay.Remove();
      this.theOverlay = null;
    }
    
    if(this.theSprite != null)
    {
      this.theSprite.Delete();
      this.theSprite = null;
    }
    
    //restore the background. AGS does this automatically, but only when the room is unloaded.
    if(this.dsBackup[0] != null)
    {
      int i = 0;
      while(i < 5)
      {
        if(this.dsBackup[i] != null)
        {
          this.dsRoom = Room.GetDrawingSurfaceForBackground(i);
          this.dsRoom.DrawSurface(this.dsBackup[i]);
          this.dsBackup[i].Release();
          this.dsRoom.Release();
          this.dsBackup[i] = null;
        }
        i++;
      }
    }
    
    if(this.dsSprite != null)
    {
      this.dsSprite.Release();
      this.dsSprite = null;
    }
    
    //initialize the variables to invalid values, so that a call to InitParticleSystem is required.
    this.particleCount = -1;
    this.spriteSlot = -1;
    this.overlayCount = -1;
    this.newSpriteCount = -1;
    this.newSpriteSlot = -1;
    this.spriteImages = -1;
    this.totalParticleCount = -1;
    this.dsRoom = null;
    this.bgChanged = false;
    this.collisionDetect = false;
    this.rectCount = -1;
    this.active = false;
    this.xInc = 1;
    this.yInc = 1;
    this.rotInc = 0;
  }
}

//START SEVEN CITIES MODIFICATIONS
function SnowRainPS_Data::SetRenderRegion(int top,  int left,  int bottom,  int right)
{
    this.renderToRegion = true;
    this.render_bottom = bottom;
    this.render_top = top;
    this.render_left = left;
    this.render_right = right;
    
}
//END SEVEN CITIES MODIFICATIONS

  
function SnowRainPS_Data::ChangeRoomBackground(int backgroundNumber)
{
  this.bgChanged = true;
  this.newBgNo = backgroundNumber;
}

protected function SnowRainPS_Data::IsParticleInRoom(int index)
{
  return ((xcoords[index] >= 0) && (ycoords[index] >= 0) && (xcoords[index] <= Room.Width) && (ycoords[index] <= Room.Height));
}

protected function SnowRainPS_Data::IsParticleInRect(int index)
{
  bool inRect = false;
  
  if((this.rectCount > 0) && (index < this.totalParticleCount))
  {
    int i = 0;
    while((!inRect) && (i < this.rectCount))
    {
      inRect = ((xcoords[index] >= xMin[i]) && (xcoords[index] <= xMax[i]) && (ycoords[index] >= yMin[i]) && (ycoords[index] <= yMax[i]));
    
      if(inRect)
      {
        if(particleLifeInRectOrRegion[index] == -1)
        {
          particleLifeInRectOrRegion[index] = MIN_PARTICLE_LIFE + Random(yMax[i] - yMin[i]-MIN_PARTICLE_LIFE);
          if(index >= this.particleCount) //it is an overlay particle
          {
            particleLifeInRectOrRegion[index] += (yMax[i] - yMin[i])/2;
          }
        }
        
        //update transparency
        if(this.enableTransParency && (particleLifeInRectOrRegion[index] < TRANS_DIFF))
        {
          trans[index]++;
        }
        
        particleLifeInRectOrRegion[index]--;
        inRect = (particleLifeInRectOrRegion[index] == 0);
        //since this particle is already tagged to a rect, break out of the loop
        i = this.rectCount;
      }
            
      i++;
    }
  }
  return inRect;
}

protected function SnowRainPS_Data::IsParticleInRegion(int index)
{
  bool inRegion = false;
  
  if(index < this.totalParticleCount)
  {
    /*
     * here it is important to note that regions[0] is the status for region id 1,
     * regions[1] is the status for region id 2, and so on.
     */
    Region *current_region = Region.GetAtRoomXY(xcoords[index], ycoords[index]);
    
    if(current_region.ID > 0) //check if region is active
    {
      inRegion = regions[current_region.ID-1];
    }

    if(inRegion)
    {
      if(particleLifeInRectOrRegion[index] == -1)
      {
        particleLifeInRectOrRegion[index] = MIN_PARTICLE_LIFE + Random(maxLifeInRegion[current_region.ID-1]-MIN_PARTICLE_LIFE);
        if(index >= this.particleCount) //it is an overlay particle
        {
          particleLifeInRectOrRegion[index] += maxLifeInRegion[current_region.ID-1]/2;
        }
      }
     
      //update transparency
      if(this.enableTransParency && (particleLifeInRectOrRegion[index] < TRANS_DIFF))
      {
        trans[index]++;
      }
        
      particleLifeInRectOrRegion[index]--;
      inRegion = (particleLifeInRectOrRegion[index] == 0);
      //since this particle is already tagged to a region, break out of the loop
    }
  }
  return inRegion;
}

protected function SnowRainPS_Data::UpdateCoords(int index)
{
  if((xcoords[index] >= 0) && (ycoords[index] >= 0)) //this will be true for particles to be rendered
  {
    //Update rotation. Not logical for rain.    
    if((this.rotInc > 0) && (particleType[index] == SNOW))
    {
      rotAngles[index] = ((rotAngles[index] + rotIncArray[index])%359);
      if(rotAngles[index] == 0)
      {
        rotAngles[index] = 1;
      }
    }
    
    //if((this.xInc > 0) && (this.yInc > 0)) //update the co-ordinates
    {
      if((this.windDirection == LEFT_TO_RIGHT_DIAGONAL) || (this.windDirection == LEFT_TO_RIGHT_HORIZONTAL))
      {
        if(particleType[index] == SNOW)
        {
          xcoords[index] += Random(xIncArray[index]); //x co-ordinate always increases
        }
        else
        {
          xcoords[index] += xIncArray[index]; //x co-ordinate always increases
        }
      }
      else if((this.windDirection == RIGHT_TO_LEFT_DIAGONAL) || (this.windDirection == RIGHT_TO_LEFT_HORIZONTAL))
      {
        if(particleType[index] == SNOW)
        {
          xcoords[index] -= Random(xIncArray[index]); //x co-ordinate always decreases
        }
        else
        {
          xcoords[index] -= xIncArray[index]; //x co-ordinate always decreases
        }
      }
      else //if wind direction is NO_WIND
      {
        if(particleType[index] == SNOW)
        {
          xcoords[index] += (this.xincflag * Random(xIncArray[index]) % MAX_NO_WIND_DEV);
        }
        //if wind direction is none, then no need to do anything to x co-ordinate 
      }  

      if((this.windDirection != LEFT_TO_RIGHT_HORIZONTAL) && (this.windDirection != RIGHT_TO_LEFT_HORIZONTAL))
      {
        //This does not look realistic. Uncomment if required
        /*if(particleType[index] == SNOW)
        {
          ycoords[index] += Random(yIncArray[index]); //to give the floating effect
        }
        else*/
        {
          ycoords[index] += yIncArray[index]; //y co-ordinate always increases
        }
      }
    }
  }
  if(this.IsParticleInRect(index) || this.IsParticleInRegion(index) || (!this.IsParticleInRoom(index)) || this.IsObscuredBy(index))
  {
    this.SetInitialCoordinates(index, false);
  }
}

function SnowRainPS_Data::RenderParticles()
{
  if(this.totalParticleCount > 0)
  {    
    if(this.bgChanged) //update background if required
    {
      SetBackgroundFrame(this.newBgNo);
      this.bgChanged = false;
    }
    
    //update sprite slot number and number of sprites if changed
    if(this.newSpriteCount > 1)
    {
      if(this.newSpriteCount != this.spriteImages)
      {
        this.spriteImages = this.newSpriteCount;
        this.newSpriteCount = -1;
      }
      else
      {
        this.newSpriteCount = -1;
      }
    }
    
    if(this.newSpriteSlot > 1)
    {
      if(this.newSpriteSlot != this.spriteSlot)
      {
        this.spriteSlot = this.newSpriteSlot;
        this.newSpriteSlot = -1;
      }
      else
      {
        this.newSpriteSlot = -1;
      }
    }
    
    int currentFrame = GetBackgroundFrame();
    this.dsRoom = Room.GetDrawingSurfaceForBackground(currentFrame); //get room's background
    
    //this copies (or creates) the appropriate backup copy to remove the old frame
    //This also works when AGS cycles through the rooms backgrounds.
    //Note that calling SetBackgroundFrame from a different script may not always work, as order of
    //execution is not guaranteed.
    if(this.dsBackup[currentFrame] != null)
    {
      this.dsRoom.DrawSurface(this.dsBackup[currentFrame]);
    }
    else
    {
      this.dsBackup[currentFrame] = this.dsRoom.CreateCopy();
    }
    
    //if(this.active) //draw sprites only if active flag is true
    {
      //the drawing logic
      if(this.theSprite != null)
      {
        this.theSprite.Delete();
        //this.theSprite = null;
      }
      
      
      int top, left, right, bottom;
      int draw_x; int draw_y;
      if (this.renderToRegion) {
        top=this.render_top;left=this.render_left;
        bottom=this.render_bottom;right=this.render_right;
        this.theSprite = DynamicSprite.Create(right-left, bottom-top);
      }else {
        this.theSprite = DynamicSprite.Create(Room.Width, Room.Height); //TODO (seven cities) : original code uses room's w&h rather than viewport's w&h. Is it a good idea?
        top=0;left=0;
        bottom=System.ViewportHeight;right=System.ViewportWidth;
      }
      
      
      if(this.dsSprite != null)
      {
        this.dsSprite.Release();
        this.dsSprite = null;
      }
      this.dsSprite = this.theSprite.GetDrawingSurface();
      //this.dsSprite.Clear(Game.GetColorFromRGB(100, 50, 50)); //DEBUG
      int i = 0;
      this.xincflag = (-1 * this.xincflag); //to create the wavy effect of falling
      while( i < this.totalParticleCount)
      {
        if (this.renderToRegion) {
            draw_x = xcoords[i] - left;
            draw_y = ycoords[i] - top;
        }else {
            draw_x = xcoords[i];
            draw_y = ycoords[i];
        }
      
        DynamicSprite *spriteImage = DynamicSprite.CreateFromExistingSprite(spriteSlots[i], true);
        spriteImage.Tint(50, 50, 50, 30, 25);
        //rotate only snow particles
        if((rotAngles[i] > 0) && (particleType[i] == SNOW))
        {
          spriteImage.Rotate(rotAngles[i]);
        }
        if((xcoords[i] >= left) && (ycoords[i]>= top) && (xcoords[i] < right) && (ycoords[i] < bottom))
        {
          if(i < this.particleCount) //some of the sprites are drawn onto room background...
          {
            this.dsRoom.DrawImage(xcoords[i], ycoords[i], spriteImage.Graphic, trans[i], spriteImage.Width, spriteImage.Height);
            
            //if system is rain and snow, and particle is rain, then draw more images to make the particle look
            //like a rain particle
            //trans[i] will depend upon whether enableTransparency is true or false
            if((this.systemType == SNOW_AND_RAIN) && (particleType[i] == RAIN))
            {
              this.dsRoom.DrawImage(xcoords[i], ycoords[i]-spriteImage.Height, spriteImage.Graphic, trans[i], spriteImage.Width, spriteImage.Height);
              this.dsRoom.DrawImage(xcoords[i], ycoords[i]+spriteImage.Height, spriteImage.Graphic, trans[i], spriteImage.Width, spriteImage.Height);
            }
          }
          else //..while the rest is drawn onto dynamic sprite (this gives a sensation of "below" and "above" when character walks inbetween)
          {
              
            //delete 0 and uncomment trans[i] to enable transparency on overlays.
            
            this.dsSprite.DrawImage(draw_x, draw_y, spriteImage.Graphic, 0/*trans[i]*/, spriteImage.Width, spriteImage.Height);
            
            //if system is rain and snow, and particle is rain, then draw more images to make the particle look
            //like a rain particle
            if((this.systemType == SNOW_AND_RAIN) && (particleType[i] == RAIN))
            {
              this.dsSprite.DrawImage(draw_x, draw_y-spriteImage.Height, spriteImage.Graphic, 0/*trans[i]*/, spriteImage.Width, spriteImage.Height);
              this.dsSprite.DrawImage(draw_x, draw_y+spriteImage.Height, spriteImage.Graphic, 0/*trans[i]*/, spriteImage.Width, spriteImage.Height);
            }
          }
        }
        spriteImage.Delete();
        
        this.UpdateCoords(i);
        
        i++; //go to next particle's co-ordinates
      }
    }
    if(this.dsRoom != null)
    {
      this.dsRoom.Release(); //release the room's background
      this.dsRoom = null;
    }
    if(this.dsSprite != null)
    {
      this.dsSprite.Release(); //release the dynamic sprite's background
      this.dsSprite = null;
    }
    
    //draw the dynamic sprite onto a graphical ovarlay
    if((this.theOverlay != null) && this.theOverlay.Valid)
    {
      this.theOverlay.Remove();
      this.theOverlay = null;
    }
    if(this.theSprite != null)
    {
      if (this.renderToRegion)
      {
         //we do nothing : 
         //-we don't create an overlay (it will be the scripter's repsonsibility to use the generated sprite)
         //-we don't delete the sprite (otherwise it will be unusable by room)
      }
      else
      {
          this.theOverlay = Overlay.CreateGraphical(0, 0, this.theSprite.Graphic, true);
          this.theSprite.Delete();
          this.theSprite = null;
      }
    }
  }
}