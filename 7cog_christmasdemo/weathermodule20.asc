// Main script for module 'Environment Effects'
WeatherModule weather;

DynamicSprite* drawingSprite;


int WeatherModule::RandomBoundries(int min, int max) {
  int temp_rand;
  if ((max-min) < 0) temp_rand = (max-min) *(-1);
  else temp_rand = max-min;
  return (Random(temp_rand) + min);
}

static function WeatherModule::Init(int spritecount, int x_offset, int y_offset, bool single_overlay ) {
  weather.spritecount  = spritecount;
  Weather_sprites   = new DynamicSprite[weather.spritecount];
  if (!single_overlay)
    Weather_enveffect = new Overlay[weather.spritecount];

  Weather_Xparticle = new int[weather.spritecount];
  Weather_Yparticle = new int[weather.spritecount];
  
  Weather_slots     = new int[weather.spritecount];    
  weather.x_offset = x_offset;
  weather.y_offset = y_offset; 
  weather.single_overlay = single_overlay;
}  

static function WeatherModule::SetSprite(int slot, int sprite) {
  if (slot <= weather.spritecount)
    Weather_slots[slot] = sprite;
  else Display("%d",weather.spritecount);
}

static function WeatherModule::SetOffset(int x_offset, int y_offset) {
  weather.x_offset = x_offset;
  weather.y_offset = y_offset;
}
static function WeatherModule::SetBorders(int x_min, int x_max, int y_top, int y_bottom) {
  weather.x_min     = x_min;
  weather.x_max     = x_max;
  weather.y_top     = y_top;
  weather.y_bottom  = y_bottom;
}

static function WeatherModule::Start(int envfallingspeed, int envwindspeed, bool pixel_only, int x_jitter, int y_jitter, int x_min,  int x_max,  int y_top, int y_bottom) {
  //START SEVEN CITIES MODIFICATIONS
  
  weather.delayCount=0;
  //END SEVEN CITIES MODIFICATIONS

  int i;
  weather.fallingspeed = envfallingspeed;
  weather.windspeed = envwindspeed;
  weather.weathergoing = true;
  weather.pixel_only = pixel_only;
  weather.x_jitter = x_jitter;
  weather.y_jitter = y_jitter;
  weather.y_top     = y_top;
  weather.y_bottom  = y_bottom;
  weather.x_min = x_min;
  weather.x_max = x_max;
  int temp_x, temp_y;
  if (envfallingspeed == 0 && envwindspeed==0) {
    Display ("Speed values can't be 0 at the same time");
    return false;
  }
  
  // make it rain, if no sprites have been supplied
  if (Weather_slots[0]==0 && weather.pixel_only==false) {
    weather.pixel_only = true;
    i=0;
    while (i <weather.spritecount) {Weather_slots[i]=1;i++;}
  }
  
  if (weather.pixel_only == true) {
    i = 0;   
    while (i < weather.spritecount ) {
      Weather_sprites[i] = DynamicSprite.Create(2, 2, false);
      DrawingSurface *surface = Weather_sprites[i].GetDrawingSurface();    
      surface.DrawingColor = Weather_slots[i];
      surface.DrawPixel(1, 1);
      surface.Release();
      i++;
    }
  }  
  
  if (weather.fallingspeed > 0) {
    i = 0;

    while (i < weather.spritecount ) {
      temp_x = weather.RandomBoundries(weather.x_min, weather.x_max);

      Weather_Xparticle[i] = temp_x;
        
      if (i%2==0) {
        temp_y = weather.RandomBoundries(weather.y_top-weather.y_offset, weather.y_bottom);

        Weather_Yparticle[i] = temp_y;
        
        if(!weather.single_overlay)
        {
          if (weather.pixel_only) Weather_enveffect[i] = Overlay.CreateGraphical(temp_x, temp_y, Weather_sprites[i].Graphic, false);
          else                 Weather_enveffect[i] = Overlay.CreateGraphical(temp_x, temp_y, Weather_slots[i], true);
        } else {
          //do nothing
        }
      }
      else {
        temp_y = weather.RandomBoundries(weather.y_top, weather.y_bottom);

        Weather_Yparticle[i] = temp_y;

        if(!weather.single_overlay)
        {
          if (weather.pixel_only) Weather_enveffect[i] = Overlay.CreateGraphical(temp_x, temp_y, Weather_sprites[i].Graphic, false);
          else                 Weather_enveffect[i] = Overlay.CreateGraphical(temp_x, temp_y, Weather_slots[i], true);
        } else {
          //do nothing
        }
      }
      i++;
    }
  }
    
  if (weather.fallingspeed < 0) {
    i = 0;

    while (i < weather.spritecount ) {
      temp_x = weather.RandomBoundries(weather.x_min, weather.x_max);
      
      Weather_Xparticle[i] = temp_x;

      if (i%2==0) {
        if(!weather.single_overlay)
        {
        temp_y = weather.RandomBoundries(weather.y_bottom-weather.y_offset, weather.y_bottom);

        Weather_Yparticle[i] = temp_y;

        if (weather.pixel_only) Weather_enveffect[i] = Overlay.CreateGraphical(temp_x, temp_y,  Weather_sprites[i].Graphic, false);
        else                 Weather_enveffect[i] = Overlay.CreateGraphical(temp_x, temp_y,  Weather_slots[i], true);
        } else {
          //do nothing
        }
      }
      else
      {
        temp_y = weather.RandomBoundries(weather.y_bottom-weather.y_offset, weather.y_bottom);
 
        Weather_Yparticle[i] = temp_y;

       if(!weather.single_overlay)
        {
          if (weather.pixel_only)  Weather_enveffect[i] = Overlay.CreateGraphical(temp_x, temp_y, Weather_sprites[i].Graphic, false);
          else                  Weather_enveffect[i] = Overlay.CreateGraphical(temp_x, temp_y, Weather_slots[i], true);
        } else {
          //do nothing
        }      
      }
      i++;
    }      
    
  }

}

static function WeatherModule::Stop() {
  if (weather.weathergoing) {
    weather.weathergoing = false;
    
    if(!weather.single_overlay){
      int i = 0;
      while (i < weather.spritecount) {
        Weather_enveffect[i].Remove();
        i++;
      }
    } else {
      Weather_enveffect_single.Remove();
    }
    if (weather.pixel_only) {
      int i = 0;
      while (i < weather.spritecount) {
        Weather_sprites[i].Delete();
        i++;
      }
    } 
  }
  
  if (drawingSprite!= null)
  {
    drawingSprite.Delete();
    drawingSprite = null; //Safety
  }
  
}

static bool WeatherModule::IsWeatherGoing(){
  return weather.weathergoing;
}

static int WeatherModule::GetSpriteCount(){
  return weather.spritecount;
}

static function WeatherModule::SetPause(){
  weather.pause = !weather.pause;
}
static function WeatherModule::SetWindspeed(int envwindspeed) {
  if (envwindspeed == 0 && weather.fallingspeed == 0 )
    Display ("Fallingspeed already been set to zero.");
  else weather.windspeed = envwindspeed;
}

static function WeatherModule::SetFallingspeed(int envfallingspeed) {
  if (weather.windspeed == 0 && envfallingspeed == 0 )
    Display ("Windspeed already been set to zero.");
  else weather.fallingspeed = envfallingspeed;
}


//START SEVEN CITIES MODIFICATIONS
static void WeatherModule::SetSlowDown(int _framesDelay)
{
    weather.framesDelay = _framesDelay;
}

//END SEVEN CITIES MODIFICATIONS
  



/////////////////////////////////////////////////



function repeatedly_execute_always() {
  //START SEVEN CITIES MODIFICATIONS
  bool update = false;

  if (weather.delayCount >= weather.framesDelay)
  {
      update=true;
      weather.delayCount=0;
  }
  else
  {
      weather.delayCount++;
  }
  
  //if (weather.weathergoing && !IsGamePaused() ) {
  if (weather.weathergoing && !IsGamePaused() &&!RealPause.IsPaused() && update) {
  //END SEVEN CITIES MODIFICATIONS  
    DrawingSurface* surface;
    if (weather.single_overlay)
    {
      if (drawingSprite == null)  //safety. Done only once.
        drawingSprite = DynamicSprite.Create(System.ScreenWidth,  System.ScreenHeight,  true);
      surface = drawingSprite.GetDrawingSurface();
      surface.Clear(); //we start afresh
    }
    
    int i,  temp_y;

    if (weather.fallingspeed > 0) {
      i = 0;   
      while (i < weather.spritecount ) {
        /*
        if (weather.y_jitter == 0) Weather_enveffect[i].Y += weather.fallingspeed;
        else Weather_enveffect[i].Y += weather.RandomBoundries(weather.fallingspeed - weather.y_jitter, weather.fallingspeed);
        if (weather.x_jitter != 0 && weather.windspeed == 0) {
          if (Random(1)==0) Weather_enveffect[i].X += Random(weather.x_jitter);
          else Weather_enveffect[i].X -= Random(weather.x_jitter);
        }
        */
        if (weather.y_jitter == 0) Weather_Yparticle[i] += weather.fallingspeed;
        else Weather_Yparticle[i] += weather.RandomBoundries(weather.fallingspeed - weather.y_jitter, weather.fallingspeed);
        if (weather.x_jitter != 0 && weather.windspeed == 0) {
          if (Random(1)==0) Weather_Xparticle[i] += Random(weather.x_jitter);
          else Weather_Xparticle[i] -= Random(weather.x_jitter);
        }        
        i++;
      }
    }
    if (weather.fallingspeed < 0) {
      i = 0;   
      while (i < weather.spritecount ) {
        /*
        if (weather.y_jitter == 0) Weather_enveffect[i].Y += weather.fallingspeed;
        else Weather_enveffect[i].Y += weather.RandomBoundries(weather.fallingspeed, weather.fallingspeed+weather.y_jitter);
        if (weather.x_jitter != 0 && weather.windspeed == 0) {
          if (Random(1)==0) Weather_enveffect[i].X += Random(weather.x_jitter);
          else Weather_enveffect[i].X -= Random(weather.x_jitter);
        }
        */
        if (weather.y_jitter == 0) Weather_Yparticle[i] += weather.fallingspeed;
        else Weather_Yparticle[i] += weather.RandomBoundries(weather.fallingspeed, weather.fallingspeed+weather.y_jitter);
        if (weather.x_jitter != 0 && weather.windspeed == 0) {
          if (Random(1)==0) Weather_Xparticle[i] += Random(weather.x_jitter);
          else Weather_Xparticle[i] -= Random(weather.x_jitter);
        }
        
        i++;
      }      
    }
    if (weather.windspeed > 0) {
      i = 0;   
      while (i < weather.spritecount ) {
        /*
        if (weather.x_jitter == 0) Weather_enveffect[i].X += weather.windspeed;
        else Weather_enveffect[i].X += weather.RandomBoundries(weather.windspeed - weather.x_jitter,weather.windspeed);
        if (weather.y_jitter != 0 && weather.fallingspeed == 0) {
          if (Random(1)==0) Weather_enveffect[i].Y += Random(weather.y_jitter);
          else Weather_enveffect[i].Y -= Random(weather.y_jitter);
        }    
        */
        if (weather.x_jitter == 0) Weather_Xparticle[i] += weather.windspeed;
        else Weather_Xparticle[i] += weather.RandomBoundries(weather.windspeed - weather.x_jitter,weather.windspeed);
        if (weather.y_jitter != 0 && weather.fallingspeed == 0) {
          if (Random(1)==0) Weather_Yparticle[i] += Random(weather.y_jitter);
          else Weather_Yparticle[i] -= Random(weather.y_jitter);
        }  
        
        i++;
      }        
    }
    if (weather.windspeed < 0) {
      i = 0;   
      while (i < weather.spritecount ) {
        /*
        if (weather.x_jitter == 0) Weather_enveffect[i].X += weather.windspeed;
        else Weather_enveffect[i].X += weather.RandomBoundries(weather.windspeed, weather.windspeed + weather.x_jitter);
        if (weather.y_jitter != 0 && weather.fallingspeed == 0) {
          if (Random(1)==0) Weather_enveffect[i].Y += Random(weather.y_jitter);
          else Weather_enveffect[i].Y -= Random(weather.y_jitter);
        }        
        */
        
        if (weather.x_jitter == 0) Weather_Xparticle[i] += weather.windspeed;
        else Weather_Xparticle[i] += weather.RandomBoundries(weather.windspeed, weather.windspeed + weather.x_jitter);
        if (weather.y_jitter != 0 && weather.fallingspeed == 0) {
          if (Random(1)==0) Weather_Yparticle[i] += Random(weather.y_jitter);
          else Weather_Yparticle[i] -= Random(weather.y_jitter);
        } 
        
        i++;
      }         
    }
    
    // Get the Particles back on the screen
    i =0;
    
    while (i < weather.spritecount) {
      
      /*
      if (weather.pause) {
        if (weather.fallingspeed > 0) 
          if (Weather_enveffect[i].Y > weather.y_bottom) Weather_enveffect[i].Y = System.ScreenHeight + weather.y_offset; 
        else if (weather.fallingspeed < 0) 
          if (Weather_enveffect[i].Y < weather.y_top) Weather_enveffect[i].Y = 0 - weather.y_offset;  
        if (Weather_enveffect[i].X > weather.x_max) Weather_enveffect[i].X = System.ScreenWidth + weather.x_offset;
        else if (Weather_enveffect[i].X < weather.x_min) Weather_enveffect[i].X = 0 - weather.x_offset;
      }
      else {
        if (weather.fallingspeed > 0) {
          if (i%2==0) temp_y = weather.y_bottom;
          else        temp_y = weather.y_bottom - weather.y_offset;
          
          if (Weather_enveffect[i].Y > temp_y) {
            Weather_enveffect[i].X = weather.RandomBoundries(weather.x_min, weather.x_max);
            Weather_enveffect[i].Y = weather.RandomBoundries(weather.y_top, 0);                
          }
        }
        if (weather.fallingspeed < 0 ) {
            if (i%2==0) temp_y = weather.y_top;
            else        temp_y = weather.y_top + weather.y_offset;
            if (Weather_enveffect[i].Y < temp_y) {
              Weather_enveffect[i].X = weather.RandomBoundries(weather.x_min, weather.x_max);       
              Weather_enveffect[i].Y = weather.RandomBoundries(weather.y_bottom-weather.y_offset, weather.y_bottom);         
            }
        }
       
        if (Weather_enveffect[i].X >  weather.x_max) {
          if   (weather.windspeed != 0) Weather_enveffect[i].X = -weather.x_offset;
          else  Weather_enveffect[i].X = weather.x_max - weather.x_offset;
        }
        if (Weather_enveffect[i].X < -weather.x_min) {
          if   (weather.windspeed != 0) Weather_enveffect[i].X = weather.x_max;
          else Weather_enveffect[i].X = weather.x_min +weather.x_offset;
        }      
      }
      */
      
      if (weather.pause) {
        if (weather.fallingspeed > 0) 
          if (Weather_Yparticle[i] > weather.y_bottom) Weather_Yparticle[i] = System.ScreenHeight + weather.y_offset; 
        else if (weather.fallingspeed < 0) 
          if (Weather_Yparticle[i] < weather.y_top) Weather_Yparticle[i] = 0 - weather.y_offset;  
        if (Weather_Xparticle[i] > weather.x_max) Weather_Xparticle[i] = System.ScreenWidth + weather.x_offset;
        else if (Weather_Xparticle[i] < weather.x_min) Weather_Xparticle[i] = 0 - weather.x_offset;
      }
      else {
        if (weather.fallingspeed > 0) {
          if (i%2==0) temp_y = weather.y_bottom;
          else        temp_y = weather.y_bottom - weather.y_offset;
          
          if (Weather_Yparticle[i] > temp_y) {
            Weather_Xparticle[i] = weather.RandomBoundries(weather.x_min, weather.x_max);
            Weather_Yparticle[i] = weather.RandomBoundries(weather.y_top, 0);                
          }
        }
        if (weather.fallingspeed < 0 ) {
            if (i%2==0) temp_y = weather.y_top;
            else        temp_y = weather.y_top + weather.y_offset;
            if (Weather_Yparticle[i] < temp_y) {
              Weather_Xparticle[i] = weather.RandomBoundries(weather.x_min, weather.x_max);       
              Weather_Yparticle[i] = weather.RandomBoundries(weather.y_bottom-weather.y_offset, weather.y_bottom);         
            }
        }
       
        if (Weather_Xparticle[i] >  weather.x_max) {
          if   (weather.windspeed != 0) Weather_Xparticle[i] = -weather.x_offset;
          else  Weather_Xparticle[i] = weather.x_max - weather.x_offset;
        }
        if (Weather_Xparticle[i] < -weather.x_min) {
          if   (weather.windspeed != 0) Weather_Xparticle[i] = weather.x_max;
          else Weather_Xparticle[i] = weather.x_min +weather.x_offset;
        }      
      }
      
      
      if (!weather.single_overlay)
      {
        Weather_enveffect[i].X = Weather_Xparticle[i];
        Weather_enveffect[i].Y = Weather_Yparticle[i];
      }
      else
      {
        surface.DrawImage(Weather_Xparticle[i],  Weather_Yparticle[i], Weather_slots[i] );
      }
      
      i++;
    }
    
    if (weather.single_overlay)
    {
      surface.Release(); //we're done drawing onto "drawingSprite")
        
      Weather_enveffect_single = Overlay.CreateGraphical(0, 0,  drawingSprite.Graphic,   true);

/*
      //DEBUG
      DrawingSurface* ds = Room.GetDrawingSurfaceForBackground();
      ds.DrawImage(0, 0,  drawingSprite.Graphic);
      ds.Release();
      //~DEBUG
  */    
    }
    
  }
}
function on_event (EventType event, int data) {
  if (event==eEventLeaveRoom) WeatherModule.Stop();
}