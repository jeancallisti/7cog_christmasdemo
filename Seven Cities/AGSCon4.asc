// Main script for module 'AGSConsole2'
 int IsOn;
bool socketsAvailable;
bool shortcutEnabled;

ConDets AGSConsole;
export AGSConsole;


void ConDets::EnableSockets()
{
  socketsAvailable=true;
}

void ConDets::EnableShortcut(bool enable)
{
  shortcutEnabled = enable;
}




//completely empties the console listbox, except the forst 15 lines, for continuity
function shiftConsole(ListBox* listBox)
{

  int keepLines = 15; //how many lines do we want to keep after shifting

  if (listBox.ItemCount == 0 || keepLines < listBox.ItemCount) //Safety
    return; //nothing to do
  
  
  listBox.TopItem =0; //scroll back all the way up
  int i=0;
  while (i<listBox.ItemCount)
  {
    if (i<keepLines)
    {
      listBox.Items[i] = listBox.Items[listBox.ItemCount - keepLines +i ]; //copy item i (starting from keepLine-th item at the end) to the beginning
    }
    else
    {
      listBox.RemoveItem(listBox.ItemCount-1); //remove last item
    }
    i++;
  }
  
}


// adds an item to a listbox, 
// makes sure the listbox does not exceed the max number of lines,
// and scrolls down
void AddItem_Safe(ListBox* lst,  String item)
{
  if (lst.ItemCount >= MAX_LISTBOX_ITEMS) //Safety
    shiftConsole(lst);
  
  //String str = ". ";
  String str = "";
  lst.AddItem(str.Append(item));
  //lst.ScrollDown(); 
  
  //go to the end
  lst.SelectedIndex = lst.ItemCount-1;
  
  //if only a few lines, make sure there's no silly scrolling down
  if (lst.ItemCount < 7) { lst.SelectedIndex =0; lst.ScrollUp();}
}


void WrapLine(ListBox* lstBox,  String desc)
{
  int i = 0;
  String buffer = "";
  while (i < desc.Length) {
    if (GetTextWidth(buffer.AppendChar(desc.Chars[i]), lstBox.Font) <= lstBox.Width)
      buffer = buffer.AppendChar(desc.Chars[i]);
    else {
      while ((buffer.Contains(" ") != -1) && (buffer.Chars[buffer.Length - 1] != ' ')) {
        buffer = buffer.Truncate(buffer.Length - 1); // since there's no reverse-contains, take off one character at a time
        i--;
        }
      AddItem_Safe(lstBox,  buffer);
      i--;
      buffer = "";
      if (lstBox.Items[lstBox.ItemCount - 1].Contains("[") != -1) {
        int temp = lstBox.Items[lstBox.ItemCount - 1].Contains("[");
        buffer = lstBox.Items[lstBox.ItemCount - 1].Substring(temp + 1, lstBox.Items[lstBox.ItemCount - 1].Length);
        lstBox.Items[lstBox.ItemCount - 1] = lstBox.Items[lstBox.ItemCount - 1].Substring(0, temp);
        }
      }
    i++;
    }
  AddItem_Safe(lstBox,  buffer);
  while (buffer.Contains("[") != -1) {
    int temp = buffer.Contains("[");
    lstBox.Items[lstBox.ItemCount - 1] = buffer.Truncate(temp);
    AddItem_Safe(lstBox,  buffer.Substring(temp + 1, buffer.Length));
    buffer=buffer.Substring(temp + 1, buffer.Length);
  }
}


function ConDets::LogConsole(String text)
{
  WrapLine(lstConsole,  text);
  //TODO: also log to log file
  
  Global.Log(text);
}



#define NOT_AN_INT -666666
function GetAtIndex(String Haystack, int index) {
  // Gets 'word' at index of Haystack (usually a TextBox input string)
  // Returns an int value, e.g. for parameters of a console command.
  // In practice, index should be 1 or higher - '0' being the command itself
  // and so always a String, it's ignored by this function and WILL return
  // an error
  // E.g:
  // INPUT: change_room 2 150 180
  // INDEX:      0      1  2   3 
  // GetAtIndex(INPUT, 1) will return 2
	int Tempdex; // Will be used to track current index
	while (Tempdex < index && Haystack.Contains(" ") != -1) {
	 Haystack = Haystack.Substring(Haystack.Contains(" ")+1,  Haystack.Length-1);
	 Tempdex ++;
  }
  if (Tempdex == index) {
		if (Haystack.Contains(" ") != -1) 
    Haystack = Haystack.Substring(0, Haystack.Contains(" "));
    return Haystack.AsInt;
  }
  else {
      AGSConsole.LogConsole(String.Format("Could not read parameter at position '%d'",index));
      return NOT_AN_INT;
  }
}
 
String StrAtIndex(String Haystack, int index) {
  // Like 'GetAtIndex', but returns a String value
  // StrAtIndex(Input, 0) will return the command (used by
  // GetCommand, and parsed in LogInput, as well as commands
	// like 'change_name' or 'display', or external modules
	// like SSH's DeNGVaT, which allows String-named variables
	int Tempdex, closequote;
	while (Tempdex < index && Haystack.Contains(" ") != -1) {
	  if (Haystack.Chars[Haystack.Contains(" ")+1] == '"') {
			closequote = 1;
			Haystack = Haystack.Substring(Haystack.Contains(" ")+2,  Haystack.Length-1);
		}
		else Haystack = Haystack.Substring(Haystack.Contains(" ")+1,  Haystack.Length-1);
	  Tempdex ++;
  }
  if (Tempdex == index) {
    if (closequote == 1) 
      return Haystack.Substring(0, Haystack.Contains("\""));
		else if (Haystack.Contains(" ") != -1) 
		  return Haystack.Substring(0, Haystack.Contains(" "));
    else return Haystack;
  }
  else return null;
}

function GetCommand(String Needle) {
  // Gets first 'word' of Haystack (usually a TextBox input string)
  // and conducts a case-insesitve comparision with Needle 
  // (a possible command, like 'add_inv' 'change_room', etc).
  // Returns true or false.
  // Used in LogInput, to execute console-entered commands
  String Haystack = StrAtIndex(AGSConsole.ToParse,  0);
  return (Needle.CompareTo(Haystack) == 0);
}

function DumpToFile() {
  int TempI;
  String file = "Log.txt";
  DateTime *dt = DateTime.Now;
  String TempS = String.Format("%d%d%d:%d%d", dt.DayOfMonth, dt.Month, dt.Year, dt.Hour, dt.Minute);
  File *theFile = File.Open(file, eFileAppend);
  if (theFile != null) {
    theFile.WriteRawLine(TempS);
    while (TempI < lstConsole.ItemCount) {
      theFile.WriteRawLine(String.Format("     %s", lstConsole.Items[TempI]));
      TempI ++;
    }
    theFile.Close();
    //lstConsole.Clear();
    AGSConsole.LogConsole(String.Format("Console history saved to file '%s'.", file));
  } else {
    AGSConsole.LogConsole(String.Format("Could not open file '%s'.", file));
  }
  //lstConsole.AddItem_Safe("Console history saved to file");
}


////////////////////////////////////////////
//
//      SCRIPT LANGUAGE PARSER
//      (if that may even be called a "parser")
//
////////////////////////////////////////////




//removes 1 comment of type '//' 
String RemoveComment(String line)
{
  int index = line.Contains("//");
  
  if (index == 0) return "";
  
  if (index >0)
    return line.Substring(0, index );
  
  return line;
}

//returns null if the line is empty (null, "", or only white spaces)
//returns the line (without white spaces at the beginning) if not
String IsEmptyLine(String line)
{
  if (line == null)
    return null;
  
  if (line.Length ==0)
    return null;
    
  bool isEmpty = true;
  int i=0;
  while (i<line.Length)
  {
    char c = line.Chars[i];
    if (c!=' ')
      return line.Substring(i,  line.Length - i);
    i++;
  }
  return null;
}


function ConDets::RunScript(String fileName)
{
  Display("TODO");
  //cannot be implemented at the moment because there's a cyclic dependency between
  //'RunScript' and 'LogInput'
}


////////////////////////////////////////////
//
//      COMMANDS HISTORY
//
////////////////////////////////////////////

#define MAXCOMMANDS 5
String command_hist[MAXCOMMANDS];
int lastCommand=0; //in which slot we should store (this is cyclic)
int curCommand = 0; //the command selected by user in the history

void StoreCommand(String cmd)
{
  command_hist[lastCommand] = cmd;
  curCommand=lastCommand;
    
  lastCommand++;
  if (lastCommand>=MAXCOMMANDS) lastCommand=0;

}

void CommandsUp()
{
  txtConsole.Text="";
  if (command_hist[curCommand] != null)
    txtConsole.Text=command_hist[curCommand];
  
  curCommand--;
  if (curCommand<0)
    curCommand=lastCommand;
}

void CommandsDown()
{
  txtConsole.Text="";
  
  curCommand++;
  if (curCommand>lastCommand)
    curCommand=0; 
    
  if (command_hist[curCommand] != null)
    txtConsole.Text=command_hist[curCommand];
  

}

function ConDets::ShowHide() {
  if (IsOn == eConsoleOn) {
    if (gAgsconsole.Visible) {
        gAgsconsole.Visible=false;
        //GUIlogic.DebugUnPause();
    } else {
        gAgsconsole.Visible=true;
        AGSConsole.LogConsole("type 'exit' to close the console, or press Ctrl+C in debug mode");
        //GUIlogic.DebugPause();
    }
  }
}


////////////////////////////////////////////
//
//      COMMANDS EXECUTION
//
////////////////////////////////////////////



function ConDets::LogInput(String Input) {
  if (IsOn == eConsoleOn) {
    
		// Adds input from txtConsole, and checks it for entered commands.
		// The commands themselves are explained in the ReadMe, along wih
		// how to add new ones.
		this.ToParse = Input;
    
    //store the command in history
    StoreCommand(Input);
    
		//if (lstConsole.ItemCount >= CONSOLE_MAX) DumpToFile();
		AGSConsole.LogConsole(Input);
	// <-- Start of code chunk that could be called 'ParseInput'
		if (GetCommand("quit")) {
			AGSConsole.LogConsole("Quiting...");
			WAIT_10
			QuitGame(0);
		}
			else if (GetCommand("change_room")) {
      int room = GetAtIndex(Input, 1);
			int TempX = GetAtIndex(Input, 2);
			int TempY = GetAtIndex(Input, 3);

      if (room == NOT_AN_INT)
        AGSConsole.LogConsole("usage : change_room room x y");
			else if (TempX != NOT_AN_INT) player.ChangeRoom(room, TempX,  TempY);
			else player.ChangeRoom(room);
		}
		else if (GetCommand("set_gi")) {
			int TempGI = GetAtIndex(Input, 1);
			int TempVal = GetAtIndex(Input, 2);
			SetGlobalInt(TempGI, TempVal);
		}
		else if (GetCommand("change_name")) {
			int TempC = GetAtIndex(Input, 1);
			String TempVal = StrAtIndex(Input, 2);
			character[TempC].Name = TempVal;
		}
		else if (GetCommand("walk_view")) {
			int TempC = GetAtIndex(Input, 1);
			int TempVal = GetAtIndex(Input, 2);
			character[TempC].ChangeView(TempVal);
		}
		else if (GetCommand("display")) {
      if (StrAtIndex(Input, 1) ==null) {
        AGSConsole.LogConsole("usage : display This is a message");
        return;
      }
			Display(StrAtIndex(Input, 1));
			Display("%d", GetAtIndex(Input, 0));
		}
		else if (GetCommand("room_script")) {
			int TempI = GetAtIndex(Input, 1);
			CallRoomScript(TempI);
			AGSConsole.LogConsole(String.Format("Room script %d executed", TempI));
		}
		else if (GetCommand("dump")) {
			DumpToFile();
		}
		else if (GetCommand("close")) {
		  gAgsconsole.Visible = false;
		}
		else if (GetCommand("change_npc_room")) {
		  int TempC = GetAtIndex(Input, 1);
			int TempX = GetAtIndex(Input, 3);
			int TempY = GetAtIndex(Input, 4);
			if (TempX != NOT_AN_INT) character[TempC].ChangeRoom(GetAtIndex(Input, 2), TempX,  TempY);
			else character[TempC].ChangeRoom(GetAtIndex(Input, 2));
			AGSConsole.LogConsole(String.Format("Character %d (%s) moved to room %d at %d,  %d", TempC, character[TempC].Name, GetAtIndex(Input, 2), character[TempC].x, character[TempC].y));
		}
		else if (GetCommand("object_visible")) {
		  int TempI = GetAtIndex(Input, 1);
		  String Show = StrAtIndex(Input, 2);
		  if (TempI == NOT_AN_INT || TempI >= Room.ObjectCount) 
				AGSConsole.LogConsole(String.Format("Error: Invalid Object specified: object %s", StrAtIndex(Input, 1)));
			else {	
				if (Show == null) object[TempI].Visible = !(object[TempI].Visible);
				else if (Show == "true") object[TempI].Visible = true;
				else if (Show == "false") object[TempI].Visible = false;
			}
		}
		else if (GetCommand("object_view")) {
		  int TempO = GetAtIndex(Input, 1);
		  int TempV = GetAtIndex(Input, 2);
		  if (TempO == NOT_AN_INT || TempO >= Room.ObjectCount) AGSConsole.LogConsole(String.Format("Error: Invalid Object ID entered (%s)", StrAtIndex(Input,  1)));
		  else if (TempV < 1  || TempV >Game.ViewCount) AGSConsole.LogConsole(String.Format("Error: Invalid View entered (%d)", TempV));
		  else {
				object[TempO].SetView(TempV);
				AGSConsole.LogConsole(String.Format("Object %d View set to %d", TempO, TempV));
			}
		}
		else if (GetCommand("object_animate")) {
		  int TempO = GetAtIndex(Input, 1);
		  int TempL = GetAtIndex(Input, 2);
		  int TempD = GetAtIndex(Input, 3);
		  if (TempO == NOT_AN_INT || TempO >= Room.ObjectCount) AGSConsole.LogConsole(String.Format("Error: Invalid Object ID entered (%s)", StrAtIndex(Input, 1)));
		  else if (TempL == -1) AGSConsole.LogConsole("Please enter a Loop");
		  else if (TempD == -1) AGSConsole.LogConsole("Please enter a Delay");
		  else {
		    gAgsconsole.Visible = false;
		    object[TempO].Animate(TempL, TempD);
		    gAgsconsole.Visible = true;
		  }
		}
		else if (GetCommand("object_move")) {
			int TempO = GetAtIndex(Input, 1);
			int TempX = GetAtIndex(Input, 2);
			int TempY = GetAtIndex(Input, 3);
			int TempS = GetAtIndex(Input, 4);
			if (TempO == NOT_AN_INT || TempO >= Room.ObjectCount) AGSConsole.LogConsole(String.Format("Error: Invalid Object ID entered (%s)", StrAtIndex(Input, 1)));
			else if (TempS == -1) AGSConsole.LogConsole(String.Format("Invalid speed supplied: %d", TempS));
			else {
				object[TempO].Move(TempX, TempY, TempS);
				AGSConsole.LogConsole(String.Format("Object %d moved to (%d,%d) at speed %d", TempO, TempX, TempY, TempS));
			}	
		}
	
		else if (GetCommand("walkable_enabled")) {
			int TempW = GetAtIndex(Input, 1);
			String Show = StrAtIndex(Input, 2);
			if (TempW == NOT_AN_INT) AGSConsole.LogConsole("Error: No Walkable Area ID supplied");
			else {
			  if (Show == null) Show = "";
			  if (Show == "true") RestoreWalkableArea(TempW);
			  else if (Show == "false") RemoveWalkableArea(TempW);
			  else AGSConsole.LogConsole(String.Format("Error: Invalid parameter supplied: %s",  Show));
			}  
		}  
    else if (GetCommand("char_properties")) {
		  int TempO = GetAtIndex(Input, 1);
		  AGSConsole.LogConsole(String.Format("AnimationSpeed %d, Baseline %d, IgnoreLighting %d",character[TempO].AnimationSpeed, character[TempO].Baseline, character[TempO].IgnoreLighting));
      AGSConsole.LogConsole(String.Format("IgnoreWalkbehinds %d,Transparency %d", character[TempO].IgnoreWalkbehinds, character[TempO].Transparency));
		  }  
      else if (GetCommand("char_invquan")) {
			int TempO = GetAtIndex(Input, 1);
      int TempX = GetAtIndex(Input, 2);
			AGSConsole.LogConsole(String.Format("Character %d has item %d in a quantity of %d", TempO, TempX, character[TempO].InventoryQuantity[TempX]));
		  }
      else if (GetCommand("char_setplayer")) {
			int TempO = GetAtIndex(Input, 1);
            AGSConsole.LogConsole(String.Format("New player is %s, old player is %s", character[TempO].Name, player.Name));
		  gAgsconsole.Visible = false;
		  //SetPlayerCharacter(TempO); //OBSOLETE
            character[TempO].SetAsPlayer(); //NEW STYLE
		  gAgsconsole.Visible = true;
		  }
       else if (GetCommand("char_getplayer")) {
            AGSConsole.LogConsole(String.Format("Player is '%s'.", player.Name));
		  gAgsconsole.Visible = false;
		  gAgsconsole.Visible = true;
		  }
      else if (GetCommand("char_addinv")) {
			int TempO = GetAtIndex(Input, 1);
      int TempX = GetAtIndex(Input, 2);
			AGSConsole.LogConsole(String.Format("Added item %d to %s", TempO,character[TempX].Name));
		  character[TempX].InventoryQuantity[TempO]=character[TempX].InventoryQuantity[TempO]+1;
      }
      else if (GetCommand("char_loseinv")) {
			int TempO = GetAtIndex(Input, 1);
      int TempX = GetAtIndex(Input, 2);
			AGSConsole.LogConsole(String.Format("Lost item %d from %s", TempO,character[TempX].Name));
		  character[TempX].InventoryQuantity[TempO]=character[TempX].InventoryQuantity[TempO]+1;
      }
   		else if (GetCommand("region_enabled")) {
		  int TempI = GetAtIndex(Input, 1);
		  String Show = StrAtIndex(Input, 2);
		  if (TempI == NOT_AN_INT) 
				AGSConsole.LogConsole("Error: Enter a Region ID");
			else {	
				if (Show == null) region[TempI].Enabled = !(region[TempI].Enabled);
				else if (Show == "true") region[TempI].Enabled = true;
				else if (Show == "false") region[TempI].Enabled = false;
			}
		}

		else if (GetCommand("get_property")) {
		  String Type = StrAtIndex(Input,  1);
		  String Prop = StrAtIndex(Input, 3);
		  int TempI = GetAtIndex(Input, 2);
		  int Value;
		  if (Type == "hotspot") Value = hotspot[TempI].GetProperty(Prop);
		  else if (Type == "character") Value = character[TempI].GetProperty(Prop);
//		  else if (Type == "item") Value = inventory[TempI].GetProperty(Prop);
		  else if (Type == "object") Value = object[TempI].GetProperty(Prop);
		  else {
		    AGSConsole.LogConsole(String.Format("Invalid parameter supplied: %s.", Type));
		    return;
		  }
		  
		  AGSConsole.LogConsole(String.Format("%s %d property '%s' is %d", Type, TempI, Prop, Value));
		}
		else if (GetCommand("get_textproperty")) {
		  String Type = StrAtIndex(Input,  1);
		  String Prop = StrAtIndex(Input, 3);
		  int TempI = GetAtIndex(Input, 2);
		  String Value;
		  if (Type == "hotspot") Value = hotspot[TempI].GetTextProperty(Prop);
		  else if (Type == "character") Value = character[TempI].GetTextProperty(Prop);
		//  else if (Type == "item") Value = inventory[TempI].GetTextProperty(Prop);
		  else if (Type == "object") Value = object[TempI].GetTextProperty(Prop);
		  AGSConsole.LogConsole(String.Format("%s %d property '%s' is '%s'", Type, TempI, Prop, Value));
		}
		else if (GetCommand("room_property")){
		  String Prop = StrAtIndex(Input, 1);
		  if (Prop == null) AGSConsole.LogConsole("Please enter a Property name");
		  else {
		    int Value = GetRoomProperty(Prop);
		    AGSConsole.LogConsole(String.Format("Room %d property '%s' is %d", player.Room, Prop, Value));
			}
		}
		else if (GetCommand("room_textproperty")){
		  String Prop = StrAtIndex(Input, 1);
		  if (Prop == null) AGSConsole.LogConsole("Please enter a Property name");
		  else {
		    String Value = Room.GetTextProperty(Prop);
		    AGSConsole.LogConsole(String.Format("Room %d property '%s' is '%s'", player.Room, Prop, Value));
			}
		}
    
		else if (GetCommand("system")){
      AGSConsole.LogConsole(String.Format("Screen %d x %d",System.ScreenHeight, System.ScreenWidth));
      AGSConsole.LogConsole(String.Format("Colour Depth %d and gamma %d",System.ColorDepth,System.Gamma));
      AGSConsole.LogConsole(String.Format("AGS Engine version %s",System.Version));
      if (System.HardwareAcceleration) AGSConsole.LogConsole(String.Format("Direct3d"));
      if (!System.HardwareAcceleration) AGSConsole.LogConsole(String.Format("DirectDraw"));
      if (System.Windowed) AGSConsole.LogConsole(String.Format("Windowed"));
      if (!System.Windowed) AGSConsole.LogConsole(String.Format("Fullscreen")); 
  
		}   
    
		else if (GetCommand("dumpvars")){
      Global.Dump();
      AGSConsole.LogConsole("The values can be seen in the log file.");
    }
    
		else if (GetCommand("set")){
      String str = StrAtIndex(Input,  1);
      int val = GetAtIndex(Input, 2);
      if (val != NOT_AN_INT){
        Global.Set(str, val);
        AGSConsole.LogConsole("stored.");
      } else
        AGSConsole.LogConsole("Invalid parameter.");
    }
		else if (GetCommand("get")){
      String str = StrAtIndex(Input,  1);
      int val = Global.Get(str);
      AGSConsole.LogConsole(String.Format("%s=%d",str,  val));
    }
		else if (GetCommand("sets")){
      String str = StrAtIndex(Input,  1);
      String val = StrAtIndex(Input, 2);

      Global.Sets(str, val);
      AGSConsole.LogConsole("stored.");
    }
		else if (GetCommand("gets")){
      String str = StrAtIndex(Input,  1);
      String val = Global.Gets(str);
      AGSConsole.LogConsole(String.Format("%s=%s",str,  val));
    }

		else if (GetCommand("list_scripts")){


      lstConsole.FillDirList("*.oux");
      if (lstConsole.ItemCount == 0)
        AGSConsole.LogConsole("No script found.");
      else //we need to save everything we got from "FillDirList"
      {
          String scripts = "";
          int i=0;
          while (i<lstConsole.ItemCount)
          {
            scripts = scripts.Append(String.Format("%s   ",lstConsole.Items[i]));
            i++;
          }
          lstConsole.Clear();
          AGSConsole.LogConsole("LIST OF ALL SCRIPTS");
          AGSConsole.LogConsole(scripts);
          AGSConsole.LogConsole("[[Run 'call <scriptname>' to run it.");
      }
      
  
		}    

		else if (GetCommand("call")){
		  String fileName = StrAtIndex(Input, 1);
		  if (fileName == null) AGSConsole.LogConsole("Please enter a script name");
		  else {
		    AGSConsole.LogConsole(String.Format("Running script '%s'", fileName));
        
        if (!File.Exists(fileName))
        {
          AGSConsole.LogConsole(String.Format("There is no script file '%s'", fileName));
          return;
        }
        
        File* input = File.Open(fileName, eFileRead);
        while (!input.EOF) {
          String cleanLine = IsEmptyLine(input.ReadRawLineBack());
          if (cleanLine != null)
          {
            cleanLine = RemoveComment(cleanLine);
            if (cleanLine != "")
              AGSConsole.LogInput(cleanLine);
          }
        }
        AGSConsole.LogConsole(String.Format("End of '%s'",fileName));
        input.Close();
        
			}
		}

		else if (GetCommand("xmlparse")) {
		  String xmlFile = StrAtIndex(Input, 1);
		  if (xmlFile == null)
        AGSConsole.LogConsole("Please enter an xml file name");
		  else
      {
		    AGSConsole.LogConsole(String.Format("Parsing xml file '%s'", xmlFile));
        if (!File.Exists(xmlFile))
        {
          AGSConsole.LogConsole(String.Format("Error: There is no file named '%s'", xmlFile));
        }
        else
        {
          XMLNODE root = ShitXML.NewNode("root");
          ShitXML.Parse(root, xmlFile);
          AGSConsole.LogConsole(String.Format("Finished parsing '%s'. Now dumping.",xmlFile));
          ShitXML.Dump(root, "output.xml");
          AGSConsole.LogConsole(String.Format("Finished dumping xml tree to '%s'. Now deleting tree.",xmlFile)); 
          ShitXML.DeleteAll(root);
          AGSConsole.LogConsole(String.Format("Deleted xml tree from memory. "));
        }
			}
		}

		else if (GetCommand("upload")) {
		  String s_server = StrAtIndex(Input, 1);
		  String port = StrAtIndex(Input, 2);
		  String fileName = StrAtIndex(Input, 3);
      if (fileName==null && s_server==null && port==null)
        AGSConsole.LogConsole("usage: upload server port filename");
		  else if (fileName == null)
        AGSConsole.LogConsole("Please enter the name of the file to upload");
		  else if (s_server == null)
        AGSConsole.LogConsole("Please enter the target server for uploading");
		  else if (port == null) {
        AGSConsole.LogConsole("Please enter the port for uploading");
      } else {
		    AGSConsole.LogConsole(String.Format("Uploading file '%s' to server '%s':%s", fileName, s_server, port));
        Wait(1);
        if (!File.Exists(fileName))
        {
          AGSConsole.LogConsole(String.Format("Error: There is no file named '%s'", fileName));
        }
        else if(port.AsInt==0) {
          AGSConsole.LogConsole(String.Format("Error: not a valid port number '%s'", port));
        }
        else
        {
          if (socketsAvailable) {
            #ifdef SOCKETS
            File* f = File.Open(fileName, eFileRead);
            
            
            Socket *server = Socket.CreateTCP();
            SockAddr *sockaddr = SockAddr.CreateFromString(s_server);
            sockaddr.Port = port.AsInt;
            server.Connect(sockaddr);
            //String name = tbName.Text;
            //String param1 = "param1=indy&param2=rulez\r\n";
            //String param1 = "p=bugs\r\n";
            String param1 = String.Format("this is a bug report test 00000");
            String len = String.Format("Content-Length: %d\r\n\r\n", param1.Length);
            //String page = "/floatyrog/index.php";
            String page = "?p=bugs";
            String message = String.Format("POST %s HTTP/1.1\r\n", page);
            message = message.Append("Host: khris.agser.me\r\n");
            message = message.Append("Content-Type: application/x-www-form-urlencoded\r\n");
            message = message.Append(len);
            message = message.Append(param1);
            message = message.Append("\r\n");
            server.Send(message);
            server.Close();

            f.Close();
            AGSConsole.LogConsole(String.Format("Finished uploading '%s'",fileName));
            #endif
          }
          else 
          {
            AGSConsole.LogConsole("command not available. This version of the program does not have the upload plugin.");
          }

        }
			}
		}

		else if (GetCommand("exit")) {     
      AGSConsole.ShowHide();
    
    
    }

		else if (GetCommand("help")){
      String commands[];
      int MAX_COMMANDS = 40;
      commands = new String[MAX_COMMANDS]; //arbitrary number
      commands[0] = "quit";
      commands[1] = "change_room";
      commands[2] = "set_gi";
      commands[3] = "change_name";
      commands[4] = "walk_view";
      commands[5] = "display";
      commands[6] = "room_script";
      commands[7] = "dump";
      commands[8] = "close";
      commands[9] = "change_npc_room";
      commands[10] = "object_visible";
      commands[11] = "object_view";
      commands[12] = "object_animate";
      commands[13] = "object_move";
      commands[14] = "walkable_enabled";
      commands[15] = "char_properties";
      commands[16] = "char_invquan";
      commands[17] = "char_setplayer";
      commands[18] = "char_addinv";
      commands[19] = "char_loseinv";
      commands[20] = "region_enabled";
      commands[21] = "get_property";
      commands[22] = "get_textproperty";
      commands[23] = "room_property";
      commands[24] = "room_textproperty";
      commands[25] = "help";
      commands[26] = "system";
      commands[27] = "list_scripts";
      commands[28] = "call"; 
      commands[29] = "dumpvars"; 
      commands[30] = "set"; 
      commands[31] = "get"; 
      commands[32] = "sets"; 
      commands[33] = "gets"; 
      commands[34] = "xmlparse"; 
      commands[35] = "upload"; 
      commands[36] = "exit"; 
      
      String concat = "";
      int i=0;
      while (i<MAX_COMMANDS && commands[i] != null)
      {
        concat = concat.Append(String.Format("%s   ", commands[i]));
        i++;
      }
		  AGSConsole.LogConsole(String.Format("ALL COMMANDS:[%s", concat));
		} 
    
// etc for other commands
else AGSConsole.LogConsole(String.Format("Unknown command '%s'",  Input));
// <-- End of 'ParseInput' code
	}
}


function ConDets::RunCommand(String text)
{
  AGSConsole.LogInput(text); //so far, RunCommand is identifical to LogInput
}


  
  

function ConDets::LogKeypress(int Keycode) {
  if (IsOn == eConsoleOn) {
		//if (lstConsole.ItemCount >= CONSOLE_MAX) DumpToFile();
    /*
		if (IsGamePaused())
			AGSConsole.LogConsole("Game paused, keypress blocked");
	  else
			AGSConsole.LogConsole(String.Format("Player pressed key '%d' (char %c)",  Keycode, Keycode));
		*/
    if (IsGamePaused())
			AGSConsole.LogConsole(String.Format("Game is paused. Player pressed key '%d' (char %c)",  Keycode, Keycode));
	}
}

function ConDets::LogMouse(MouseButton button) {
		if (IsOn == eConsoleOn) {
		//if (lstConsole.ItemCount >= CONSOLE_MAX) DumpToFile();
		AGSConsole.LogConsole(String.Format("Player clicked MouseButton %d in mode %d", button, Mouse.Mode));
		Hotspot *theHot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
		Character *theChar = Character.GetAtScreenXY(mouse.x, mouse.y);
		Object *theObj = Object.GetAtScreenXY(mouse.x, mouse.y);
		GUI *theGUI = GUI.GetAtScreenXY(mouse.x, mouse.y);
		GUIControl *theCont = GUIControl.GetAtScreenXY(mouse.x,  mouse.y);
		InventoryItem *theItem = InventoryItem.GetAtScreenXY(mouse.x,  mouse.y);
		if (theItem != null) {
			String TempS;
			if (theItem.IsInteractionAvailable(mouse.Mode)) TempS = "Interaction available";
			else TempS = "No Interaction";
			AGSConsole.LogConsole(String.Format("Player clicked InvItem %d (%s), %s", theItem.ID, theItem.Name, TempS));
		}
		else if (theGUI != null) {
			if (theCont != null) {
				String ContType;
				if (theCont.AsButton) ContType = "Button";
				if (theCont.AsInvWindow) ContType = "Inventory";
				if (theCont.AsLabel) ContType = "Label";
				if (theCont.AsListBox) ContType = "ListBox";
				if (theCont.AsSlider) ContType = "Slider";
				if (theCont.AsTextBox) ContType = "TextBox";
				AGSConsole.LogConsole(String.Format("Player clicked GUI %d, Control %d (%s)", theGUI.ID, theCont.ID, ContType));
			}
			else AGSConsole.LogConsole(String.Format("Player clicked GUI %d, no Control", theGUI.ID));
		}
		else if (theChar != null) {
			AGSConsole.LogConsole(String.Format("Player clicked Character %d (%s)", theChar.ID, theChar.Name));
		}
		else if (theHot != hotspot[0]) {
			AGSConsole.LogConsole(String.Format("Player clicked Hotspot %d (%s)", theHot.ID, theHot.Name));
		}
		else if (theObj != null) {
			AGSConsole.LogConsole(String.Format("Player clicked Object %d (%s)", theObj.ID, theObj.Name));
		}
		else {
			 AGSConsole.LogConsole(String.Format("Player clicked nothing at (%d,%d)", mouse.x, mouse.y));
		 }
	}
}

function ConDets::LogEvent(EventType event, int data) {
  if (IsOn == eConsoleOn) {
    //if (lstConsole.ItemCount >= CONSOLE_MAX) DumpToFile();
    if (event == eEventAddInventory) {
      AGSConsole.LogConsole(String.Format("Item %d added", data));
    }
    if (event == eEventLoseInventory) {
      AGSConsole.LogConsole(String.Format("Item %d removed", data));
    }
    if (event == eEventGotScore) {
      AGSConsole.LogConsole(String.Format("Player gets %d points", data));
      AGSConsole.LogConsole(String.Format("(Old score: %d, current score %d)", game.score-data, game.score));
    }
    if (event == eEventLeaveRoom) {
      AGSConsole.LogConsole(String.Format("Player left room %d", data));
    }
    if (event == eEventEnterRoomBeforeFadein) {
      AGSConsole.LogConsole(String.Format("Player entered room %d", data));
    }
    if (event == eEventRestoreGame) {
      AGSConsole.LogConsole(String.Format("Game restored from slot %d", data));
    }
    if (event == eEventStartDialog) {
      AGSConsole.LogConsole(String.Format("Dialog %d started", data));
    }
    if (event == eEventSaveGame) {
      AGSConsole.LogConsole(String.Format("Game saved to slot %d", data));
    }
  }
}

function ConDets::SetState(ConState OnOff) {
  // Sets whether or not the console can be shown
  IsOn = OnOff; // If the set state is On or Off, that's all you need.
  // However, if it's dependant on Debug mode, the next bit comes into play
  #ifdef DEBUG
  if (OnOff == eConsoleDebug) IsOn = eConsoleOn;
  // DEBUG is only defined if Debug mode is on - so if it IS, and the
  // Console requires Debug, let it turn on
  #endif
  if (OnOff == eConsoleDebug) IsOn = eConsoleOff;
  // If it's still eConsoleDebug at this point, Debug mode isn't on, so don't let
  // the Console appear.
}
function on_mouse_click(MouseButton button) {
  AGSConsole.LogMouse(button);
  // Optional code to make t;e Console turn off with a mouse click - see the ReadMe for more details:
  /*
  if (gAgsconsole.Visible && GUI.GetAtScreenXY(mouse.x,mouse.y) != gAgsconsole) {
  gAgsconsole.Visible = false;
  ClaimEvent();
  }
  */
}
int mdown;
function on_event(EventType event, int data) {
  AGSConsole.LogEvent(event, data);
  if (event == eEventGUIMouseDown) {
    if (mouse.IsButtonDown(eMouseLeft)) mdown = eMouseLeft;
    else mdown = eMouseRight;
  }
  if (event == eEventGUIMouseUp) {
    if (data != gAgsconsole.ID) AGSConsole.LogMouse(mdown);
      mdown = 0;
  }
}
function Save(int Slot, String Description) {
  // Custom save game function, to allow event logging.
  AGSConsole.LogEvent(eEventSaveGame, Slot);
  SaveGameSlot(Slot, Description);
}
function GetTextBox(TextBox*txtbox)  {
  bool texbox;
  if ((mouse.x>=txtbox.X+txtbox.OwningGUI.X) && (mouse.x<=txtbox.X+txtbox.Width+txtbox.OwningGUI.X)){
    texbox=true;
  }
  if ((mouse.y>=txtbox.Y+txtbox.OwningGUI.Y) && (mouse.y<=txtbox.Y+txtbox.Height+txtbox.OwningGUI.Y)){
    texbox=true;
  }
  if ((mouse.x<txtbox.X+txtbox.OwningGUI.X) || (mouse.x>txtbox.X+txtbox.Width+txtbox.OwningGUI.X)){
    texbox=false;
  }
  if ((mouse.y<txtbox.Y+txtbox.OwningGUI.Y) || (mouse.y>txtbox.Y+txtbox.Height+txtbox.OwningGUI.Y)){
    texbox=false;
  }
  return texbox;
}
function StartDialog(this Dialog*) {
  // Custom start dialog function to allow logging.
  int TempI,  TempI2 = -1;
  while (TempI < 500 && TempI2 == -1) {
  if (this == dialog[TempI])
  TempI2 = TempI;
  TempI ++;
  }
  AGSConsole.LogEvent(eEventStartDialog, TempI2);
  this.Start();
}
int oldmode,console;
function on_key_press(int keycode) {
  if (keycode==eKeyUpArrow) {
    CommandsUp();
  } else if (keycode==eKeyDownArrow) {
    CommandsDown();
  }
  
  AGSConsole.LogKeypress(keycode);
  console = 1; // So as not to interfere with the repeatedly_execute code for turning the console on/off
}

//outputs system properties to the console


function game_start() {
  AGSConsole.LogConsole("Welcome to the AGS console ^_^[ ");
}
/*
bool IsOverButton(Button* b)
{
  if (    mouse.x >= b.X 
      &&  mouse.x < b.X+b.Width
      &&  mouse.y >= b.Y 
      &&  mouse.y < b.Y+b.Height )
  {
     return true;
  }
  return false;
}
*/
function repeatedly_execute() {
    if (mouse.Mode != oldmode) {
      // For logging changed of cursor mode
      AGSConsole.LogConsole(String.Format("Cursor mode change to %d", mouse.Mode));
      oldmode = Mouse.Mode;
    }
    if (IsOn == eConsoleOn) {
   /*
   if (GetTextBox(txtConsole))  //if mouse is over textbox player can type otherwise no.
    txtConsole.Enabled=true;
    if (!GetTextBox(txtConsole)) 
    txtConsole.Enabled=false;
    */
    }
    
    if (shortcutEnabled && !gTestersName.Visible)
    {
      if (IsKeyPressed(67) && (IsKeyPressed(405) || IsKeyPressed(406))){ //OLD STYLE
      //if (IsKeyPressed(eKeyCtrlC)){
        if (console == 0) {
          
          AGSConsole.ShowHide();
          console = 1;
        }
      }
      else console = 0;
    }
    
    if (gAgsconsole.Visible)
    {
      /*
      if (IsOverButton(bConsoleScript)) lConsoleTip.Text="Run an external script";
      else if (IsOverButton(bConsoleVariables)) lConsoleTip.Text="Display variables window";
      else if (IsOverButton(bConsoleHelp)) lConsoleTip.Text="Help";
      else if (IsOverButton(bConsoleUp)) lConsoleTip.Text="Scroll console up";
      else if (IsOverButton(bConsoleDown)) lConsoleTip.Text="Scroll console down";
      */
      GUIControl* b = GUIControl.GetAtScreenXY(mouse.x,  mouse.y);
      if (b==bConsoleScript) lConsoleTip.Text="Run an external script";
      else if (b==bConsoleVariables) lConsoleTip.Text="Display variables window";
      else if (b==bConsoleHelp) lConsoleTip.Text="Help";
      else if (b==bConsoleUp) lConsoleTip.Text="Scroll console up";
      else if (b==bConsoleDown) lConsoleTip.Text="Scroll console down";
      else if (b==bConsoleBetaTest) lConsoleTip.Text="Show betatesters interface (pauses game)";
      else lConsoleTip.Text="";
    }
}


function ConDets::ScrollUp()
{
  lstConsole.ScrollUp();
}

function ConDets::ScrollDown()
{
  lstConsole.ScrollDown();
}

  
function ConDets::Help_OnClick()
{
  AGSConsole.RunCommand("help");  
}

function ConDets::Variables_OnClick()
{
  Dbg.ShowHideVariables(); //show the ultravariables window  
}

function ConDets::Scripts_OnClick()
{
  AGSConsole.RunCommand("list_scripts");  
}

int hiddenActivation_currentStep=0;
function ConDets::HiddenActivation(int step)
{
  
  if (hiddenActivation_currentStep == 1 && step==2)
  {
    if (!Game.InSkippableCutscene) {
      //ControlPanel.Exit();
      GUIlogic.UnPause();
      GUIlogic.Pause(false);
      AGSConsole.ShowHide();
      hiddenActivation_currentStep = 0;
    }    
  }
  else if (hiddenActivation_currentStep == 1 && step==1)
  {
    hiddenActivation_currentStep = 0; //reset. the click sequence has to be accurate, like every cheat code
  }
  
  hiddenActivation_currentStep=step;
}


  