/*int useItem = 0;
int giveItem = 0;

//go back to "walk to" with no inventory item selected
static void ActionsLogic::ResetCursor() {
    mouse.Mode = eModeWalkto; // reset mode to default Walk
    Mouse.Mode = eModeUsermode2;
    
    player.ActiveInventory = null; // reset the activated inventory to nothing (used mainly for use with)
    game.inv_activated = 0; // reset activated inv to 0 (used mainly for give)
  
}
*/

 
/*
function OnMouseClick_right1() {
    
    // declare variables which register hotspot/object/character
    Hotspot* hCheck = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
    Character* cCheck = Character.GetAtScreenXY(mouse.x, mouse.y);
    Object* oCheck = Object.GetAtScreenXY(mouse.x, mouse.y);
    InventoryItem* invCheck = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
    // checks to see if action has been performed already
    bool checkDone = false;
    
    // Objects
    // if no object, do nothing, otherwise...
    if (Object.GetAtScreenXY(mouse.x, mouse.y) == null) {
      // do nothing
    // if ID is relevant and action is able to be done, otherwise...
    } else if (oCheck.ID >= 0 && checkDone == false) {
      // set to true; action is finished
      checkDone = true;
      // if the name of the object in question does not contain door, trunk, car, cabinet, or drawer then lookat is primary
      if (oCheck.Name.IndexOf("door") == -1 && oCheck.Name.IndexOf("trunk") == -1 && oCheck.Name.IndexOf("car") == -1 && oCheck.Name.IndexOf("cabinet") == -1 && oCheck.Name.IndexOf("drawer") == -1) {
        ProcessClick(mouse.x, mouse.y, eModeLookat ); // process interaction
      // otherwise open is primary
      } else {
        ProcessClick(mouse.x, mouse.y, eModeOpen ); // process interaction
      }
    // default
    } else {
      ProcessClick(mouse.x, mouse.y, eModeWalkto ); // process interaction
    }  
    
    // Characters
    // if no character, do nothing, otherwise...
    if (Character.GetAtScreenXY(mouse.x, mouse.y) == null) {
      // do nothing
    // if ID is relevant and action is able to be done, otherwise...
    } else if (cCheck.ID >= 1 && checkDone == false) {
      // set to true; action is finished
      checkDone = true;
      // Characters have talk as primary
      ProcessClick(mouse.x, mouse.y, eModeTalkto ); // process interaction
    // default
    } else {
      ProcessClick(mouse.x, mouse.y, eModeWalkto ); // process interaction
    }
    
    // Hotspots
    // if no hotspot, do nothing, otherwise...
    if (Hotspot.GetAtScreenXY(mouse.x, mouse.y) == null) {
      // do nothing
    // if ID is relevant and action is able to be done, otherwise...
    } else if (hCheck.ID >= 1 && checkDone == false) {
      // set to true; action is finished
      checkDone = true;
      // Hotspots have look as primary
      ProcessClick(mouse.x, mouse.y, eModeLookat ); // process interaction
    // default
    } else {
      ProcessClick(mouse.x, mouse.y, eModeWalkto ); // process interaction
    }
    
    // Inventory Item
    // if no hotspot, do nothing, otherwise...
    if (InventoryItem.GetAtScreenXY(mouse.x, mouse.y) == null) {
      // do nothing
    // if ID is relevant and action is able to be done, otherwise...
    } else if (invCheck.ID >= 1 && checkDone == false) {
      // set to true; action is finished
      checkDone = true;
      // Inventory has look as primary
      ProcessClick(mouse.x, mouse.y, eModeLookat ); // process interaction
    // default
    } else {
      ProcessClick(mouse.x, mouse.y, eModeWalkto ); // process interaction
    }
    
    checkDone = false;
    
    ResetCursor();
    
}

*/

/*
CursorMode availableRightClick; //stores the available right-click action that gets detected by DetectAvailableRightClick

static CursorMode ActionsLogic::GetAvailableRightClick() {
  if (availableRightClick == 0) return eModeWalkto; //safety for very first call in case DetectAvailableRightClick was never called before
   return availableRightClick;
}

static CursorMode ActionsLogic::DetectAvailableRightClick() {
    // Inventory Item
    InventoryItem* invCheck = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
    if (invCheck != null)         //if there is an inventory item
    {
        if (invCheck.ID >= 1 ) {    //if its ID makes sense
          // Inventory has look as primary
          availableRightClick = eModeLookat;
          return availableRightClick ; 
        }
    }
    else //if (invCheck != null)
    {            
        // Objects
        Object* oCheck = Object.GetAtScreenXY(mouse.x, mouse.y);
        if (oCheck != null)          //if there is an object
        {
            if (oCheck.ID >= 0)        // if ID makes sense
            {
              // if the name of the object in question does not contain
              //door, trunk, car, cabinet, or drawer then lookat is primary
              //TODO: make that cleaner and flexible
              if (   oCheck.Name.IndexOf("door") == -1 
                  && oCheck.Name.IndexOf("trunk") == -1 
                  && oCheck.Name.IndexOf("car") == -1 
                  && oCheck.Name.IndexOf("cabinet") == -1 
                  && oCheck.Name.IndexOf("drawer") == -1) {
                availableRightClick = eModeLookat;
                return availableRightClick;
              // otherwise open is primary
              } else {
                availableRightClick = eModeOpen;
                return availableRightClick;
              }
            }
        } 
        else //if (oCheck != null) {
        {
            // Characters
            Character* cCheck = Character.GetAtScreenXY(mouse.x, mouse.y);
            if (cCheck != null)   //if there is a character
            {
                if (cCheck.ID >= 1) { //if ID makes sense (you don't want to click on Indy!)
                  // Characters have talk as primary
                  availableRightClick = eModeTalkto;
                  return availableRightClick;
                } 
            } 
            else //if (cCheck != null) {
            {
                // Hotspots
                Hotspot* hCheck = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
                if (hCheck != null)         //if there is a hotspot
                {
                    if (hCheck.ID >= 1 ) {  //if its ID makes sense
                        // Hotspots have look as primary
                        availableRightClick = eModeLookat;
                        return  availableRightClick; 
                    }
                }
            }
        }
    }
    
    //mode by default
    availableRightClick = eModeWalkto;
    return availableRightClick;

    
}




function SetGiveItem(int itemID)
{
  giveItem = itemID;
}

function SetUseItem(int itemID){
  useItem = itemID;
}

function ResetGiveItem() {
  SetGiveItem(0);
}
function ResetUseItem(){
  SetUseItem(0);
}
function GetGiveItem()
{
  return giveItem;
}
function GetUseItem()
{
  return useItem;
}
*/

/*
static CursorMode ActionsLogic::ActionToHighlight() {

  // declare variables which register hotspot/object/character
  Hotspot* hCheckSt = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  Character* cCheckSt = Character.GetAtScreenXY(mouse.x, mouse.y);
  Object* oCheckSt = Object.GetAtScreenXY(mouse.x, mouse.y);
  InventoryItem* invCheckSt = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
  // checks to see if action has been performed already
  bool checkDoneSt = false;
    
  // Objects
  // if no object, do nothing, otherwise...
  if (Object.GetAtScreenXY(mouse.x, mouse.y) == null) {
    // do nothing
  // if ID is relevant and action is able to be done, otherwise...
  } else if (oCheckSt.ID >= 0 && checkDoneSt == false) {
    // set to true; action is finished
    checkDoneSt = true;
    // if the name of the object in question does not contain door, trunk, car, cabinet, or drawer then lookat is primary
    if (oCheckSt.Name.IndexOf("door") == -1 && oCheckSt.Name.IndexOf("trunk") == -1 && oCheckSt.Name.IndexOf("car") == -1 && oCheckSt.Name.IndexOf("cabinet") == -1 && oCheckSt.Name.IndexOf("drawer") == -1) {

      GUIlogic.Highlight_LookAt();
      
    // otherwise open is primary
    } else {
      GUIlogic.Highlight_Open();
    }
  // default
  } else {
  }  
    
  // Characters
  // if no character, do nothing, otherwise...
  if (Character.GetAtScreenXY(mouse.x, mouse.y) == null) {
    // do nothing
  // if ID is relevant and action is able to be done, otherwise...
  } else if (cCheckSt.ID >= 1 && checkDoneSt == false) {
    // set to true; action is finished
    checkDoneSt = true;
    // Characters have talk as primary
    GUIlogic.Highlight_TalkTo();
  // default
  } else {
  }
    
  // Hotspots
  // if no hotspot, do nothing, otherwise...
  if (Hotspot.GetAtScreenXY(mouse.x, mouse.y) == null) {
    // do nothing
  // if ID is relevant and action is able to be done, otherwise...
  } else if (hCheckSt.ID >= 1 && checkDoneSt == false) {
    // set to true; action is finished
    checkDoneSt = true;
    // Hotspots have look as primary
    GUIlogic.Highlight_LookAt();
  // default
  } else {
  }
  
  // Inventory
  // if no inv, do nothing, otherwise...
  if (InventoryItem.GetAtScreenXY(mouse.x, mouse.y) == null) {
    // do nothing
  // if ID is relevant and action is able to be done, otherwise...
  } else if (invCheckSt.ID >= 1 && checkDoneSt == false) {
    // set to true; action is finished
    checkDoneSt = true;
    // Inventory has look as primary
    GUIlogic.Highlight_LookAt();
  // default
  } else {
  }

  if (checkDoneSt == false) { 
    GUIlogic.Highlight_Nothing();
  }  
  
  
}

*/


/*
static CursorMode ActionsLogic::ActionToHighlight() {

  // declare variables which register hotspot/object/character
  Hotspot* hCheckSt = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  Character* cCheckSt = Character.GetAtScreenXY(mouse.x, mouse.y);
  Object* oCheckSt = Object.GetAtScreenXY(mouse.x, mouse.y);
  InventoryItem* invCheckSt = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
  // checks to see if action has been performed already
  bool checkDoneSt = false;
    
  // Objects
  // if no object, do nothing, otherwise...
  if (Object.GetAtScreenXY(mouse.x, mouse.y) == null) {
    // do nothing
  // if ID is relevant and action is able to be done, otherwise...
  } else if (oCheckSt.ID >= 0 && checkDoneSt == false) {
    // set to true; action is finished
    checkDoneSt = true;
    // if the name of the object in question does not contain door, trunk, car, cabinet, or drawer then lookat is primary
    if (oCheckSt.Name.IndexOf("door") == -1 && oCheckSt.Name.IndexOf("trunk") == -1 && oCheckSt.Name.IndexOf("car") == -1 && oCheckSt.Name.IndexOf("cabinet") == -1 && oCheckSt.Name.IndexOf("drawer") == -1) {

      return eModeLookat;
      
    // otherwise open is primary
    } else {
      return eModeOpen;
    }
  // default
  } else {
  }  
    
  // Characters
  // if no character, do nothing, otherwise...
  if (Character.GetAtScreenXY(mouse.x, mouse.y) == null) {
    // do nothing
  // if ID is relevant and action is able to be done, otherwise...
  } else if (cCheckSt.ID >= 1 && checkDoneSt == false) {
    // set to true; action is finished
    checkDoneSt = true;
    // Characters have talk as primary
    return eModeTalkto;
  // default
  } else {
  }
    
  // Hotspots
  // if no hotspot, do nothing, otherwise...
  if (Hotspot.GetAtScreenXY(mouse.x, mouse.y) == null) {
    // do nothing
  // if ID is relevant and action is able to be done, otherwise...
  } else if (hCheckSt.ID >= 1 && checkDoneSt == false) {
    // set to true; action is finished
    checkDoneSt = true;
    // Hotspots have look as primary
    return eModeLookat;
  // default
  } else {
  }
  
  // Inventory
  // if no inv, do nothing, otherwise...
  if (InventoryItem.GetAtScreenXY(mouse.x, mouse.y) == null) {
    // do nothing
  // if ID is relevant and action is able to be done, otherwise...
  } else if (invCheckSt.ID >= 1 && checkDoneSt == false) {
    // set to true; action is finished
    checkDoneSt = true;
    // Inventory has look as primary
    return eModeLookat;
  // default
  } else {
  }

  if (checkDoneSt == false) { 
    return eModeWalkto;
  }  
  
  
}
*/




//////////////////////////////////////////////////
//
//    Hacks around the clicks on inventory items
//
//////////////////////////////////////////////////


/*
CursorMode realItemMode;

 static void ActionsLogic::ItemClick_TriggerRealMode(CursorMode mode) {
   realItemMode = mode;
   
   CursorMode fakeItemMode = eModePickup;
   
   //DEBUG
   //Display(String.Format("RunInteraction. inv_activated=%d, realMode=%d", game.inv_activated,  realItemMode));
   
   //This is the tricky part: we force the call of "RunInteraction"..
   //...But with a mode (pickup) that will ALWAYS trigger the event "other click".
   //Once we'll be in the "other clik" function, we'll retrive the REAL mode
   //that we wanted to use (stored in realItemMode)
   inventory[game.inv_activated].RunInteraction(fakeItemMode);
 }

 static CursorMode ActionsLogic::ItemClick_GetRealMode() {
   return realItemMode;
 }

 static void ActionsLogic::Items_OnRightClick() {
    CursorMode rightClickMode = ActionsLogic.GetAvailableRightClick();
    ActionsLogic.ItemClick_TriggerRealMode(rightClickMode); //we use our special function
    //ProcessClick(mouse.x, mouse.y,  game.used_mode);
 }

 static void ActionsLogic::Items_OnLeftClick() {
    if (mouse.Mode == eModeInteract) { //the cursor is "Use" but with no object selected yet
      Mouse.Mode = eModeUseinv;
      player.ActiveInventory = inventory[game.inv_activated];
      SetUseItem(player.ActiveInventory.ID);
    } else if (mouse.Mode == eModeGive) { //the cursor is "give" but with no object selected yet
      if (GetGiveItem() == 0) {
          Mouse.Mode = eModeUseinv;
          player.ActiveInventory = inventory[game.inv_activated];
          SetGiveItem(player.ActiveInventory.ID);
      } else {
          //do nothing. You can't "give" an object to another object
      }
    } else {      
      ActionsLogic.ItemClick_TriggerRealMode(mouse.Mode); //we use our special function
      ProcessClick(mouse.x, mouse.y,   game.used_mode );
    }
    
 }
 */