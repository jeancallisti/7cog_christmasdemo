


enum NormalsEnum
{
    eNormal_Unknown = 0, 
    eNormal_North, 
    eNormal_South, 
    eNormal_East, 
    eNormal_West, 
};

struct CatacombMazeLightingData
{
    int COLOR_RED;
    int COLOR_GREEN;
    int COLOR_BLUE;
    int COLOR_YELLOW;
    int COLOR_WHITE;
    int COLOR_BLACK;

    int RoomWidth;
    int RoomHeight;
    
    bool enabled;
    int MAX_AREAS;
    int areasCount;
    
    int bgSpriteID;
    int maskSpriteID;
    int normalsSpriteID;
    int normalsOrientationsSpriteID;
    
    Object* objects[];
    DynamicSprite* sprites[];
    
    Object* oFlickering; //extra object on which we use tween to automate the flickering and get our values from it
    
    //computed values
    int objectsBaselineX[];
    int objectsBaselineY[];
    NormalsEnum objectsNormal[];

    //int objectsTransparency[]; //this is the base value for object transparency, but we'll add the flickering effect
};
CatacombMazeLightingData cmData;


/////////////////////////////////////////////////////
//
//  HASHMAP  (START)
//
/////////////////////////////////////////////////////

//we will use this little hashmap to check (quickly!) if a color is already known to us.
//Original code : http://www.algolist.net/Data_structures/Hash_table/Simple_example
struct ColorsHashMap 
{
    int FACTOR;
    int table[];
    int tablePhysicalSize;
    int nbSlots;

    import static void Init();
    import static int Get(int key);
    import static void Put(int key, int value);
};
ColorsHashMap colorsHashMap;

static int ColorsHashMap::Get(int key)
{
    int hash = (key % colorsHashMap.nbSlots); //*2 because these are (key,value) pairs
    int count=0;
    while (colorsHashMap.table[hash*2+0] != -1 && colorsHashMap.table[hash*2+0] != key && count<colorsHashMap.nbSlots) {
          hash = (hash+1) % colorsHashMap.nbSlots;
    }
    
    if (colorsHashMap.table[hash*2+0] == -1 || count >= colorsHashMap.nbSlots)
          return -1;
    else
          return colorsHashMap.table[hash*2+1];
}

static void ColorsHashMap::Put(int key, int value)
{
    int hash = (key % colorsHashMap.nbSlots); //*2 because these are (key,value) pairs
    int count=0;
    while (colorsHashMap.table[hash*2+0] != -1 && colorsHashMap.table[hash*2+0] != key && count<colorsHashMap.nbSlots) {
          hash = (hash+1) % colorsHashMap.nbSlots;
    }
    
    if (count >=colorsHashMap.nbSlots)
        AbortGame("colors hashmap too small. Increase MAX_AREAS");
        
    colorsHashMap.table[hash*2+0] = key;
    colorsHashMap.table[hash*2+1] = value;
}
    
 
static void ColorsHashMap::Init()
{
    colorsHashMap.FACTOR = 10; 
    colorsHashMap.nbSlots = colorsHashMap.FACTOR*cmData.MAX_AREAS;  //FACTOR times more room than actually needed for all values (to avoid colisions, that's how hashmaps work, duh)
    colorsHashMap.tablePhysicalSize = colorsHashMap.nbSlots*2; //i%2 is the color (i.e. the key), i%2+1 is the area (i.e. the value)
    colorsHashMap.table = new int[colorsHashMap.tablePhysicalSize]; 
    for (int i=0; i<colorsHashMap.tablePhysicalSize; i++) { colorsHashMap.table[i] = -1; } //just some primitive reset
}

/////////////////////////////////////////////////////
//
//  HASHMAP  (END)
//
/////////////////////////////////////////////////////


void noloopcheck CatacombMazeLighting_AnalyzeSprites()
{
    ColorsHashMap.Init();
    
    
    DynamicSprite* sBg = DynamicSprite.CreateFromExistingSprite(cmData.bgSpriteID);
    DynamicSprite* sMask = DynamicSprite.CreateFromExistingSprite(cmData.maskSpriteID);
    //DynamicSprite* sNormals = DynamicSprite.CreateFromExistingSprite(cmData.normalsSpriteID);
    
    DrawingSurface* dsBg = sBg.GetDrawingSurface();
    DrawingSurface* dsMask = sMask.GetDrawingSurface();
    //DrawingSurface* dsNormals = sNormals.GetDrawingSurface();
    
    //The following algorithm works as follows : we crawl the mask sprite and, based on the colors of the areas (each have a different tint) 
    //we try to determine how many there are, and what are their min_x,max_x,min_y,max_y.
    //We then create as many sprites as there are areas and copy the original background sprite in there (only keeping the corresponding area in each psrite).
    int min_x[] = new int[cmData.MAX_AREAS]; for (int i=0; i<cmData.MAX_AREAS; i++) { min_x[i] = 10000; }
    int max_x[] = new int[cmData.MAX_AREAS]; for (int i=0; i<cmData.MAX_AREAS; i++) { max_x[i] = -10000; }
    int min_y[] = new int[cmData.MAX_AREAS]; for (int i=0; i<cmData.MAX_AREAS; i++) { min_y[i] = 10000; }
    int max_y[] = new int[cmData.MAX_AREAS]; for (int i=0; i<cmData.MAX_AREAS; i++) { max_y[i] = -10000; }
    
    DrawingSurface* dsCurrentSprite = null;
    
    int currentColor; int currentArea = -1;
    int previousColor = -666; //beware of "-1"
    for (int y=0; y<cmData.RoomHeight; y++)
    {
        previousColor = -666;
        currentArea = -1;
        for (int x=0; x<cmData.RoomWidth; x++)
        {
            currentColor = dsMask.GetPixel(x, y);
            if (currentColor!=-1  && currentColor!=cmData.COLOR_BLACK && currentColor!= cmData.COLOR_WHITE) //we have an actual color, not transparency (or B or W, which are reserved)
            {   
                if (currentColor==previousColor) { //same color as before. Let's continue our copying task
                    //nothing special to do
                } else {
                    //first, let's stop drawing into the current sprite
                    if (dsCurrentSprite!=null) dsCurrentSprite.Release();
                    
                    //do we know this color?
                    int area = ColorsHashMap.Get(currentColor);
                    if (area==-1) { //it's a brand new color
                        if (cmData.areasCount >= cmData.MAX_AREAS)
                            AbortGame("Found more than %d colors in sprite %d. Increase MAX_AREAS!", cmData.MAX_AREAS,  cmData.maskSpriteID);
                        currentArea = cmData.areasCount;
                        ColorsHashMap.Put(currentColor,  currentArea); //remeber which area it represents
                        cmData.sprites[currentArea] = DynamicSprite.Create(cmData.RoomWidth, cmData.RoomHeight, true);
                        dsCurrentSprite = cmData.sprites[currentArea].GetDrawingSurface();
                        cmData.areasCount++;
                    } else { //we already know this color. Let's reopen its sprite
                        currentArea = area;
                        dsCurrentSprite = cmData.sprites[area].GetDrawingSurface();
                    }
                }
                
                //copy the pixel from the background into the current area sprite
                dsCurrentSprite.DrawingColor = dsBg.GetPixel(x, y);
                dsCurrentSprite.DrawPixel(x, y);
                
                //also compute the bounding box of current sprite's actual non-transparent pixels
                if (x < min_x[currentArea]) min_x[currentArea] = x;
                if (x > max_x[currentArea]) max_x[currentArea] = x;
                if (y < min_y[currentArea]) min_y[currentArea] = y;
                if (y > max_y[currentArea]) max_y[currentArea] = y;
            }
            previousColor = currentColor;
        }
    }
    
    
    dsBg.Release();
    dsMask.Release();
    //dsNormals.Release();
    
    sBg.Delete();
    sMask.Delete();
    //sNormals.Delete();
    
    
}



NormalsEnum CatacombMazeLighting_ColorToOrientation(int color) 
{
    if (color == cmData.COLOR_BLUE) return eNormal_North;
    if (color == cmData.COLOR_RED) return eNormal_East;
    if (color == cmData.COLOR_GREEN) return eNormal_West;
    if (color == cmData.COLOR_YELLOW) return eNormal_South;

    return eNormal_Unknown;
}


int[] GetRGB(int color)
{
  bool highBit = true; //or false, you decide
 
  if (color > 65535) color -= 65536;
  int rgb[] = new int[3];
  rgb[0] = ((color >> 11) & 31) << 3;
  rgb[1] = ((color >> 6) & 31) << 3;
  rgb[2] = (color & 31) << 3;
  if (highBit)
  {
    rgb[0] = rgb[0] | 7;
    rgb[1] = rgb[1] | 3;
    rgb[2] = rgb[2] | 7;
  }    
  return rgb;
}

void noloopcheck CatacombMazeLighting_AnalyzeNormals()
{
    DynamicSprite* sNormals = DynamicSprite.CreateFromExistingSprite(cmData.normalsSpriteID);
    DrawingSurface* dsNormals = sNormals.GetDrawingSurface();
    /*
    DynamicSprite* sNormalsOrientations = DynamicSprite.CreateFromExistingSprite(cmData.normalsOrientationsSpriteID);
    DrawingSurface* dsNormalsOrientations = sNormalsOrientations.GetDrawingSurface();
    */
    int STEP=5; //we operate every 5 pixels to make it faster
    for (int y=0; y<cmData.RoomHeight; y+=STEP)
    {
        for (int x=0; x<cmData.RoomWidth; x+=STEP)
        {
            int color = dsNormals.GetPixel(x, y);
            if (color!=-1 && color!=cmData.COLOR_BLACK && color!= cmData.COLOR_WHITE) //we have an actual color, not transparency (or b or w, which are reserved colors)
            {   
                int area = ColorsHashMap.Get(color);
                if (area == -1) {
                    AbortGame("could not locate colored dot corresponding to color %d in sprite %d. Make sure it's large enough (at least 5x5 square)", color, cmData.normalsSpriteID);
                }
                cmData.objectsBaselineX[area] = x;
                cmData.objectsBaselineY[area] = y;
                /*
                int normalOrientationColor = dsNormalsOrientations.GetPixel(x, y);
                NormalsEnum orientation = CatacombMazeLighting_ColorToOrientation(normalOrientationColor);
                if (orientation == eNormal_Unknown) {
                    int rgb[] = GetRGB(normalOrientationColor);
                    AbortGame("Issue in sprite %d : could not find pixel at (%d,%d) that gives valuable info about normal orientation. Should be RED, GREEN, BLUE or YELLOW. found %d==(%d,%d,%d)", cmData.normalsOrientationsSpriteID, x, y,  normalOrientationColor,  rgb[0],  rgb[1], rgb[2]);
                }
                
                cmData.objectsNormal[area] = orientation; 
                */
            }
            
        }
    }
    
    dsNormals.Release();
    sNormals.Delete();
    /*
    dsNormalsOrientations.Release();
    sNormalsOrientations.Delete();
    */
}



void CatacombMazeLighting_AssertSpriteSize(int ID)
{
    DynamicSprite* s = DynamicSprite.CreateFromExistingSprite(ID, 
    false);
    DrawingSurface* ds = s.GetDrawingSurface();
    if (ds.Width != cmData.RoomWidth || ds.Height != cmData.RoomHeight)
        AbortGame("Sprite %d doesn't match cmData.RoomWidth and cmData.RoomWidth (expected %d*%d, found %d*%d). Check the value of cmData.bgSpriteID,cmData.maskSpriteID and cmData.normalsSpriteID.", ID, cmData.RoomWidth, cmData.RoomHeight,  ds.Width, ds.Height);
    
    ds.Release();
    
    s.Delete();
    
}



//Reset everything
void CatacombMazeLighting_FirstTimeInit()
{
    
    cmData.COLOR_BLUE = Game.GetColorFromRGB(7, 3, 255);
    //FadeIn(64); Display("blue=%d", cmData.COLOR_BLUE);
    cmData.COLOR_RED  = Game.GetColorFromRGB(255, 0, 0);
    cmData.COLOR_GREEN = Game.GetColorFromRGB(0, 255, 0);
    cmData.COLOR_YELLOW = Game.GetColorFromRGB(255, 255, 0);
    cmData.COLOR_BLACK = Game.GetColorFromRGB(0, 0, 0);
    cmData.COLOR_WHITE = Game.GetColorFromRGB(255, 255, 254);
    
    
    cmData.RoomWidth = 500;
    cmData.RoomHeight = 200;
    

    cmData.MAX_AREAS = 200;
    cmData.areasCount = 0;
   
    cmData.bgSpriteID = 1260;
    cmData.maskSpriteID = 1262;
    cmData.normalsSpriteID = 1261;
    //cmData.normalsOrientationsSpriteID = 1259;
    
    CatacombMazeLighting_AssertSpriteSize(cmData.bgSpriteID);
    CatacombMazeLighting_AssertSpriteSize(cmData.maskSpriteID);
    CatacombMazeLighting_AssertSpriteSize(cmData.normalsSpriteID);
    
    
    //cmData.spritesIDs = new int[cmData.MAX_AREAS];
    cmData.objects = new Object[cmData.MAX_AREAS];
    cmData.objectsNormal = new NormalsEnum[cmData.MAX_AREAS];
    cmData.objectsBaselineX = new int[cmData.MAX_AREAS];
    cmData.objectsBaselineY = new int[cmData.MAX_AREAS];
    
    //Silly safety
    if (cmData.sprites!=null) {
        for (int i=0; i<cmData.MAX_AREAS; i++) { if(cmData.sprites[i]!=null) cmData.sprites[i].Delete(); }
    }
    cmData.sprites = new DynamicSprite[cmData.MAX_AREAS];
    
    
    CatacombMazeLighting_AnalyzeSprites();
    CatacombMazeLighting_AnalyzeNormals();
    

}

void CatacombMazeLighting_ClaimRoomObjects()
{

    FadeIn(64); //DEBUG
    //int maxSprites = cmData.sprites_range_end+1 - cmData.sprites_range_start;
    int countSprites = 0;
    for (int i=0; i < Room.ObjectCount && countSprites<cmData.areasCount; i++)
    {
        //Display("object(%d).Graphic = %d",i,  object[i].Graphic); //DEBUG
        if (object[i].Graphic == 0)  //this is a dummy object with no image. That's what we're looking for!
        {
            //claim "flickering" object first, as it is a special case:
            if (cmData.oFlickering==null) {
                cmData.oFlickering = object[i];
            }
            else
            {
                cmData.objects[countSprites] = object[i];
                cmData.objects[countSprites].Graphic = cmData.sprites[countSprites].Graphic;
                //put it int he top left corner, as it's supposed to have the exact size of the room
                cmData.objects[countSprites].X = 0;
                cmData.objects[countSprites].Y = Room.Height;
                cmData.objects[countSprites].Baseline = 1; //Behind everything
                //Display("object(%d).Graphic = %d",i,  object[i].Graphic); //DEBUG
                
                countSprites++;
            }
        }
    }
    
    if (countSprites != cmData.areasCount)
        AbortGame("You need to create more dummy sprites in room 'generic catacombs background (in water)'. Found %d, expected %d.", countSprites,  cmData.areasCount);
    
    cmData.oFlickering.Y=0; cmData.oFlickering.X = Room.Width+100; //not visible in the room
}


static void CatacombMazeLighting::EnableDisable(bool enabled)
{
    cmData.enabled = enabled;
    
    if(enabled) {
        if (cmData.RoomWidth!=Room.Width || cmData.RoomHeight!=Room.Height) {
            AbortGame("Please use the 'maze lighting' module in a room that has the same width and height as cmData.RoomWidth and cmData.RoomHeight. Expected (%d*%d), found (%d*%d). Consider changing the values of cmData.RoomWidth or cmData.RoomHeight.", Room.Width, Room.Height, cmData.RoomWidth, cmData.RoomHeight);
        }
        
        //CatacombMazeLighting_FirstTimeInit(); //Reset everything
        CatacombMazeLighting_ClaimRoomObjects();
        cmData.oFlickering.TweenTransparency(0.5, 20, eEaseInEaseOutTween, eRepeatTween);
    }
}

int DistanceToTransparency(int distance)
{
    int MAX_DISTANCE = 100; //beyond that distance, transparency will be 100%. If distance==0, transparency=0;
 
    if (distance > MAX_DISTANCE) distance = MAX_DISTANCE;
    
    return (distance*100)/MAX_DISTANCE; //this gives us a vaue from 0 to 100...
}

int min(int a,  int b) { if (a < b) return a; return b; }

void CatacombMazeLighting_CalculateObjectsDistanceToPlayer()
{
    //FadeIn(64); //DEBUG
    float VERTICAL_FACTOR =2.5; //we multiply the distance by 2 on the Y axis in order to correct the perspective

    //int NORMAL_FACTOR = 4;
    
    for (int i=0; i<cmData.areasCount; i++)
    {
        float cX = IntToFloat(cmData.objectsBaselineX[i]); float cY = IntToFloat(cmData.objectsBaselineY[i]);
        float x=IntToFloat(player.x); float y= IntToFloat(player.y);
        
        int distance = FloatToInt(Maths.Sqrt((cX-x)*(cX-x) + (cY-y)*VERTICAL_FACTOR*(cY-y)*VERTICAL_FACTOR));
        //Display("object %d at (%d,%d). distance(%d) = %d",i, cmData.objectsCentersX[i], cmData.objectsCentersY[i], i,  distance);
        
        int transparency = DistanceToTransparency(distance);
        
        int flickeringTransp = 100 -transparency; //the extra trabsparency takes place within the remaining transparency percents
        
        cmData.objects[i].Transparency = transparency + (cmData.oFlickering.Transparency * flickeringTransp)/100; 
        
        /*
        // Meh, we'll wait until this is more perfected. At the moment, this "normals" technique looks like shit
        switch (cmData.objectsNormal[i]) {
            case eNormal_East:
                if (player.x < cmData.objectsBaselineX[i] -40) cmData.objects[i].Transparency = min(cmData.objects[i].Transparency * (cmData.objects[i].Transparency/2),  100);
                break;
            case eNormal_West:
                if (player.x > cmData.objectsBaselineX[i] + 40) cmData.objects[i].Transparency = min(cmData.objects[i].Transparency * (cmData.objects[i].Transparency/2),  100);
                break;      
            case eNormal_South:
                if (player.y < cmData.objectsBaselineY[i] -15) cmData.objects[i].Transparency = min(cmData.objects[i].Transparency * (cmData.objects[i].Transparency/2),  100);
                break;
            case eNormal_North:
                if (player.y > cmData.objectsBaselineY[i] +15) cmData.objects[i].Transparency = min(cmData.objects[i].Transparency * (cmData.objects[i].Transparency/2),  100);
                break;

            default:
                break;
        }
        */
    }
    
}

void repeatedly_execute()
{
    if (cmData.enabled)
    {
        CatacombMazeLighting_CalculateObjectsDistanceToPlayer();
        
        
    }
}

void game_start()
{
    CatacombMazeLighting_FirstTimeInit();
    
}