
/////////////////////////////////////////////////////
//
//
//      SIMPLE HASHMAP
//      
//
//////////////////////////////////////////////////////

#define MAXDIALOGVAR 500

/*
struct HashMap {
    bool used;
    String key;
    int value;
    
};

HashMap map[MAXDIALOGVAR];


int Hash(String key) 
{
  int lastChar = key.Chars[key.Length-1]; //we sort them by last char rather than first char
  return (lastChar*50)%MAXDIALOGVAR; //we expect 50 variables per character
}

int HashMap_GetValue(String key)
{
  if (key == null || key == "")
    AbortGame("Cannot use empty key");
    
  key = key.LowerCase(); //not case_sensitive
  int hash = Hash(key);
  
  //Display(String.Format("get %s: %d",key, hash)); //DEBUG
  
  int count;
  while (map[hash].used && map[hash].key!=key && count<MAXDIALOGVAR) {
        hash = (hash + 1) % MAXDIALOGVAR;
        count++;
  }
  if (!map[hash].used || count>=MAXDIALOGVAR ) //the variable doesn't exist. We return 0
        return 0;
  else
        return map[hash].value;
                  
}

void HashMap_SetValue(String key,  int value) {

  if (key == null || key == "")
    AbortGame("Cannot use empty key");
    
  key = key.LowerCase(); //not case_sensitive
  int hash = Hash(key);

  //Display(String.Format("set %s: %d",key, hash)); //DEBUG
  
  int count=0;
  while (map[hash].used && map[hash].key!=key && count<MAXDIALOGVAR) {
        hash = (hash + 1) % MAXDIALOGVAR;
        count++;
  }
  if (count>=MAXDIALOGVAR)
    AbortGame("Hashmap is full. Ask developers to increase variable 'MAXDIALOGVAR'.");
    
  map[hash].key = key;
  map[hash].value = value;
  map[hash].used=true;         
}
*/

      
/////////////////////////////////////////////////////
//
//
//      DIALOGS VARIABLES
//      We use them like global variables, but in a module (I hate global variables)
//
//////////////////////////////////////////////////////


/*
int values[MAXDIALOGVAR];

static void DialogsLogic::SetVar_(DialogVars var,  int value) {
  values[var]= value;
}


static bool DialogsLogic::GetVar_(DialogVars var) {
  if (values[var] != 0) return true;
  return false;
}
*/

static void DialogsLogic::SetVarBool(String var,  bool value) {
  //HashMap_SetValue(var, value); //using our little hashmap
  int val = 0; if (value) val = 1;
  Global.Set(var, val); //using ultravariables
}


static bool DialogsLogic::GetVarBool(String var) {
  //if (HashMap_GetValue(var) != 0) return true;  //using our little hashmap
  return (Global.Get(var) != 0);  //using ultravariables
}


static int DialogsLogic::GetVarInt(String var) {
  //if (HashMap_GetValue(var) != 0) return true;  //using our little hashmap
  return Global.Get(var);
}

static void DialogsLogic::SetVarInt(String var,  int value) {
  Global.Set(var, value); //using ultravariables
}


/////////////////////////////////////////////////////
//
//
//      UTILITY FUNCTIONS
//
//
//////////////////////////////////////////////////////

static void CharactersLogic::setIndyView_suit() {
  player.ChangeView(INDYSUIT_4); //DEBUG
  if (player.View == INDYSUIT_4) 
    player.z = -7; //we need to move the sprites down because of the shadows underneath the feet
  player.SetIdleView(INDYSUIT_IDLE4,  0);
  player.SpeechView = INDYSUIT_TALK4;
}

/////////////////////////////////////////////////////
//
//
//      CHARACTERS LOGIC
//
//
//////////////////////////////////////////////////////


static void CharactersLogic::Mulbray(Action usedAction) {
  
  int charX = 167;
  int charY = 131;
  Character* charac = cMulbray;
  
  player.Walk(charX, charY, eBlock);
  player.FaceCharacter(charac, eBlock);
  
  switch(usedAction){
    case eGA_GiveTo: 
      if (player.ActiveInventory == iWallet) {
        player.Say("I don't think Mulbray needs to see my wallet.");
      } else if (player.ActiveInventory == iBarnett_Hammer1 || player.ActiveInventory == iBarnett_Hammer2 ) {
        player.Say("How would you tell which hammer is genuine, and which one is fake?");
        cMulbray.Say("Hmm... They look exactly the same. That's amazing.");
        cMulbray.Say("It's that student.. You know? the head of copy club.");
        cMulbray.Say("He's really brought copy techniques to a whole new level.");
        cMulbray.Say("...But I'd say this is the genuine hammer.");
        DialogsLogic.SetVarBool("eDialog_IndySortedHammers",  true);
        iBarnett_Hammer1.Name= "genuine hammer";
        iBarnett_Hammer2.Name= "copy of hammer";
        player.Say("Thanks a lot!");
      } else {
        player.Say("I don't think he'd like that.");
      }  
      break;
    case eGA_Pull: player.Say("I can't pull him, he's not a lever."); break;
    case eGA_Push: player.Say("Maybe later..."); break;
    case eGA_TalkTo:       
      player.Say("Hello, Professor...");
      cMulbray.FaceCharacter(player, eBlock);
      cMulbray.Say("Welcome back, Doctor Jones... I trust your trip to the Orient went well?");
      player.Say("Yes, I guess it did...");
      cMulbray.Say("Well, that's good to hear.");
      dMulbray1.Start();
      break;
    case eGA_UseInv: break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }
}

static void CharactersLogic::Irene(Action usedAction) {
  
  int charX = 177;
  int charY = 120;
  Character* charac = cIrene;
  
  player.Walk(charX, charY, eBlock);
  player.FaceCharacter(charac, eBlock);
  
  switch(usedAction){
    case eGA_GiveTo: 
      if (player.ActiveInventory == iKey) {
        player.Say("No, I have a feeling I'll need it.");
      } else {
        player.Say("I don't think she'd like that.");
      } 
      break;
    case eGA_LookAt: player.Say("It's Irene, my secretary."); break;
    case eGA_TalkTo: 
      player.Say("Good afternoon, Irene.");
      cIrene.Say("Good afternoon, and welcome back Doctor Jones.");
      dIrene1.Start();
      break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }
}
  
static void CharactersLogic::Biff(Action usedAction) {
   
  
  //behaviour when biff is in Barnett's corridor
  if (cBiff.Room == 3) { 
    int charX = 840;
    int charY = 126;
    Character* charac = cBiff;
    
    player.Walk(charX, charY, eBlock);
    player.FaceCharacter(charac, eBlock);
    
    switch(usedAction){
      case eGA_GiveTo: 
        if (player.ActiveInventory == iWallet) {
          player.Say("I have no need to bribe them.");
          player.Say("... But I'd pay him if he'd wash my car.");
        } else {
          player.Say("I doubt that would change anything.");
        }
        break;
      case eGA_Pull:
      case eGA_Push: 
      case eGA_Use: 
        player.Say("He's a jerk, but that doesn't mean I should be pushing them around.");
        break;
      case eGA_LookAt: player.Say("One of Barnett College's juvenile delinquents."); break;
      case eGA_TalkTo: 
        if (bullyTalk == false) {
          player.Say("Hello, Biff...");
          cBiff.Say("Hey teach, you have some nerve for flunking us!");
          player.Say("Ah yes, that last test...");
          cBiff.Say("Yeah, well me and Bruno aren't happy about it!");
          bullyTalk = true;
          dBully1.Start();
        } else {
          player.Say("Talking to them anymore would be a waste of time.");
        }
        break;
      default:
        Verbs.Unhandled(eCharacter);
        break;
    }
  }
}

static void CharactersLogic::Bruno(Action usedAction) {
 
  if (cBruno.Room == 3) { //behaviour when biff and bruno are in Barnett's corridor
    int charX = 840;
    int charY = 126;
    Character* charac = cBruno;
    
    player.Walk(charX, charY, eBlock);
    player.FaceCharacter(charac, eBlock);
    
    switch(usedAction){
      case eGA_TalkTo: player.Say("He doesn't seem to be the talkative type."); break;
      default:
        CharactersLogic.Biff(usedAction);
        break;
    }
  }
}

///////////////////////////////////////
//
//    STUDENTS IN INDY'S CLASSROOM
//
///////////////////////////////////////

static bool CharactersLogic::AllStudentsGaveTheirPreferences() {
  if (DialogsLogic.GetVarBool("eDialog_Student2gaveHisPreference")
      &&  DialogsLogic.GetVarBool("eDialog_Student5gaveHisPreference")
      &&  DialogsLogic.GetVarBool("eDialog_Student6gaveHisPreference")
      &&  DialogsLogic.GetVarBool("eDialog_Student7gaveHisPreference"))
  {
      return true;
  }
  return false;
}

static void CharactersLogic::Students_AllGaveTheirPreferences_Reaction1() {
  if (CharactersLogic.AllStudentsGaveTheirPreferences() )
  {
    player.FaceDirection(eRight);
    player.Say("Come on, Jones, you've asked enough questions now...");
    player.Say("...You should be able to come up with something without guessing.");
    player.FaceDirection(eLeft);
  }
}


static void CharactersLogic::Students_AllGaveTheirPreferences_Reaction2() {  
  if (!CharactersLogic.AllStudentsGaveTheirPreferences() )
  {
    player.FaceDirection(eRight);
    player.Say("I won't get anywhere that way...");
    player.Say("...I can't just make up topics.");
    player.FaceDirection(eLeft);
  }  
}

function ShowCompass() {
  Display("ShowCompass animation: not implemented yet");
}

//coordinates where Indy must walk before talking to the students
int studentsWalktoX = 158;
int studentsWalktoY = 100;

//sleeping biff
static void CharactersLogic::Student1(Action usedAction) {
  switch(usedAction){
    case eGA_GiveTo: 
      if (player.ActiveInventory == iCompass) {
        player.Say("What do you think of that interesting piece of history, young man?");
        ShowCompass();
        cStudent01.Say("...ZzzZZzzzz...");
        player.Say("I should throw it at his face.");
      } else {
        Verbs.Unhandled(eCharacter);
      }
      break;
    case eGA_LookAt: 
      player.Say("That's Biff. I guess you could call him a bully.");
      break;
    case eGA_TalkTo: 
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      dStudent1.Start();
      break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }
}

//Sandy, studentPink
static void CharactersLogic::Student2(Action usedAction) {
  switch(usedAction){
    case eGA_GiveTo: 
      if (player.ActiveInventory == iCompass) {
        player.Say("Don't you find that artifact interesting?");
        ShowCompass();
        cStudent02.Say("It looks nice, professor. What is it exactly?");   
        //does Indy know what the compass is? did he read its tag?
        if (DialogsLogic.GetVarBool("eDialog_LookedAtCompassTag")) {
          DialogsLogic.SetVarBool("eDialog_ShowedCompassToStudents",  true); //we set a flag to remember that Indy showed the item to the students at least once
          player.Say("It's a metal compass from the early Ottoman Empire.");
          cStudent02.Say("Oh, professor, that sounds like a fascinating starting point!"); 
          cStudent02.Say("I'm sure this artifact would stimulate us all!");           
          cStudent02.Say("But what subject do you want us to write about, based on it?");   
          if (CharactersLogic.AllStudentsGaveTheirPreferences()) { //INdy knows what each student likes
            player.Say("Sandy, that's very simple.");
            player.Say("I suggest...");
            if (!DialogsLogic.GetVarBool("eDialog_FoundProperSubject"))
              dStudent2_HowAbout2.Start();  //Indy suggests proper solutions
            else
              dStudent2_HowAbout3.Start(); //Indy has already resolved that puzzle
          } else { //he doesn't know yet
            player.Say("Well Sandy, I, erm....");
            player.Say("I suppose you could write on...");         
            dStudent2_HowAbout.Start(); //Indy suggests goofy solutions
          }
        } else {  
            player.Say("Well, it's a...");
            player.Say("It's definitely...");  
            player.Say("Give me a second, Sandy, I can't answer all the questions at the same time!");
            player.FaceDirection(eRight);
            player.Say("I'm growing old if I let students outsmart me...");
            player.FaceDirection(eLeft);
        }
      } else {
        Verbs.Unhandled(eCharacter);
      }    
      break;
    case eGA_LookAt: 
      player.Say("That's Sandy. She's always the best in every class.");
      break;
    case eGA_TalkTo: 
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      player.Say("Sandy, I understand you'll be talking on behalf of your fellow students?");
      cStudent02.Say("Yes, professor.");
      dStudent2.Start();
      break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }
}

//Wendy, studentRedhead
static void CharactersLogic::Student5(Action usedAction) {
  switch(usedAction){
    case eGA_GiveTo: 
      if (player.ActiveInventory == iCompass) {
        player.Say("Doesn't that artifact stimulate your curiosity?");
        ShowCompass();
        cStudent05.Say("Hmm...Interesting. Show it to Sandy, professor.");
      } else {
        Verbs.Unhandled(eCharacter);
      }
      break;
    case eGA_LookAt: 
      player.Say("That's Wendy. An interesting student.");
      break;
    case eGA_TalkTo: 
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      if (!DialogsLogic.GetVarBool("eDialog_SandyHasExplainedTheProblem")) { //Sandy hasn't explained the issue yet
        player.Say("Now, Wendy, you're a reasonable student. What's the matter?");
        cStudent05.Say("Professor, you should ask Sandy, she's the class president.");
      }  else {
        dStudent5.Start();
      }
      break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }
}

//Ron
static void CharactersLogic::Student6(Action usedAction) {

  switch(usedAction){
    case eGA_GiveTo: 
      if (player.ActiveInventory == iCompass) {
        player.Say("That artifact catches the eye, doesn't it?");
        ShowCompass();
        cStudent06.Say("It lsure does, professor. But show it to Sandy, please.");
      } else {
        Verbs.Unhandled(eCharacter);
      }
      break;
    case eGA_LookAt: 
      player.Say("That's Ron. He makes a lot of efforts in my class.");
      break;
    case eGA_TalkTo: 
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      if (!DialogsLogic.GetVarBool("eDialog_SandyHasExplainedTheProblem")) { //Sandy hasn't explained the issue yet
        player.Say("Well, well, Ron. What's all the fuss about?");
        cStudent06.Say("Sandy, please explain Professor Jones what the issue is.");
      } else {
        dStudent6.Start();
      }
      break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }
}

//Syd
static void CharactersLogic::Student7(Action usedAction) {
  switch(usedAction){
    case eGA_GiveTo: 
      if (player.ActiveInventory == iCompass) {
        player.Say("I'm sure you could write a brilliant essay, based on that.");
        ShowCompass();
        cStudent07.Say("Professor, maybe Sandy could have a closer look?");
      } else {
        Verbs.Unhandled(eCharacter);
      }
      break;
    case eGA_LookAt: 
      player.Say("That's Syd, one of my students.");
      player.Say("I'm always amazed by how blond he his.");
      break;
    case eGA_TalkTo:  
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      if (!DialogsLogic.GetVarBool("eDialog_SandyHasExplainedTheProblem")) { //Sandy hasn't explained the issue yet
        player.Say("Young man, why don't you start from the beginning?");
        cStudent07.Say("I think it's better if you ask Sandy, professor.");
        cStudent07.Say("She's better at explaining.");
      } else {
        dStudent7.Start();
      }
      break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }
}

  
////////////////////////////////////////////////////////////////////////////


//Biff (former student1)
static void CharactersLogic::StudentBiff(Action usedAction) {
  switch(usedAction){
    case eGA_GiveTo:    
      if (player.ActiveInventory == iCompass) {
        player.Say("What do you think of that interesting piece of history, young man?");
        ShowCompass();
        cStudentBiff.Say("Ha!Ha!Ha! It looks like my mom's hair drier");
        player.FaceDirection(eRight);
        player.Say("I should throw it at his face.");
      } else {
        Verbs.Unhandled(eCharacter);
      }    
      break;
    case eGA_Pull: break;
    case eGA_Push: break;
    case eGA_Close: break;
    case eGA_Use: break;
    case eGA_LookAt:    
      player.Say("That's Biff.");
      player.Say("I guess you could him a bully.");
      break;
    case eGA_Open: break;
    case eGA_PickUp: break;
    case eGA_TalkTo:     
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      dStudent1.Start();
      break;
    case eGA_UseInv: break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }  
}

//Sandy (former student2)
static void CharactersLogic::StudentPink(Action usedAction) { 
  switch(usedAction){
    case eGA_GiveTo: 
      if (player.ActiveInventory == iCompass) {
        player.Say("Don't you find that artifact interesting?");
        ShowCompass();
        cStudentPink.Say("It looks nice, professor. What is it exactly?");   
        //does Indy know what the compass is? did he read its tag?
        if (DialogsLogic.GetVarBool("eDialog_LookedAtCompassTag")) {
          DialogsLogic.SetVarBool("eDialog_ShowedCompassToStudents",  true); //we set a flag to remember that Indy showed the item to the students at least once
          player.Say("It's a metal compass from the early Ottoman Empire.");
          cStudentPink.Say("Oh, professor, that sounds like a fascinating starting point!"); 
          cStudentPink.Say("I'm sure this artifact would stimulate us all!");           
          cStudentPink.Say("But what subject do you want us to write about, based on it?");   
          if (CharactersLogic.AllStudentsGaveTheirPreferences()) { //INdy knows what each student likes
            player.Say("Sandy, that's very simple.");
            player.Say("I suggest...");
            if (!DialogsLogic.GetVarBool("eDialog_FoundProperSubject"))
              dStudent2_HowAbout2.Start();  //Indy suggests proper solutions
            else
              dStudent2_HowAbout3.Start(); //Indy has already resolved that puzzle
          } else { //he doesn't know yet
            player.Say("Well Sandy, I, erm....");
            player.Say("I suppose you could write on...");         
            dStudent2_HowAbout.Start(); //Indy suggests goofy solutions
          }
        } else {  
           player.Say("Well, it's a...");
           player.Say("It's definitely...");  
           player.Say("Give me a second, Sandy, I can't answer all the questions at the same time!");
           player.FaceDirection(eRight);
           player.Say("I'm growing old if I let students outsmart me...");
           player.FaceDirection(eLeft);
        }
      }
      break;
    case eGA_LookAt: 
      player.Say("That's Sandy.");
      player.Say("She's the best in every single class.");
      break;
    case eGA_TalkTo: 
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      player.Say("Sandy, I understand you'll be talking on behalf of your fellow students?");
      cStudentPink.Say("Yes, professor.");
      dStudent2.Start();
      break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }  
}

//Wendy (former student5), redhead
static void CharactersLogic::StudentRedhead(Action usedAction) {
  switch(usedAction){
    case eGA_GiveTo:    
      if (player.ActiveInventory == iCompass) {
        player.Say("Doesn't that artifact stimulate your curiosity?");
        ShowCompass();
        cStudentRedhead.Say("Hmm...Interesting. Show it to Sandy, professor.");
      } else {
        Verbs.Unhandled(eCharacter);
      }
      break;
    case eGA_LookAt:     
      player.Say("That's Wendy.");
      player.Say("An interesting student.");
      break;
    case eGA_TalkTo: 
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      if (!DialogsLogic.GetVarBool("eDialog_SandyHasExplainedTheProblem")) { //Sandy hasn't explained the issue yet
        player.Say("Now, Wendy, you're a reasonable student. What's the matter?");
        cStudentRedhead.Say("Professor, you should ask Sandy, she's the class president.");
      }  else {
        dStudent5.Start();
      }
      break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }
}

//Ron (former student6), studentFat
static void CharactersLogic::StudentFat(Action usedAction) {
  switch(usedAction){
    case eGA_GiveTo: 
      if (player.ActiveInventory == iCompass) {
        player.Say("That artifact catches the eye, doesn't it?");
        ShowCompass();
        cStudentFat.Say("It lsure does, professor. But show it to Sandy, please.");
      } else {
        Verbs.Unhandled(eCharacter);
      }
      break;
    case eGA_LookAt: 
      player.Say("That's Ron, one of my students.");
      player.Say("He makes a lot of efforts in my class.");
      break;
    case eGA_TalkTo: 
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      if (!DialogsLogic.GetVarBool("eDialog_SandyHasExplainedTheProblem")) { //Sandy hasn't explained the issue yet
        player.Say("Well, well, Ron. What's all the fuss about?");
        cStudentFat.Say("Sandy, please explain Professor Jones what the issue is.");
      } else {
        dStudent6.Start();
      }
      break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }
}

//Syd (former student7)
static void CharactersLogic::StudentTie(Action usedAction) {
  switch(usedAction){
    case eGA_GiveTo: 
      if (player.ActiveInventory == iCompass) {
        player.Say("I'm sure you could write a brilliant essay, based on that.");
        ShowCompass();
        cStudentTie.Say("Professor, maybe Sandy could have a closer look?");
      } else {
        Verbs.Unhandled(eCharacter);
      }
      break;
    case eGA_LookAt: 
      player.Say("That's Syd, one of my students.");
      player.Say("I'm always amazed by how blond he his.");
      break;
    case eGA_TalkTo: 
      player.Walk(studentsWalktoX,  studentsWalktoY,  eBlock);
      player.FaceDirection(eLeft);
      if (!DialogsLogic.GetVarBool("eDialog_SandyHasExplainedTheProblem")) { //Sandy hasn't explained the issue yet
        player.Say("Young man, why don't you start from the beginning?");
        cStudentTie.Say("I think it's better if you ask Sandy, professor.");
        cStudentTie.Say("She's better at explaining.");
      } else {
        dStudent7.Start();
      }
      break;
    default:
      Verbs.Unhandled(eCharacter);
      break;
  }
}

/////////////////////////////////////////////////////////////////////////////

static void CharactersLogic::Students_SpeakFast(String s1,  String s2,  String s3,  String s4) {
  int readingSpeed= Game.TextReadingSpeed; //we save the current reading speed
  Game.TextReadingSpeed = FloatToInt(IntToFloat(Game.TextReadingSpeed) * 5.0);// we increase it temporarily
  
  //randomize the order of the sentences and who says what
  String s[4];
  Character* c[4];
  int i=0;
  while (i<4) { //four sentences, four characters
    bool ok = false;
    //randomize sentences
    while (!ok) {
      int j = Random(3);
      if (s[j] == null) { //only an empty slot can stop the iteration
          ok = true;
          if (i==0) s[j] = s1;
          if (i==1) s[j] = s2;
          if (i==2) s[j] = s3;
          if (i==3) s[j] = s4;
      }
    }
    ok=false;
    //randomize characters
    while (!ok) {
      int j = Random(3);
      if (c[j] == null) { //only an empty slot can stop the iteration
          ok = true;
          if (i==0) c[j] = cStudent02;
          if (i==1) c[j] = cStudent05;
          if (i==2) c[j] = cStudent06;
          if (i==3) c[j] = cStudent07;
      }
    }
    i++;
  }
  
  //make them say the sentences
  i = 0;
  while (i<4) {
    Character* ch = c[i];
    ch.Say(s[i]);
    i++;
  }
  
  Game.TextReadingSpeed = readingSpeed; //back to normal
}

static void CharactersLogic::Students_SpeakFast2(String s1,  String s2,  String s3,  String s4) {
  int readingSpeed= Game.TextReadingSpeed; //we save the current reading speed
  Game.TextReadingSpeed = FloatToInt(IntToFloat(Game.TextReadingSpeed) * 5.0);// we increase it temporarily
  
  //randomize the order of the sentences and who says what
  String s[4];
  Character* c[4];
  int i=0;
  while (i<4) { //four sentences, four characters
    bool ok = false;
    //randomize sentences
    while (!ok) {
      int j = Random(3);
      if (s[j] == null) { //only an empty slot can stop the iteration
          ok = true;
          if (i==0) s[j] = s1;
          if (i==1) s[j] = s2;
          if (i==2) s[j] = s3;
          if (i==3) s[j] = s4;
      }
    }
    ok=false;
    //randomize characters
    while (!ok) {
      int j = Random(3);
      if (c[j] == null) { //only an empty slot can stop the iteration
          ok = true;
          if (i==0) c[j] = cStudentFat;
          if (i==1) c[j] = cStudentBiff;
          if (i==2) c[j] = cStudentPink;
          if (i==3) c[j] = cStudentTie;
      }
    }
    i++;
  }
  
  //make them say the sentences
  i = 0;
  while (i<4) {
    Character* ch = c[i];
    ch.Say(s[i]);
    i++;
  }
  
  Game.TextReadingSpeed = readingSpeed; //back to normal
}

///////////////////////
//
//    STUDENTS PUZZLE
//
//    Indy must pick all correct 4 parts of a sentence to create a proper essay subject
//
///////////////////////

int sentence_parts[4]; //the essay's subject is made of four parts

//the essay's subject is made of 4 parts (location, era, etc.) For each part there are 4 possible answers
static void CharactersLogic::Students_SetSubjectPart(int part, int answerChosen) 
{
  //"part" must be in between 1 and 4
  //"answerChosen" must be between 1 and 4
  sentence_parts[part-1]= answerChosen-1; //see the arrays contents description to understand that formula
}

static void CharactersLogic::Students_ResetSubject() //resets all parts of the essay's subject
{
  int i=0;
  while (i<4) 
  {
    sentence_parts[i]= -1;
    i++;
  }  
}

static bool CharactersLogic::Students_ComputeSubject()   //tells if Indy picked all correct 4 parts for the essay's subject
{
  //Display("Not implemented yet: Students_ComputeSubject");
  
  if (   sentence_parts[0] == 0
      && sentence_parts[1] == 2
      && sentence_parts[2] == 0
      && sentence_parts[3] == 2
  ) 
  {//SUCCESS!  
    DialogsLogic.SetVarBool("eDialog_FoundProperSubject", true); 
    //the students will react positively in dStudent2_HowAbout3
  }
  else
  { //FAILURE!
    if (  sentence_parts[0] == 1 /*giant stone strcutures*/
        || sentence_parts[0] == 2 //metal foundries design
        || sentence_parts[0] == 3) //clay extraction
    {
      int random = Random(1); //we generate two sentences that mean the same thing, to make the clue less obvious
      if (random == 0)
        cStudent07.Say("Why does it always have to be about gigantic things?");    
      else
        cStudent07.Say("Pity it's never about human-sized, individual creations.");
    }      
    if (sentence_parts[1] == 3) //religion
    {
        cStudent06.Say("Here we go again. Religion, religion, religion.");    
    }
    else if (sentence_parts[1] == 0 //trading
            || sentence_parts[1] == 1 )//catling
    {
        cStudent06.Say("So much for visual expression.");   
    }

    if (sentence_parts[2] == 1 //padua
    || sentence_parts[2] == 2 )//rome
    {
        cStudent06.Say("And I have a feeling this class is a bit Europe-centered.");    
    }

    if (sentence_parts[3] == 0 /* /attila*/ && sentence_parts[2] != 2 /*not rome*/)   
    {
        cStudent05.Say("What does Attila have to do with any of this?");   
    }
    else if (sentence_parts[3] == 1 /*scipio */ && (sentence_parts[2] == 0 /*constantinople*/ ||sentence_parts[2] == 3/*goa*/ ||sentence_parts[2] == 1/*padua*/) ) //
    {
        cStudent05.Say("That doesn't even make sense historically!");   
    }
    else if (sentence_parts[3] == 3 /*barbarossa */ && sentence_parts[2] == 3/*goa*/  ) //
    {
        cStudent05.Say("The German Romans setting colonies in India? Well that's new...");  
        cStudent02.Say("Does every essay have to deal with Antiquity or the Middle Ages?");
    }      
    else if (sentence_parts[3] == 3 /*barbarossa */ && sentence_parts[2] == 2/*rome*/  ) //
    {
        cStudent05.Say("Professor, why do you pick the city of Rome?");
        cStudent05.Say("It wasn't the center of the Empire at the time..."); 
        cStudent02.Say("Does every essay have to deal with Antiquity or the Middle Ages?");
    }      
      
    player.Say("Now, now. Enough complaining. That subject is not perfect, alright.");
    player.Say("I made a mistake. Let me fix that.");

  }
}


static void CharactersLogic::RepeatSolution() //Indy recaps the proper solution.
{
  
}
  
