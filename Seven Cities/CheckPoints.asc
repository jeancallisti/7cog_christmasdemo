//#define MAX_CHECKPOINTS 100

#define MAX_CATEGORIES 20
#define MAX_CHECKPOINT_PER_CATEGORY 20
/*
struct CheckpointData {
  String name;
};
CheckpointData checkpointsData[MAX_CHECKPOINTS];
*/

struct CheckpointCategory {
  String name;
  int nextCheckpointIndex;
  String checkpointsNames[MAX_CHECKPOINT_PER_CATEGORY];  
  CheckPointsEnum checkpoints[MAX_CHECKPOINT_PER_CATEGORY];  
  //RoomsEnum rooms[MAX_CHECKPOINT_PER_CATEGORY];  
  import int AddCheckpoint(CheckPointsEnum checkpoint,  String name);
};



int nextCategoryIndex = 0;
CheckpointCategory categories[MAX_CATEGORIES];
/*
int curCheckpoint = 1;  //we keep track of the id of the last registered checkpoint,
                        //because they can only be created in increasing order.
                        //note: our checkpoints start from 1 because enums (such as CheckPointsEnum) also start from 1.
*/

//bool _skipCutsceneIfAny = false;

/*
static bool CheckPoints::ShouldSkipCutscene_Consume() {
  bool result = _skipCutsceneIfAny;
  _skipCutsceneIfAny = false;
  return result;
}
*/






bool checkpointInitialized = true; //is false after a "jump to" until all variables have been set in the destination room
int requestedCategory = 0;
int requestedCheckpoint = 0;


function AddCategory(String name) {
  categories[nextCategoryIndex].name = name;
  categories[nextCategoryIndex].nextCheckpointIndex = 0;
  nextCategoryIndex++;
}

function CheckpointCategory::AddCheckpoint(CheckPointsEnum checkpoint,  String name) 
{
  this.checkpointsNames[this.nextCheckpointIndex] = name;
  this.checkpoints[this.nextCheckpointIndex] =  checkpoint;
  this.nextCheckpointIndex++;
}

/*
static void CheckPoints::RegisterNew(int id, String name) 
 {
   
   //safety: do we follow the process and register the checkpoints in increasing order?
   if (id != curCheckpoint) {
     AbortGame(String.Format("Programing mistake: you didn't register the checkpoints in the logical order: 0,1,2,... Or maybe you entered this room twice. (Expected %d, found %d)", curCheckpoint, id));
   }   

   //safety: does it already exist?
   if (checkpointsData[id].name != null) {
     AbortGame("Programing mistake: you declared two checkpoints with the same ID");
   }
   
   checkpointsData[id].name = name;
   //ListBoxCheckpoints.AddItem(String.Format("(%d) : %s", id,  name));
   curCheckpoint++;
 }
*/
 
static void CheckPoints::RegisterAll() 
 {
    nextCategoryIndex = 0;
    
    AddCategory("DEBUG/TESTS");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_33_GuiSettings,                     "GUI: Settings");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_09_MirrorsTests,                    "Mirrors 1") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_12_FontsTests,                      "Fonts tests") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_15_TextArea,                        "TextArea") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_16_FoAcredits,                      "FoAcredits") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_18_Mirrors2,                        "Mirrors 2") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_21_DEBUGiciclesTests,               "icicles tests") ; 
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_44_DEBUGCharAnim,                   "character animation tests");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_47_DEBUGTestScrollLock,             "Test scrolling lock");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_49_DEBUGguiTests,                   "GUI interactions (look at, etc.) tests");    
    
    
    AddCategory("MENUS");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_01_Disclaimer,                       "Disclaimer");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_02_MainMenu,                         "Main Menu");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_17_RegularCredits,                   "Regular credits") ;   
    
    AddCategory("01 TIBET");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_08_TibetTop,                        "Mountain top") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_31_Credits,                         "Escape slope & opening credits");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_45_TIBETAnotherIceCave,             "Another ice cave");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_37_TibetIceCave,                    "Ice Cave");
    
    
    AddCategory("02 BARNETT");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_03_IndysClassroom_chalkboardCutscene,"BARNETT: eChckpnt_03_IndysClassroom_chalkboardCutscene") ;
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_04_IndysClassroom_studentsPuzzle,   "BARNETT: eChckpnt_04_IndysClassroom_studentsPuzzle") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_05_IndysClassroom_studentsPuzzle2,  "BARNETT: eChckpnt_05_IndysClassroom_studentsPuzzle2") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_06_BarnettCorridor,                 "BARNETT: eChckpnt_06_BarnettCorridor") ;  
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_07_BarnettReadTelegram,             "BARNETT: eChckpnt_07_BarnettReadTelegram") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_07_BarnettOutside,                  "BARNETT: eChckpnt_07_BarnettOutside") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_10_NewClassRoom,                    "BARNETT: eChckpnt_10_NewClassRoom") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_11_NewChalkboard,                   "BARNETT: eChckpnt_11_NewChalkboard") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_22_BarnettOutside,                  "BARNETT: outside, telegram read") ;   
    
    AddCategory("03 ARIZONA");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_19_Flagstaff_cave,                  "ARIZ: Cave entrance") ;   
    
    AddCategory("04 NEW YORK");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_32_NEWYORKSubmarineCutscene,        "NEW YORK : submarine cutscene");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_43_NewYorkOutsideWarehouse,         "New York : 04-03 Outside Warehouse");
    
    AddCategory("05 SPAIN");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_13_SpainDigSite,                    "SPAIN: eChckpnt_13_SpainDigSite") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_14_SpainTruckCutscene,              "SPAIN: eChckpnt_14_SpainTruckCutscene") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_20_SPAINcountryside,                "SPAIN: countryside") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_28_SpainGeorgeTent,                 "SPAIN: echckpnt_28_GeorgeTent");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_29_SpainOfficerTent,                "SPAIN: echckpnt_29_OfficerTent");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_46_SpainExcavation,                 "Spain : 05-06 Excavation");
    
    
    AddCategory("06 ENGLAND");
    
    AddCategory("07 PARIS");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_24_ParisCafeAndPhoneBooth,          "PARIS: eChckpnt_24_ParisCafeAndPhoneBooth") ;
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_25_ConventIndise,                   "PARIS: eChckpnt_25_ConventInside");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_26_ChurchRuins,                     "PARIS: eChckpnt_26_ChurchRuins");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_27_ConventYard,                     "PARIS: eChckpnt_27_ConventYard");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_40_PARISCatacombWaterMazeShore,     "PARIS : 07-03a CatacombWaterMazeShore");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_41_PARISGenericCatacombsBGWater,    "PARIS : 07-03b Catacomb BG in water");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_42_PARISGenericCatacombsBGLand,     "PARIS : 07-03c Generic Catacombs BG on land");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_48_PARISBookCloseUp,                "PARIS : Book Close Up");
    
    
    AddCategory("08");
    
    AddCategory("09 JERUSALEM");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_36_BlackMarketDen,                  "Jerusalem : 09-02 BlackMarketDen");
    
    AddCategory("10 GERMANY");
    
    AddCategory("11 OUTSIDE GER");
    
    AddCategory("12 MEXICO");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_34_MexicoCrater,                    "Mexico : 12-03 Crater");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_35_MexicoTest,                      "Mexico : 12-01 Test");
    
    
    AddCategory("13 VENEZUELA");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_23_VENEZguardians,                  "VENEZ: Guardians") ;   
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_38_merchandise_lobby,               "Venezuela : 13-05 Merchandise Lobby");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_39_13_07_CityOfGoldGeneralView,     "Venezuela : 13-07 City of gold general view");
    categories[nextCategoryIndex-1].AddCheckpoint(eChckpnt_50_VENEZ_BarracksOutside,           "VENEZ : Barracks Outside");
    
    
    AddCategory("14 ENDING");
    
 
}


static void CheckPoints::PopulateCheckpoints(ListBox* LbCheckpoints, int categoryIndex)
{
    LbCheckpoints.Clear();
    for(int checkpointIndex = 0; checkpointIndex < categories[categoryIndex].nextCheckpointIndex; checkpointIndex++) {
        LbCheckpoints.AddItem(categories[categoryIndex].checkpointsNames[checkpointIndex]);
    }
}

static void CheckPoints::PopulateControls(ListBox* LbCategories,  ListBox* LbCheckpoints) 
{
    LbCategories.Clear();
    for(int catIndex = 0; catIndex < nextCategoryIndex; catIndex++) { 
      LbCategories.AddItem(String.Format("%s (%d)", categories[catIndex].name, categories[catIndex].nextCheckpointIndex));
      //Display("%d : %s", catIndex, categories[catIndex].name);
    }

    CheckPoints.PopulateCheckpoints(LbCheckpoints,  0); //By default we display the checkpoints of category 0
}
 
 
/*
static void CheckPoints::MainMenu() {
    player.ChangeRoom(eRoom_GUI_00_TitleMenu, 1, 1);
}

static void CheckPoints::Barnett_Read_Telegram_Cutscene() {
    player.Say("Let's take a look at that telegram.");
    prevX = player.x;
    prevY = player.y;
    gIconbar.Visible = false;
    gInventory.Visible = false;
    gStatusline.Visible = false;
    player.ChangeRoom(eRoom_02_09_BarnettTelegram, 1, 1);
}

static void CheckPoints::Barnett_Read_Telegram() {
  
  //give needed objects
  player.AddInventory(iOilCan);
  player.AddInventory(iTelegram);
  
  //arbitrarily go to Indy's office
  player.ChangeRoom(6,  160,  140);
  WAIT_10
  
}

static void CheckPoints::Barnett_NewGame() {
  StopMusic();
  if (!CheckPoints.ShouldSkipCutscene_Consume()) {
    player.ChangeRoom(eRoom_02_00_ChalkboardHand, 319, 199); //teleports player to 'chalkboard' room and thus starts opening cutscene
  } else {  
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  }
    
}

static void CheckPoints::Barnett_Corridor() {
  StopMusic();
  
  //give proper objects
  //oil can
  //oilCan.Visible = false;
  player.AddInventory(iOilCan);    
  
  player.ChangeRoom(3, 500, 120);
}


static void CheckPoints::Spain_Test() {
  StopMusic();

  player.ChangeRoom(13, 1100, 130); 
  
    
}
*/

/*
  #ifdef TESTING
    gIconbar.Visible = true;
    gInventory.Visible = true;
    gStatusline.Visible = true;
    Mouse.Mode = eModeWalkto;
    SetMusicMasterVolume(0); //no sound
    
    //  player.ChangeRoom(3,  500,  125);
    player.AddInventory(iOilCan);
    player.ChangeRoom(eRoom_02_07_BarnettOutside,  160,  120);
  #endif
  */
  

static void CheckPoints::JumpDone() {
  checkpointInitialized = true;
}

static bool CheckPoints::IsJumping() {
  return !checkpointInitialized;
}

static int CheckPoints::RequestedCheckpoint() {
  return requestedCheckpoint;
}

static int CheckPoints::RequestedCheckpoint2() {
  return 0;
}

/*
 void JumpToMenu(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
  
 void JumpToGui(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
  
 void JumpToTibet(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
  
 void JumpToBarnett(int checkpointIndex, RoomsEnum room) {
   switch(checkpointIndex) {
     default:player.ChangeRoom(room); break;
   }
 }
*/

static void CheckPoints::JumpTo(int categoryIndex, int checkpointIndex) {
  #ifdef TESTING
  //Display(String.Format("Jumping to checkpoint #%d", checkpointIndex));
  #endif
  
  //_skipCutsceneIfAny = false; //we always reset that
  checkpointInitialized = false;
  
  //Display("%d : %d", categoryIndex,  checkpointIndex);
  
  CheckPointsEnum checkpoint = categories[categoryIndex].checkpoints[checkpointIndex];
  //Display("%d", checkpoint); //DEBUG
  /*
  switch(categoryIndex)
  {
    case 0:
      JumpToMenu(checkpointIndex, room);
      break;
    case 1:
      JumpToGui(checkpointIndex, room);
      break;
    case 2:
      JumpToTibet(checkpointIndex, room);
      break;
    case 3:
      JumpToBarnett(checkpointIndex, room);
      break;
    default: 
      Display(String.Format("Programing mistake: you forgot to implement checkpoint '%d'.",checkpointIndex));
      break;
  }
  */
  
 
  if (checkpoint == eChckpnt_01_Disclaimer) {
    //_skipCutsceneIfAny = false;
    //CheckPoints.MainMenu();
    player.ChangeRoom(20, 1, 1); //go to the disclaimer screen
  } else if (checkpoint ==eChckpnt_02_MainMenu) {
    //_skipCutsceneIfAny = true;
    //CheckPoints.MainMenu();
    player.ChangeRoom (eRoom_GUI_00_TitleMenu, 1, 1);
  } else if (checkpoint ==eChckpnt_03_IndysClassroom_chalkboardCutscene) {
    //_skipCutsceneIfAny = false;
    //CheckPoints.Barnett_NewGame();
    player.ChangeRoom(eRoom_02_00_ChalkboardHand, 319, 199); //teleports player to 'chalkboard' room and thus starts opening cutscene
  } else if (checkpoint == eChckpnt_04_IndysClassroom_studentsPuzzle) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_NewGame();
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  } else if (checkpoint == eChckpnt_05_IndysClassroom_studentsPuzzle2) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Spain_Test();
    //player.ChangeRoom(eRoom_05_02_DigSite, 1100, 130); //Spain
    player.ChangeRoom(2, 223, 120); //skips directly to indy's classroom
  } else if (checkpoint == eChckpnt_06_BarnettCorridor) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_Corridor();
    player.ChangeRoom(eRoom_02_03_BarnettCorridor, 631, 127);
  } else if (checkpoint == eChckpnt_07_BarnettReadTelegram) {
    //_skipCutsceneIfAny = true; 
    //CheckPoints.Barnett_Read_Telegram();
    player.ChangeRoom(eRoom_02_06_IndyOffice,  160,  140); //go to Indy's office
  } else if (checkpoint == eChckpnt_07_BarnettOutside) {
    player.ChangeRoom(eRoom_02_07_BarnettOutside,  160,  140); //go to Indy's office
  } else if (checkpoint == eChckpnt_08_TibetTop) {
    player.ChangeRoom(eRoom_01_01_TibetTop,  217,  129); //go to Tibet mountain top
  } else if (checkpoint == eChckpnt_09_MirrorsTests) {
    player.ChangeRoom(15,  65,  141); //go to Mirrors tests room
  } else if (checkpoint == eChckpnt_10_NewClassRoom) {
    player.ChangeRoom(eRoom_02_02_IndyClassRoom_New,  160,  100); //go to new version of Indy's calssroom  
  } else if (checkpoint == eChckpnt_11_NewChalkboard) {
    player.ChangeRoom(eRoom_02_00_ChalkboardHand,  160,  100); //go to new version of chalkboard 
  } else if (checkpoint == eChckpnt_12_FontsTests) {
    player.ChangeRoom(19,  270,  150); //go to fonts tests screen (debug)
  } else if (checkpoint == eChckpnt_13_SpainDigSite) {
    player.ChangeRoom(eRoom_05_02_DigSite, 1360, 130); //go to spanish digsite
  } else if (checkpoint == eChckpnt_14_SpainTruckCutscene) {          // Demo purposes. Setting characters invisible
    player.Transparency = 100;
    cSP_NaziGuard.Transparency = 100;
    cSP_GeorgeGuard.Transparency = 100;     
    cSP_RandomNazi1.Transparency = 100;
    cSP_RandomNazi2.Transparency = 100;
    cSP_RandomNazi3.Transparency = 100;
    player.ChangeRoom(eRoom_05_02_DigSite,  480,120); //go to spanish digsite and play the truck cutscene
  } else if (checkpoint == eChckpnt_15_TextArea) {
    player.ChangeRoom(21,  1200,  120); 
  } else if (checkpoint == eChckpnt_16_FoAcredits) {
    player.ChangeRoom(22,  109, 119); 
  } else if (checkpoint == eChckpnt_17_RegularCredits) {
    player.ChangeRoom(eRoom_GUI_01_EndCredits,  160,  0); 
  } else if (checkpoint == eChckpnt_18_Mirrors2) {
    player.ChangeRoom(24,  160,  150); 
  } else if (checkpoint == eChckpnt_19_Flagstaff_cave) {
    player.ChangeRoom(eRoom_03_02_IndianCave,  2,  157); //IMPORTANT: (2,157) is a special region that triggers the cutscene of Indy walking on the canyons
  } else if (checkpoint == eChckpnt_20_SPAINcountryside) {
    player.ChangeRoom(eRoom_05_01_CountrySide,  303,  80);
  } else if (checkpoint == eChckpnt_21_DEBUGiciclesTests) {
    player.ChangeRoom(27,  160,  150);
  } else if (checkpoint == eChckpnt_22_BarnettOutside) {
    player.ChangeRoom(eRoom_02_07_BarnettOutside,  160,  120);
  } else if (checkpoint == eChckpnt_23_VENEZguardians) {
    player.ChangeRoom(eRoom_13_06_JaguarGuardian,  52, 104);
    //player.ChangeRoom(eRoom_13_04_Guardians,  40, 50);
    //player.ChangeRoom(29,  48, 103);
  } else if (checkpoint == eChckpnt_24_ParisCafeAndPhoneBooth) {
    player.ChangeRoom(eRoom_07_05_ParisCafe,  259, 114);
  } else if (checkpoint == eChckpnt_25_ConventIndise) {
    player.ChangeRoom(eRoom_07_06_ConventInside, 42, 46);
  } else if (checkpoint == eChckpnt_26_ChurchRuins) {
    player.ChangeRoom(eRoom_07_07_ChurchRuins, 248, 155);
  } else if (checkpoint == eChckpnt_27_ConventYard) {
    player.ChangeRoom(eRoom_07_02_ConventYard, 508, 115);
  } else if (checkpoint == eChckpnt_28_SpainGeorgeTent) {
    player.ChangeRoom(eRoom_05_03_GeorgeTent, 199, 108);
  } else if (checkpoint == eChckpnt_29_SpainOfficerTent) {
    player.ChangeRoom(eRoom_05_04_OfficerTent,141, 102);
  } else if(checkpoint ==  eChckpnt_30_FOACredits) { //USELESS. Does the same as checkpoint 16
    player.ChangeRoom(22, 108, 117);
  }else if (checkpoint ==  eChckpnt_31_Credits) {
    player.ChangeRoom (eRoom_01_04_EscapeSlopAndCredits,  80, 80);
  }else if (checkpoint ==  eChckpnt_32_NEWYORKSubmarineCutscene) {
    player.ChangeRoom(eRoom_04_08_SubCutscene, 0, 0);
  } else if (checkpoint ==  eChckpnt_33_GuiSettings) {
    player.ChangeRoom(97, 0, 0);
  } else if (checkpoint ==  eChckpnt_34_MexicoCrater) {
    player.ChangeRoom(75, 38, 105);
  } else if (checkpoint ==  eChckpnt_35_MexicoTest) {
    player.ChangeRoom (73, 156, 70);
  } else if (checkpoint ==  eChckpnt_36_BlackMarketDen) {
    player.ChangeRoom (58, 150,  100);
  } else if (checkpoint ==  eChckpnt_37_TibetIceCave) {
    player.ChangeRoom (eRoom_01_02_IceCave, 163,  52);
  } else if (checkpoint ==  eChckpnt_38_merchandise_lobby) {
    player.ChangeRoom (98, 134, 116);
  } else if (checkpoint ==  eChckpnt_39_13_07_CityOfGoldGeneralView) {
    player.ChangeRoom (eRoom_13_07_CityGeneralView, 111, 74);
  } else if (checkpoint ==  eChckpnt_40_PARISCatacombWaterMazeShore) {
    player.ChangeRoom (32, 213, 111);
  } else if (checkpoint ==  eChckpnt_41_PARISGenericCatacombsBGWater) {
    player.ChangeRoom (117, 248, 119);
  } else if (checkpoint ==  eChckpnt_42_PARISGenericCatacombsBGLand) {
    player.ChangeRoom (118, 150, 150);
  } else if (checkpoint ==  eChckpnt_43_NewYorkOutsideWarehouse) {
    player.ChangeRoom (51, 47, 169);
  } else if (checkpoint ==  eChckpnt_44_DEBUGCharAnim) {
    player.ChangeRoom (122, 160, 200);
  } else if (checkpoint ==  eChckpnt_45_TIBETAnotherIceCave) {
    player.ChangeRoom (eRoom_01_015_AnotherIceCave, 160, 155);
  } else if (checkpoint ==  eChckpnt_46_SpainExcavation) {
    player.ChangeRoom (126, 300, 230);
  } else if (checkpoint ==  eChckpnt_47_DEBUGTestScrollLock) {
    player.ChangeRoom (eRoom_DEBUG_ScrollLockTests, 310,220);
  } else if (checkpoint ==  eChckpnt_48_PARISBookCloseUp) {
    player.ChangeRoom (eRoom_07_06b_BookCloseUp, 150, 150);
  } else if (checkpoint ==  eChckpnt_49_DEBUGguiTests) {
    player.ChangeRoom (eRoom_DEBUG_GUIinteractionsTests, 160, 120);
  } else if (checkpoint ==  eChckpnt_50_VENEZ_BarracksOutside) {
    player.ChangeRoom (eRoom_13_08_BarracksOutside, 280, 427, eDirectionRight);
  }
    
  else
  {
    Display(String.Format("Programing mistake: you forgot to implement checkpoint '%d'.",checkpointIndex));
    //AbortGame(String.Format("Programing mistake: There is no checkpoint '%d'.",checkpointIndex));
  }
}
