
///////////////////////////////////////////////////
//
//
//            BUGS
//
//
////////////////////////////////////////////////////


#define MAXBUGS 300
#define NOBUG -1

struct BugData {
  int ID;
  BugType type;
  String author;
  String revision;
  String uid;
  String text;
  bool uploaded;
  bool dirty;
};

BugData bugs[MAXBUGS];
int nbBugs = 0;

int lastID=0;//mockup variable to generate unique integer IDs for the bugs
bool sorted;
BugSort selectedSort = eBugSort_byUid;

BUG openBug = NONE; //the bug currently open
TEXTAREA debugTxtArea;

//BUG lastCreatedBug = NONE;


//mockup function to generate unique integer IDs for the bugs
int newBugID() {
  /*
  lastID++;
  return (lastID-1);
  */
  return nbBugs;
}


void CopyTo(BUG from,  BUG to)
{
  bugs[to].author     = bugs[from].author;
  bugs[to].ID         = bugs[from].ID;
  bugs[to].revision   = bugs[from].revision;
  bugs[to].text       = bugs[from].text;
  bugs[to].type       = bugs[from].type;
  bugs[to].uid        = bugs[from].uid;
  
}

//finds the bug's index in the bugs list, based on its unique ID
static BUG Bug::Find(int ID)
{
  BUG i=0;
  while (i<nbBugs)
  {
    if (bugs[i].ID == ID)
      return i;
    i++;
  }
  
  Display(String.Format("Bug::Find : ERROR : couldn't find bug with ID '%d' in the list", ID));
  return NONE; //should never happen
}

//gets the bug's unique ID
static int Bug::GetID(BUG bug) 
{
  return bugs[bug].ID;
}

  
  

//this just creates the bug in the data structure but does not deal with the gui in any way
static BUG Bug::NewBug(BugType type)
{
  /*   
  int i=0;
  while (i<=MAXBUGS -2) //the MAXBUGS-1 slot is for temporary storage (useful for swapping values)
  {
    if (bugs[i].ID == NOBUG) {
      bugs[i].ID = newBugID();
      bugs[i].type = type;

      bugs[i].author = "";
      bugs[i].revision = "";
      bugs[i].text= "";
      bugs[i].uid = "";

      bugs[i].dirty = false;
      bugs[i].uploaded = false;
      
      //lastID++;
      sorted=false;
      
      //lastCreatedBug = i;
      
      return i;
    }
    i++;
  }
  */
  if (nbBugs < MAXBUGS -2) {//the MAXBUGS-1 slot is for temporary storage (useful for swapping values)
    int i=nbBugs;
    
    bugs[i].ID = newBugID();
    bugs[i].type = type;

    bugs[i].author = "";
    bugs[i].revision = "";
    bugs[i].text= "Enter here bug description.";
    bugs[i].uid = "";

    bugs[i].dirty = false;
    bugs[i].uploaded = false;
    
    sorted=false;
    
    nbBugs++;
    return i;
    
  }
  
  Display("Bug::NewBug : you need to increase 'MAXBUGS'");
  return NOBUG;
}

//this just deletes the bug in the data structure but does not deal with the gui in any way
static void Bug::DeleteBug(BUG bug)
{
  int i= bug;
  while (i<nbBugs-1) {
    CopyTo(i+1,  i);
    i++;
  }
  
  //now we're at nbBugs-1
  bugs[i].ID = NOBUG;
  
  bugs[i].author = "";
  bugs[i].revision = "";
  bugs[i].text= "";
  bugs[i].uid = "";

  bugs[i].dirty = false;
  bugs[i].uploaded = false;
  
  nbBugs--;
}


static void Bug::SetText(BUG bug,  String txt)
{
  if (txt==null) txt="";
  
  if (bugs[bug].ID != NOBUG)
  {
    bugs[bug].text = txt;
  } else {
    Display(String.Format("Bug::SetText : wrong bug ID: '%d'",bug));
  }
}

//saves the bug currently open to the bugs list
void SaveCurrentBug()
{
  if (openBug!=NONE) {
    lBT_StatusLine.Text = "Saving...";
    
    //TODO TODO TODO TODO TODO TODO TODO TODO 
    bugs[openBug].text = TextAreas.GetText(debugTxtArea);
    
    //Display(String.Format("SAVE: %s", bugs[openBug].text)); //DEBUG
    
    lBT_StatusLine.Text = "Saved.";
  }
}

void HighlightBug(BUG bug)
{
  if (bug==NONE)
    lstBT_BugList.SelectedIndex = -1; //No bug open, no bug selected
  else {
    lstBT_BugList.SelectedIndex = bug;
  }
}

void OpenBug(BUG bug)
{
  //Display(String.Format("OpenBug : %d",bug));
  
  if (bug!=NONE)
  {
    openBug = bug;
        
    TextAreas.Enable(debugTxtArea);
    TextAreas.SetFocus(debugTxtArea);
    
    //Display(String.Format("OPEN: %s", bugs[bug].text)); //DEBUG

    TextAreas.SetText(debugTxtArea,  bugs[bug].text);
    //Display(String.Format("%d : %d", bug,  bugs[bug].ID));
    lBT_StatusLine.Text=String.Format("%d", bugs[bug].ID);
    
    HighlightBug(bug);
  }
}


//when we don't want the bug open in the right-hand-side pane anymore
//that also saves it
void CloseBug()
{
  SaveCurrentBug();
  
  
  TextAreas.SetText(debugTxtArea,  "");
  TextAreas.Disable(debugTxtArea);
  
  openBug=NONE;
}


String BugType_S(BugType type)
{
  if (type==eBugType_BadTranslation)
    return "bad_translation";
  else if (type==eBugType_GameBlockingBug)
    return "blocking_bug";
  else if (type==eBugType_GraphicalGlitch)
    return "graphical_glitch";
  else if (type==eBugType_MissingInteraction)
    return "missing_interaction";
  else
    return "unknown_type";

}

BugType BugType_I(String type)
{
  if (type=="bad_translation")
    return eBugType_BadTranslation;
  else if (type=="blocking_bug" )
    return eBugType_GameBlockingBug;
  else if (type=="graphical_glitch" )
    return eBugType_GraphicalGlitch;
  else if (type=="missing_interaction" )
    return eBugType_MissingInteraction;
  else {
    Display(String.Format("BugType_I : ERROR: unknown bug type '%s'", type));
    return eBugType_GameBlockingBug;
  }

}


static void Bug::SaveAsXML()
{
  XMLNODE doc = ShitXML.NewNode("bugslist"); ShitXML.SetFormattingStyle(doc,  eXMLStyle_Block);
  int i =0;
  while (i<nbBugs)
  {
    if (bugs[i].ID != NONE) {
      XMLNODE bug = ShitXML.NewNode("bug"); ShitXML.SetFormattingStyle(bug,  eXMLStyle_Block);
      
      XMLNODE id = ShitXML.NewNode("id");             ShitXML.SetText_i(id,  bugs[i].ID);
      XMLNODE type = ShitXML.NewNode("type");         ShitXML.SetText(type,  BugType_S(bugs[i].type));
      XMLNODE author = ShitXML.NewNode("author");     ShitXML.SetText(author,  bugs[i].author);
      XMLNODE revision = ShitXML.NewNode("revision"); ShitXML.SetText(revision,  bugs[i].revision);
      XMLNODE uid = ShitXML.NewNode("uid");           ShitXML.SetText(uid,  bugs[i].uid);
      XMLNODE text = ShitXML.NewNode("text");         ShitXML.SetFormattingStyle(text,  eXMLStyle_Block);

      ShitXML.SetFormattingStyle(text,  eXMLStyle_Block);

      ShitXML.AddChild(bug, id);
      ShitXML.AddChild(bug, type);
      ShitXML.AddChild(bug, author);
      ShitXML.AddChild(bug, revision);
      ShitXML.AddChild(bug, uid);
      ShitXML.AddChild(bug, text);
      
      int LINE_LENGTH=30;
      
      
      String remainder = bugs[i].text;
      
      //1. split into paragraphs. Each paragraph ends with '['. We will replace it with <br>
      int pos = remainder.IndexOf("["); if (pos<0) pos = remainder.Length;
      while(pos>=0 && remainder!="") {
        String paragraph = remainder.Before(pos);
        
        remainder = remainder.After(pos+1);
        
        String remainder2 = paragraph; XMLNODE line;
        while (remainder2!="")
        {       
          String linetext = remainder2.Before(LINE_LENGTH);
          remainder2 = remainder2.After(LINE_LENGTH);
          
          //Display(String.Format("linetext='%s'",linetext)); //DEBUG
          //add the line as child of 'text'
          line = ShitXML.NewNode("line"); ShitXML.SetText(line,  linetext);
          ShitXML.AddChild(text, line);    
          
        }
        
        if (line==0) { //in case the pragraph was just '[' with no text at all
          line = ShitXML.NewNode("line");
          ShitXML.AddChild(text, line);   
        }
        
        if (line>0) { //we add "<br/>" to the last line of the paragraph
          String lastLine = ShitXML.GetText(line);
          ShitXML.SetText(line,  lastLine.Append("<br/>")); 
        }
        
        
        pos = remainder.IndexOf("["); if (pos<0) pos = remainder.Length;
      }
      
        
      
      //add the bug to the document
      ShitXML.AddChild(doc, bug);
      
    }
    i++;
  }
  
  String file = "bugslist.xml";
  if (ShitXML.Dump(doc, file))  {
    //Display(String.Format("Saved bugs list to '%s'.",file)); //too intrusice
    lBT_StatusLine.Text=String.Format("Saved bugs list to '%s'.",file);
  }
    
  //we don't forget to clean after ourselves
  ShitXML.DeleteAll(doc);
}



static void Bug::LoadFromXML()
{

  String fileName1 = "bugslist.xml";
  
  if (!SafeFile.HealthCheck(fileName1))
    AbortGame("Please do as advised in the message you've just read.");
    
    
  String fileName2 = SafeFile.FindInstance(fileName1);
  
  XMLNODE doc = ShitXML.NewNode("doc"); 
  ShitXML.Parse(doc,  fileName2);
  
  //ShitXML.Dump(doc, "urmagerd.xml"); //DEBUG
  
  int i=0;
  //int nbBugs=0;
  XMLNODE bugslist = ShitXML.FirstChild(doc); //the bugslist is not the top node. It's a child of the document
  if (bugslist == NONE) //the file was emtpy???
    return;
  
  XMLNODE bugNode = ShitXML.FirstChild(bugslist); //we will now iterate on all the bugs, starting from the first
  
  while (bugNode!= NONE ) {
    
        //Display(String.Format("child='%s'", ShitXML.GetName(bugNode)));//DEBUG
        
        XMLNODE bugChild = ShitXML.FirstChild(bugNode); //we will now look at each child of the "<bug>" node, the first one being "<ID>"
        //Display(String.Format("bugChild='%s'", ShitXML.GetName(bugChild)));//DEBUG
     
        bugs[i].ID      = ShitXML.GetText_i(bugChild); bugChild = ShitXML.NextChild(bugChild);
        //Display(String.Format("bugChild='%s'", ShitXML.GetName(bugChild)));//DEBUG

        String type_S   = ShitXML.GetText  (bugChild); bugChild = ShitXML.NextChild(bugChild);
        bugs[i].type    = BugType_I(type_S);
        bugs[i].author  = ShitXML.GetText  (bugChild); bugChild = ShitXML.NextChild(bugChild);
        bugs[i].revision= ShitXML.GetText  (bugChild); bugChild = ShitXML.NextChild(bugChild);
        bugs[i].uid     = ShitXML.GetText  (bugChild); bugChild = ShitXML.NextChild(bugChild);
        //bugs[i].text    = ShitXML.GetText  (bugChild); bugChild = ShitXML.NextChild(bugChild);
        
        //the text is made of several lines
        XMLNODE lineNode = ShitXML.FirstChild(bugChild);
        String text = "";
        while (lineNode!= NONE ) { //now let's iterate on all the lines of text
          text = text.Append(ShitXML.GetText  (lineNode));
          lineNode = ShitXML.NextChild(lineNode);
        }
        bugs[i].text = text;
        
        //Display(String.Format("text='%s'", text));//DEBUG

        i++;
        nbBugs++;
      
        bugNode = ShitXML.NextChild(bugNode); 
  }
  
  /*
  while (i<nbBugs)
  {
    if (bugs[i].ID != NONE) {
      XMLNODE bug = ShitXML.NewNode("bug"); ShitXML.SetFormattingStyle(bug,  eXMLStyle_Block);
      
      XMLNODE id = ShitXML.NewNode("id");             ShitXML.SetText_i(id,  bugs[i].ID);
      XMLNODE type = ShitXML.NewNode("type");         ShitXML.SetText(type,  BugType_S(bugs[i].type));
      XMLNODE author = ShitXML.NewNode("author");     ShitXML.SetText(author,  bugs[i].author);
      XMLNODE revision = ShitXML.NewNode("revision"); ShitXML.SetText(revision,  bugs[i].revision);
      XMLNODE uid = ShitXML.NewNode("uid");           ShitXML.SetText(uid,  bugs[i].uid);
      XMLNODE text = ShitXML.NewNode("text");         ShitXML.SetText(text,  bugs[i].text);

      ShitXML.SetFormattingStyle(text,  eXMLStyle_Block);

      ShitXML.AddChild(bug, id);
      ShitXML.AddChild(bug, type);
      ShitXML.AddChild(bug, author);
      ShitXML.AddChild(bug, revision);
      ShitXML.AddChild(bug, uid);
      ShitXML.AddChild(bug, text);
      
      ShitXML.AddChild(doc, bug);
      
    }
    i++;
  }
  
  
  
  if (ShitXML.Dump(doc, file))  {
    //Display(String.Format("Saved bugs list to '%s'.",file)); //too intrusice
    lBT_StatusLine.Text=String.Format("Saved bugs list to '%s'.",file);
  }
  */
  
  //we don't forget to clean after ourselves
  ShitXML.DeleteAll(doc);
}



void ResetBugs()
{
  int i=0;
  while (i<MAXBUGS)
  {
    bugs[i].ID = NOBUG;
    i++;
  }
  sorted=false;
}

////////////////////////////////////////////////////
//
//      SHELL SORT
//
////////////////////////////////////////////////////

/*
//returns true if bug1 equals bug 2 using the 'sort' comparison method
bool Equals(BUG bug1,  BUG bug2,  BugSort sort)
{
  if (sort==eBugSort_byType) {
    
  } else if (sort==eBugSort_byUid) {
    Display("Bugs: Equals : not implemented yet");
  }
}
*/

//returns true if bug1 is smaller then bug 2, using the 'sort' comparison method
bool SmallerThan(BUG bug1,  BUG bug2,  BugSort sort)
{
  if (sort==eBugSort_byType) {
    return bugs[bug1].type < bugs[bug2].type;
  } else if (sort==eBugSort_byUid) {
    return bugs[bug1].ID < bugs[bug2].ID;
  }
}


#define NBGAPS 8
int gaps [NBGAPS];
//utility function for the Shell sort
void InitGaps()
{
  if (gaps[0]==0) { //we do it only once
    //this is the best known sequence for approximating a geometric suit
    gaps[0] = 1;
    gaps[1] = 4;
    gaps[2] = 10;
    gaps[3] = 23;
    gaps[4] = 57;
    gaps[5] = 132;
    gaps[6] = 301;
    gaps[7] = 701;
  }
}

int ValueAt(BUG index,  BugSort sort) {
      if (sort==eBugSort_byType)
        return  bugs[index].type;
      else if (sort==eBugSort_byUid)
        return bugs[index].ID;  
}

/*
void StoreToTemp(BUG index)
{
  CopyTo(index,  MAXBUGS-1); //slot MAXBUGS-1 is reserved for temp storage
}
*/

//utility function for the Shell sort
void shellSortPhase(int gap,  BugSort sort) {
    int i = gap;
    while (i < nbBugs) {
        int j= i - gap;
        int TEMP = MAXBUGS-1;//slot MAXBUGS-1 is reserved for temp storage
        CopyTo(i,  TEMP); 
        while (j >= 0 && SmallerThan(TEMP,j , sort)) {
            CopyTo(j,  j+gap);
            j -= gap;
        }
        CopyTo(TEMP,  j+gap); //restore from temp slot
        i++;
    }
    
    sorted=true;
}


static void Bug::Sort(BugSort sort)
{
  InitGaps();

  selectedSort = sort;
  
  int sizeIndex= NBGAPS - 1;
  while (sizeIndex >= 0) {
    shellSortPhase(gaps[sizeIndex], sort);
    sizeIndex--;
  }
        
}

////////////////////////////////////////////
//
//    GUI
//
////////////////////////////////////////////


//IniFile ini;
static void DebugGui::CheckTestersName() //it checks if the tester's name has been entered. If not, asks for it
{
  
  if (!iniFile.Load(iniFileName)) { //the file was never created before (first-time playing game)
    iniFile.Write("Misc", "bt", "");
    iniFile.Save(iniFileName);
  }
  
  iniFile.Load(iniFileName);
  String name = iniFile.Read("Misc", "bt", "");
  if (name=="") {
    gTestersName.Visible=true;
  }
  
}

bool SaveTestersName(String name)
{
  
  if (name.IndexOf(" ") != -1)
    return false;
  else if (name.Length==0)
    return false;
    
  iniFile.Write("Misc", "bt", name);
  iniFile.Save(iniFileName);
  return true;
}


  
int X_when_closed = 303;
int Y_when_closed = 100;
int Y_when_open = 0;

static bool DebugGui::IsExpanded()
{
  if (gBetaTesting.X == 0)
    return true;
    
  return false; 
}

static bool DebugGui::IsReduced()
{
  if (gBetaTesting.X == X_when_closed)
    return true;
    
  return false;  
}

  

static void DebugGui::ShowDebugButton() {
  gBetaTesting.Visible = true;
}

static void DebugGui::HideDebugButton() {
  gBetaTesting.Visible = false;
}

void Expand() {
  if (DebugGui.IsReduced()) {
    
    bBT_ShowHide.TweenPosition(0.5, bBT_ShowHide.X, Y_when_closed, eEaseInEaseOutTween, eNoBlockTween_NotSuspendable);
    gBetaTesting.TweenPosition(0.5, 0, Y_when_open, eEaseInEaseOutTween, eNoBlockTween_NotSuspendable);
    //gBetaTesting.TweenPosition(0.5, 0, gBetaTesting.Y, eEaseInEaseOutTween, eNoBlockTween);
    //gBetaTesting.X = 0;
    mouse.Visible=false;
  }
}

void Reduce() {
  if (DebugGui.IsExpanded())  {

    gBetaTesting.TweenPosition(0.5, X_when_closed, Y_when_closed, eEaseInEaseOutTween, eNoBlockTween_NotSuspendable);
    //gBetaTesting.TweenPosition(0.5, X_when_closed, gBetaTesting.Y, eEaseInEaseOutTween, eNoBlockTween);
    //gBetaTesting.X = X_when_closed;
    gBetaTesting.Y = Y_when_closed;
    bBT_ShowHide.TweenPosition(0.5, bBT_ShowHide.X, 0, eEaseInEaseOutTween, eNoBlockTween_NotSuspendable);
    mouse.Visible=true;
  }
}
  
  

static void DebugToolTip::SetControls(Button* b) {
  
}

//bool initialized = false;



/*
bool IsAnyKeyPressed()
{
 int i=0;
 while (i<=383)
 {
   if (IsKeyPressed(i))
    return true;
   i++;
   
   if (i==96) //There are no keys between 95 and 360
    i=360;
 }
 return false;
}
*/


static void DebugGui::ShowHide()
{
    if (DebugGui.IsReduced()) {
      GUIlogic.DebugPause();
      Expand();
    } else if (DebugGui.IsExpanded()) {
      GUIlogic.DebugUnPause();
      Reduce();         
    } else {
      //do nothing
      //lBT_StatusLine.Text = "NOT NOW"; //DEBUG
    }  
}

String FormatType(BugType type)
{
  if (type==eBugType_BadTranslation)
    return "[T]";
  else if (type==eBugType_GameBlockingBug)
    return "[B]";
  else if (type==eBugType_GraphicalGlitch)
    return "[G]";
  else if (type==eBugType_MissingInteraction)
    return "[I]"; 
}

String Format_ForList(BUG bug)
{
  //return String.Format("%d: ID=%d, t=%d",i, bugs[i].ID, bugs[i].type);
  String t=FormatType(bugs[bug].type);    
  return String.Format("%s id=%d",t, bugs[bug].ID);
}

String Format_ForToolTip(BUG bug)
{
  String t=FormatType(bugs[bug].type);  
  
                if (t==null) Display("t_null"); //DEBUG
                if (bugs[bug] == null) Display("bug_null"); //DEBUG
                if (bugs[bug].text == null) Display("text_null"); //DEBUG
                if (bugs[bug].text.Truncate(100) == null) Display("trunc_null"); //DEBUG
  
  return String.Format("\\%s (%d) %s",t, bugs[bug].ID,  bugs[bug].text.Truncate(100));  
}




void RefreshBugList()
{
  
  
  //lstBT_BugList.Clear();
  lstBT_BugList.ClearEntries_All();
  
  int i=0;
  while (i<nbBugs)
  {
    //lstBT_BugList.AddItem(String.Format("%d: ID=%d, t=%d",i, bugs[i].ID, bugs[i].type));
    lstBT_BugList.AddEntry(Format_ForList(i),  Format_ForToolTip(i));
    
    i++;
  }
  
  HighlightBug(NONE);
}

int skipSpeech = 0;
bool D_held=false;


void BugList_SetDeleteButton(BUG bug)
{
   if (bug==NONE)
      bBT_DeleteBug.Visible = false;
   else 
   {
      int rowHeight = lstBT_BugList.GetRowHeight_safe();
      bBT_DeleteBug.Visible = true;
      bBT_DeleteBug.Y = lstBT_BugList.Y+(bug-lstBT_BugList.TopItem)*rowHeight;
   }
      
}

void BugList_OnSelectionChange()
{
  int selected = lstBT_BugList.SelectedIndex;
  
  CloseBug();
  RefreshBugList(); //that's to refresh the cooltip of the closed bug's entry

  Bug.SaveAsXML();
            
  if (selected>=0) {
    OpenBug(selected); //the list shoud be sorted, therefore the list item matches the entry
    BugList_SetDeleteButton(selected);
  }
}


void BugList_OnNewBug(BugType type)
{
  //first we deal with the current open bug: that closes and saves it
  CloseBug();
         
  BUG b = Bug.NewBug(type);
  int ID = Bug.GetID(b);//we need to be able to find the bug after sorting
  Bug.Sort(selectedSort);
  RefreshBugList();
            
  b = Bug.Find(ID);
  OpenBug(b);
  BugList_SetDeleteButton(b);
      
  //this last instruction is a bit risky: it assumes that the new bug is the last one in the listbox
  //lstBT_BugList.SelectedIndex = lstBT_BugList.ItemCount-1;

  Bug.SaveAsXML();
  
}

void BugList_OnDeleteBug()
{
  BUG b = lstBT_BugList.SelectedIndex; //the list's order is supposed to match exactly the bugs order
  
  if (b>=0) { //it's an overkill safety. Normally, when no bug is open, the "delete" button is hidden anyway
  
    //first we deal with the current open bug: that closes and saves it
    CloseBug();
    BugList_SetDeleteButton(NONE);
    
    Bug.DeleteBug(b);
    Bug.Sort(selectedSort);
    RefreshBugList();
    
    Bug.SaveAsXML();
  }
}

void BugList_OnSort(BugSort sort) 
{
  selectedSort = sort;
      
  CloseBug();
  Bug.SaveAsXML();
  
  BugList_SetDeleteButton(NONE);
  
  Bug.Sort(sort);
  RefreshBugList();
  
}


void repeatedly_execute_always() {

    
   

    fakeMouse.BringToFront();  
    fakeMouse.X=mouse.x-fakeMouse.OwningGUI.X+1;
    fakeMouse.Y=mouse.y-fakeMouse.OwningGUI.Y+1;  
    //fakeMouse.Visible = false; //so that it does not interfere with GUICOntrol.GetAtMouseXY
    
    if (StandaloneClick.ClickDetected(eMouseLeft))
    {
      
        GUIControl* c = StandaloneClick.GetClick(eMouseLeft,  false);
        if (c!=null)
        {
          //Display("click");//DEBUG
          if (c==bBT_Help) {
            Display("Bug Tracker for AGS [by Monsieur Ouxx");
          } else if (c==bBT_ScrollDown) {
            lstBT_BugList.ScrollDown();
          } else if (c==bBT_ScrollUp) {
            lstBT_BugList.ScrollUp();
          } else if (c==bBT_ShowHide) {
            DebugGui.ShowHide();
          } else if (c==bBT_Console) {
            if (!Game.InSkippableCutscene) {
              DebugGui.ShowHide();
              if (!gAgsconsole.Visible)
                AGSConsole.ShowHide();
            }
            else
            {
              Display("forbidden during a cutscene");
            }
          } else if (c==bBT_newBug) {
            BugList_OnNewBug(eBugType_GameBlockingBug);
          } else if (c==bBT_newGlitch) {
            BugList_OnNewBug(eBugType_GraphicalGlitch);
          } else if (c==bBT_newInteraction) {
            BugList_OnNewBug(eBugType_MissingInteraction);
          } else if (c==bBT_newTranslation) {
            BugList_OnNewBug(eBugType_BadTranslation);
          } else if (c==bBt_top) {
            Display("top: not implemented yet");
          } else if (c==bBT_bottom) {
            Display("bottom: not implemented yet");
          } else if (c==bBT_sortID) {
            BugList_OnSort(eBugSort_byUid);
          } else if (c==bBT_sortType) {
            BugList_OnSort(eBugSort_byType);
          } else if (c==bBetaTestersName) {
            if (SaveTestersName(txtBox_testersName.Text))
              gTestersName.Visible = false;
            else
              Display("bad tester name (or could not save file)");
          } else if (c==bBT_save) {
            Bug.SaveAsXML();
          } else if (c==lstBT_BugList) { //the user clicked on the bugs list
            BugList_OnSelectionChange();
          } else if (c==bBT_DeleteBug) { //the user clicked on the bugs list
            BugList_OnDeleteBug();          
          }
        } else {
          //the interface is closed but its transparent bit is still blocking 
          // the right-hand-side of the screen. We need to enable clicking through.
          /*
          if (mouse.x >= X_when_closed && gBetaTesting.X==X_when_closed)
            ProcessClick(mouse.x,  mouse.y,  mouse.Mode);
          */
        }
    }
    
    
      
    if (IsKeyPressed(eKeyD) && !gAgsconsole.Visible && gBetaTesting.Visible && !TextAreas.IsEnabled(debugTxtArea)) 
    {
      //we will intercept the D only if there currently isn't a gui with a textbox on screen : 
      //we iterate on all guis and all textboxes
      int i=0;
      bool exitLoop=false;
      while (i<Game.GUICount && !exitLoop)
      {
        if (gui[i].Visible) {
          int j=0;
          while (j<gui[i].ControlCount && !exitLoop) {
            TextBox* tb = gui[i].Controls[j].AsTextBox;
            if (tb!=null) 
              exitLoop=true;
            j++;
          }
        }
        i++;
      }
      
      if (!exitLoop) {
        if (D_held) { //D was already being pressed.
          //do nothing
        } else { //first tap on D
          DebugGui.ShowHide();
          D_held=true; 
        }
      }
    
    } else { //if (IsKeyPressed(eKeyD))
        D_held = false;
    }   


      /*  else
        {
          //Display("RANDOM"); //DEBUG
          ProcessClick(160, 100, eModeWalkto);
        }
      }
      */
    //}
    

    //update hovered control (display corresponding text in the status line)
    lBT_StatusLine.Text = StandaloneClick.GetHoveredText();
    
    if (Game.InSkippableCutscene && lBT_StatusLine.Text == "") {
      lBT_StatusLine.Text = String.Format("(%d,%d), %d",mouse.x, mouse.y,  mouse.IsButtonDown(eMouseLeft));
    }
  
    //fakeMouse.Visible = true; //back to normal
 
}


////////////////////////////////////////////////////
//
//      game_start
//
////////////////////////////////////////////////////

void InitDebugTextArea()
{
  debugTxtArea = TextAreas.Init(lBT_textArea,  lBT_cursor, bBT_OK, eTextArea_WesternEurope,  false);

  TextAreas.SetInfoControls(debugTxtArea,  lTextAreaStatusBar,   bTextAreaAbout);
  TextAreas.SetCopyPasteControls(debugTxtArea,  bTextAreaCut,  bTextAreaCopy,  bTextAreaPaste,  lBT_Marker1,  lBT_Marker2);
  TextAreas.SetForbiddenChars(debugTxtArea,  "<>");
  //TextAreas.SetAdditionalControls(debugTxtArea,  bTextAreaCut,  bTextAreaCopy,  bTextAreaPaste,  lTextAreaStatusBar,  bTextAreaAbout);
}


void InitGUI()
{
  //if (!initialized) //we do it only once
  //{

    //InitDebugTextArea();

    gBetaTesting.X=X_when_closed;
    gBetaTesting.Y=Y_when_closed;
    //bBT_ShowHide.Y+=150;
    
    StandaloneClick.RegisterControl(bBT_Help,           "About");
    StandaloneClick.RegisterControl(bBT_ScrollDown,     "Scroll Down");
    StandaloneClick.RegisterControl(bBT_ScrollUp,       "Scroll Up");
    StandaloneClick.RegisterControl(bBT_ShowHide,       "Show or hide");
    StandaloneClick.RegisterControl(bBT_Console,        "Show console");
    StandaloneClick.RegisterControl(bBT_newBug,         "New game-blocking bug");
    StandaloneClick.RegisterControl(bBT_newGlitch,      "New graphical glitch");
    StandaloneClick.RegisterControl(bBT_newInteraction, "New missing interaction");
    StandaloneClick.RegisterControl(bBT_newTranslation, "New bad translation");
    StandaloneClick.RegisterControl(bBt_top,            "Top of the list");
    StandaloneClick.RegisterControl(bBT_bottom,         "Bottom of the list");
    StandaloneClick.RegisterControl(bBT_sortID,         "Sort by ID");
    StandaloneClick.RegisterControl(bBT_sortType,       "Sort by type");
    StandaloneClick.RegisterControl(bBT_save,           "Save bugs to XML file");
    StandaloneClick.RegisterControl(bBT_DeleteBug,      "Delete this bug");
    
    //RADIO BUTTONS
    RadioButton.Reset();
    RadioButton.SetGraphics(760, 759, 761);
    RadioButton.BindChoice(0, bBT_radio1);
    RadioButton.BindChoice(1, bBT_radio2);
    
    //"DELETE" button
    bBT_DeleteBug.Visible = false;
    
    //BUGS LIST BOX
    lstBT_BugList.SetCoolTip(lBT_toolTip);
    
    //TEXT AREA
    InitDebugTextArea();
}


void game_start()
{
  InitGUI();

  ResetBugs();
  CloseBug();
  
  Bug.LoadFromXML();
  Bug.Sort(selectedSort);
  RefreshBugList();
  
}
  