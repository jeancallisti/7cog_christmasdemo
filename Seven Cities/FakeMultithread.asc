/*
#define MAXTASKS 10

#define NOTASK -1
struct TaskInfo {
  int ID;
  int progress;
  int estimate;
};
TaskInfo tasks[MAXTASKS];
int nbTasks=0;

bool moduleInitialized = false;

function Init()
{
  if (!moduleInitialized) {
    int i=0;
    while (i<MAXTASKS){
      tasks[i].ID = NOTASK;
      i++;
    }
    moduleInitialized = true;
  }
}
static TASKID FakeMultithread::New(String name,  int estimate)
{
  Init();
  
  int i=0;
  while (i<MAXTASKS){
    if (tasks[i].ID == NOTASK) {
       tasks[i].ID = i;
       tasks[i].progress = 0;
       tasks[i].estimate = estimate;
       nbTasks++;
       return i;
    }
    i++;
  }
  
  //if we reached this point it means there was no free slot for a new task
  AbortGame("FakeMultithread::New : Not enough free tasks");
}

static int FakeMultithread::IncreaseProgress(TASKID id,  int progress)
{
    if (tasks[id].ID != NOTASK) {
       tasks[id].progress +=progress;
       return FloatToInt(100.0*IntToFloat(tasks[id].progress)/IntToFloat(tasks[id].estimate));
    } 
}

static void FakeMultithread::Finish(TASKID id)
{
    if (tasks[id].ID != NOTASK) {
       tasks[id].ID = NOTASK;
       tasks[id].progress = 0;
       tasks[id].estimate = 0;
       nbTasks--;
    } 
    else
    {
      Display(String.Format("ERROR: Tried to Finish task '%d' more than once (in 'FakeMultithread::Finish')", id));
    }
    
}

static bool FakeMultithread::TaskExists(TASKID id) {
   return (tasks[id].ID != NOTASK);
}
  */
  
