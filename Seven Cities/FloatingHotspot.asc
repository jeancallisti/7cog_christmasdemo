// new module script

Overlay *oLabel;
DynamicSprite *sprite;
FontType Font = 0;
int Color = 10;
int MaxWidth;
bool SpringOn = true;
bool SlideIn = false;
int VOffset = -5;
GUI *GuiToUse;
LocationType lastLocation;

float lastMX,  lastMY;
bool isNew;
float moveTimer  = 0.0;

bool enabled = false;

/************************************************
*    Private Methods
************************************************/

float saturate(float val)
{
    if (val < 0.0) return 0.0;
    if (val > 1.0) return 1.0;
    return val;
}

float _lerp(float value1,  float value2,  float amount)
{
    return value1 + (value2 - value1) * amount;
}

float _smoothstep(float edge0, float edge1, float x)
{
    // Scale, bias and saturate x to 0..1 range
    x = saturate((x - edge0)/(edge1 - edge0)); 
    // Evaluate polynomial
    return x * x * (3.0 - 2.0 * x);
}

function _clamp(int val, int min,  int max) 
{
    if (val < min) return min;
    if (val > max) return max;
    return val;
}

function _drawHotspot()
{
  isNew = false;
  LocationType currentLocation = GetLocationType(mouse.x, mouse.y);
  if (currentLocation != lastLocation) isNew = true;
  lastLocation = currentLocation;

  bool useGui = false;
  if (GuiToUse != null) {
    useGui = true;
    GuiToUse.Visible = false;
  }

  if (oLabel != null && oLabel.Valid) oLabel.Remove();

  if (isNew) {
    moveTimer = 0.0;
  }
  String nameUnderMouse = Game.GetLocationName(mouse.x,  mouse.y);

  if (nameUnderMouse == null || nameUnderMouse == "") return;

  //SEVEN CITIES CUSTOM CODE
  //for characters with special names, used internally by our engine
  switch(nameUnderMouse)
  {
    case "MIRROR1":
    case "MIRROR2":
    case "MIRROR3":
    case "MIRROR4":
      return;
  }     
  //~SEVEN CITIES CUSTOM CODE
  
  int width = _clamp(GetTextWidth(nameUnderMouse, Font), 0, MaxWidth);
  int height = GetTextHeight(nameUnderMouse, Font, width + 2);

  float smooth = _smoothstep(0.0, 1.0, moveTimer);

  int drawY = FloatToInt(_lerp(IntToFloat(height), 0.0, smooth));
   //int drawY = FloatToInt(Maths.Sqrt((1.0 - moveTimer) * 100.0), eRoundNearest);
  moveTimer = saturate(moveTimer + 0.1);

   
  if (!SlideIn) drawY = 0;

  sprite = DynamicSprite.Create(width, height, true);
  DrawingSurface *surf = sprite.GetDrawingSurface();
  surf.DrawingColor = Color;
  surf.DrawStringWrapped(0, drawY, width + 1, Font, eAlignLeft, nameUnderMouse);
  surf.Release();

  float targetx = IntToFloat(_clamp(mouse.x - width / 2, 0, System.ViewportWidth - width));
  float targety = IntToFloat(_clamp(mouse.y - height, 0, System.ViewportWidth - height));

  float x, y;


  if (isNew || !SpringOn){
    x = targetx;
    y = targety;
  }
  else 
  {
      x = lastMX - (lastMX - targetx) / 4.0;
      y = lastMY - (lastMY - targety) / 4.0;
  }
  
  lastMX = x;
  lastMY = y;

  //Display("Showing %s at: %d %d", s,  x,  y);
  
  if(useGui)
  {
    GuiToUse.Visible = true;
    GuiToUse.BackgroundGraphic = sprite.Graphic;
    GuiToUse.Width = sprite.Width;
    GuiToUse.Height = sprite.Height;
    GuiToUse.X = FloatToInt(x, eRoundNearest);
    GuiToUse.Y = FloatToInt(y, eRoundNearest) + VOffset;
  }
  else 
  {
    oLabel = Overlay.CreateGraphical(FloatToInt(x, eRoundNearest), FloatToInt(y, eRoundNearest) + VOffset, sprite.Graphic,  true);
  }
}

/************************************************
*    Public Methods
************************************************/

static void FloatingHotspot::SetSlideIn(bool on)
{
  SlideIn = on;
}

static void FloatingHotspot::Enable()
{
  enabled = true;
}

static void FloatingHotspot::Disable()
{
  if(GuiToUse != null) GuiToUse.Visible = false;
  else {
      
      //SEVEN CITIES CUSTOM CODE
      //oLabel.Remove();
      if (oLabel != null && oLabel.Valid)
        oLabel.Remove();
      //~SEVEN CITIES CUSTOM CODE
  }
  enabled = false;
}

static bool FloatingHotspot::IsEnabled()
{
  return enabled;
}



static void FloatingHotspot::UseGui(GUI *toUse)
{
  GuiToUse = toUse;
}

static void FloatingHotspot::UseOverlay()
{
  if (GuiToUse != null) 
    GuiToUse.Visible = false;
  GuiToUse = null;
}

static void FloatingHotspot::SetSpring(bool on)
{
  SpringOn = on;
}

static void FloatingHotspot::SetVerticalOffset(int offset)
{
  VOffset = offset;
}

static void FloatingHotspot::SetMaxWidth(int width)
{
  MaxWidth = _clamp(width, 10, System.ViewportWidth);
}

static void FloatingHotspot::SetFont(FontType font)
{
  Font = _clamp(font, 0,  Game.FontCount - 1);
  
}
 
static void FloatingHotspot::SetColor(int color)
{
  Color = _clamp(color, 0, 65535);
}

function game_start() 
{
    FloatingHotspot.SetMaxWidth(System.ViewportWidth);
    enabled = false;
}

function repeatedly_execute_always()
{
  if(!enabled)
  {
    return;
  }
  
  _drawHotspot();  
}

