File* f;
int writingFile;
String n[2];

//returns the position of the last dot in the name, 
//or the last character if there is no dot
int extensionPos(String fileName) 
{
  String remainder = fileName;
  String beforeExtension = "";
  int dotPos = remainder.Contains(".");
  while (dotPos >=0)
  {
    //Display(String.Format("remainder='%s', dotPos='%d'",remainder, dotPos));
    remainder = remainder.Substring(dotPos+1, remainder.Length);
    beforeExtension = fileName.Substring(0,  dotPos);
    dotPos = remainder.Contains(".");
  }
  //there was no dot at all
  if (beforeExtension == "")
    return fileName.Length;
  else
    return beforeExtension.Length;
}

String GenerateFileNames(String fileName)
{
  int dotPos = extensionPos(fileName);
  String beforeExtension=fileName.Substring(0, dotPos);
  String extension="."; extension = extension.Append(fileName.Substring(dotPos+1, fileName.Length));
  
  n[0] = beforeExtension.Append("0");
  n[1] = beforeExtension.Append("1");
  n[0] = n[0].Append(extension);
  n[1] = n[1].Append(extension);
}

static bool SafeFile::HealthCheck(String fileName)
{

  GenerateFileNames(fileName);

  if (File.Exists(n[0]) && File.Exists(n[1])) {
    
    String message = String.Format( "SERIOUS WARNING: Files '%s' and '%s' both exist in the game folder.", n[0], n[1]);
    message = message.Append(       "[[This means a CRASH happened while a critical file was being saved.");
    message = message.Append(       "[[Please quit the game, keep only ONE of the two files (delete the one you don't need anymore), then start again.");
    
    Display(message);

    return false;
  }
  
  //Display(String.Format("Healthcheck on '%s' ('%s' and '%s') is OK.", fileName,  n[0],  n[1])); //DEBUG
  return true;
}


//returns the actual file name that can currently be found in the folder, based on the theoretical name.
//For example: if you pass "bugslist.xml", it will give you either "bugslist0.xml" or "bugslist1.xml"
static String SafeFile::FindInstance(String fileName)
{
  GenerateFileNames(fileName);

  if (File.Exists(n[0]))
    return n[0];
    
  if (File.Exists(n[1]))
    return n[1];
    
  Display(String.Format("SafeFile::FindInstance : ERROR : neither '%s' nor '%s' exist.", n[0],  n[1]));
  return fileName;
}

  
static bool SafeFile::Open(String fileName)
{
  //after that we're sure that only one of the two files exists
  if (!SafeFile.HealthCheck(fileName))
    return false;
    
  //we write to the file that does not exist
  if (File.Exists(n[0]))
    writingFile = 1;
  else
    writingFile = 0;

  //test and clear the file
  f=File.Open(n[writingFile],  eFileWrite);
  if (f==null) {
    Display(String.Format("ERROR: Could not open '%s' for writing", n[writingFile]));
    return false;
  }
  f.Close();
  //Wait(1);
  return true;
}



static void SafeFile::AppendLine(String line)
{
  f=File.Open(n[writingFile],  eFileAppend);
  if (f==null) {
    Display(String.Format("ERROR: Could not open '%s' for append", n[writingFile]));
    return;
  }
  
  f.WriteRawLine(line);
  f.Close(); //we close each time to force the flushing
}



static void SafeFile::Close()
{
  if (f!= null)
  {
    f=null; //the file is already closed
    if (writingFile ==1)
      File.Delete(n[0]);//File 1 is fully written. We delete the other file
    else
      File.Delete(n[1]);//File 0 is fully written. We delete the other file
  }
  
}


