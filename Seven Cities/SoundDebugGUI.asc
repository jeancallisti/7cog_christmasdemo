int gameLoopsCount = 0;
float msPerFrame;
GUI* guiSound;


int graphValues[]; //this array will contain nbGraphs*nbValuesPerGraph entries;
int nbValuesPerGraph;

Button* graphs[MAX_SOUND_SCALES]; int nbGraphs;
Button* rect[MAX_SOUND_SCALES]; int nbRect;
Label* labels1[MAX_SOUND_SCALES]; int nbLabels1;
Button* scaleButton; int nbScales;
//Label* labels2[MAX_SOUND_SCALES]; int nbLabels2; 
Button* unusedButtons[5]; int nbUnusedButtons;
Label* unusedLabels[5]; int nbUnusedLabels;

DynamicSprite* graphsSprites[MAX_SOUND_SCALES];
DynamicSprite* scaleSprite;
DynamicSprite* rectSprites[MAX_SOUND_SCALES];

//float timeRatio[MAX_SOUND_SCALES]; //use to create a relation between the game's speed (fps) and the track's length. To calculate the game cycles when we should check on the current volume
float lengthMs[MAX_SOUND_SCALES];
float startTimeMs[MAX_SOUND_SCALES];

//we allow two sets of values
int values1[MAX_SOUND_SCALES];
int values2[MAX_SOUND_SCALES];
int audioChannelsIndices[MAX_SOUND_SCALES]; //which audiochannel are we recording


int COLOR_RED;
int COLOR_GREEN;
int COLOR_BLUE;
int COLOR_YELLOW;
int COLOR_BLACK;
int COLOR_WHITE;
int COLOR_DARKGREEN;

//horizontal spacing
int positionLabel_left = 1;
int positionScale_left = 50;
int guiBorders = 5; //2 (rect 1) + 1 white space for line inbetween + 2 (rect 2)

//Vertical spacing
int rectHeight = 5;
int graphHeight = 10;
int textBelowHeight = 12;
int spacingBetweenScales = 0;


int max(int val1,  int val2)
{
    if (val1>val2) return val1;
    return val2;
}

int min(int val1,  int val2)
{
    if (val1<val2) return val1;
    return val2;
}

int bound(int val, int _min, int _max)
{
    return min(max(val, _min),  _max);
}

void initGraphValues()
{
    int x_150PercentScale = guiSound.Width-guiBorders;
    int x_minus25PercentScale = 0+positionScale_left+guiBorders;   
    nbValuesPerGraph = x_150PercentScale - x_minus25PercentScale; //one sample value per pixel; completely arbitrary
    
    graphValues = new int[nbValuesPerGraph*nbGraphs];
        
}

//draws either the top pair of rectangles or the bottom pair of rectangles into rect[i]
void drawRect(int i,  DrawingSurface* ds,  int _value1,  int _value2)
{
    /*
    *  GUI -25       0         25        50         75       100      125       150  GUI
    *   |   |        |         |          |         |         |        |         |   |
    */

    if ( _value1 != NO_SOUND_VALUE && _value2 != NO_SOUND_VALUE)
    {
        int value1 = _value1; int value2 = _value2;
        value1 = bound(value1,  -25, 150); value2 = bound(value2,  -25, 150);
        //value 1 always the largest so that we know which one to always draw first
        if (value1 < value2) { int temp = value1; value1 = value2; value2 = temp;}
        
        int minvalue1 = 0;  int maxvalue1 = value1; //rectangles are drawn left or right of zero
        if (minvalue1 > maxvalue1) { int temp = minvalue1; minvalue1 = maxvalue1; maxvalue1 = temp;} //smallest value goes to the left

        int minvalue2 = 0;  int maxvalue2 = value2; //rectangles are drawn left or right of zero
        if (minvalue2 > maxvalue2) { int temp = minvalue2; minvalue2 = maxvalue2; maxvalue2 = temp;} //smallest value goes to the left
        
        int nbIntervals = 7; //[-25,0],[0,25],[25,50],[50,75],[75,100,],[100,125],[125,150]
        int x_150PercentScale = guiSound.Width-guiBorders;
        int x_minus25PercentScale = 0+positionScale_left+guiBorders;    
        int step = (x_150PercentScale-x_minus25PercentScale)/nbIntervals;
        int x_minus0PercentScale = x_minus25PercentScale + step;
                    
        //AGSConsole.LogConsole(String.Format("1: val=%d, min=%d, max=%d.  2: val=%d, min=%d, max=%d.", value1, minvalue1, maxvalue1, value2, minvalue2, maxvalue2)); //DEBUG
        
        int color1 = COLOR_GREEN; int color2 = COLOR_DARKGREEN;
        
        if (value1 < 0 || value1 >= 100)
            color1 = COLOR_YELLOW;
            
        if (value2 < 0 || value2 >= 100)
            color2 = COLOR_RED;
        
        int leftShift = x_minus0PercentScale/*+positionScale_left+guiBorders*/;
        
        float ratio = IntToFloat(x_150PercentScale-x_minus25PercentScale)/175.0;
        ds.DrawingColor = color1;
        int height = rectHeight/2;
        int verticalOffset = 0; //top pair of values
        //if (!isUpperRect) verticalOffset = height+1; //bottom pair of values

        ds.DrawRectangle(leftShift+FloatToInt(ratio*IntToFloat(minvalue1)),  verticalOffset,  leftShift+FloatToInt(ratio*IntToFloat(maxvalue1)), verticalOffset+height-1);
        ds.DrawingColor = color2;
        ds.DrawRectangle(leftShift+FloatToInt(ratio*IntToFloat(minvalue2)),  verticalOffset,  leftShift+FloatToInt(ratio*IntToFloat(maxvalue2)), verticalOffset+height-1);
    }
}

void SetGraphValue(int graph,  int slot,  int value)
{
    if (slot < 0 || slot>=nbValuesPerGraph) {
        String msg = String.Format("SoundDebugGui::SetGraphValue : bad slot : %d (should be in 0, %d)", slot,  nbValuesPerGraph);
        FadeIn(64); Display(msg); Global.Log(msg);
    }
    
    graphValues[graph*nbValuesPerGraph+slot] = value;
}

int GetGraphValue(int graph,  int slot)
{
    if (slot < 0 || slot>=nbValuesPerGraph) {
        String msg = String.Format("SoundDebugGui::SetGraphValue : bad slot : %d (should be in 0, %d)", slot,  nbValuesPerGraph);
        FadeIn(64); Display(msg); Global.Log(msg);
    }
    
    return graphValues[graph*nbValuesPerGraph+slot];
}

void RenderRects()
{
    if (guiSound!=null && guiSound.Visible)
    {
        int i=0;
        while (i<nbRect)
        {
            if (rectSprites[i]==null) {
                rectSprites[i] = DynamicSprite.Create(guiSound.Width, rectHeight, false); //no alpha channel. We use magic pink
            }
            DrawingSurface* ds = rectSprites[i].GetDrawingSurface();
                ds.Clear(COLOR_TRANSPARENT);
                drawRect(i,  ds,  values1[i],  values2[i]);
                //drawRect(i,  ds,  values3[i],  values4[i], false);
            ds.Release();
            rect[i].NormalGraphic = rectSprites[i].Graphic;
            i++;
        }
        
    }
}

//Called at the end of each sound playing
void ClearGraph(int i)
{
    if (graphsSprites[i]==null) {
        graphsSprites[i] = DynamicSprite.Create(guiSound.Width, rectHeight, false); //no alpha channel. We use magic pink
    }
    DrawingSurface* ds = graphsSprites[i].GetDrawingSurface();
    ds.Clear(COLOR_TRANSPARENT);
    ds.Release();
}

void RenderGraph(int whichScale,  int startingFromValue)
{
    float MAXVALUE = 150.0; //maximum value in the array of values
    float HEIGHTPIXELS = 10.0; //a value of 150 means how many pixels?
    float ratio = HEIGHTPIXELS / MAXVALUE;
    
    if (guiSound!=null)
    {

        if (graphsSprites[whichScale]==null) {
            graphsSprites[whichScale] = DynamicSprite.Create(guiSound.Width, graphHeight, false); //no alpha channel. We use magic pink
        }
        DrawingSurface* ds = graphsSprites[whichScale].GetDrawingSurface();

            int v=startingFromValue;
            
            //erase old vertical line
            ds.DrawingColor = COLOR_TRANSPARENT;
            ds.DrawLine(v, 0, v, graphHeight);
            
            //draw new vertical line
            ds.DrawingColor = COLOR_YELLOW;            
            //while (v<nbValuesPerGraph)
            //{
                int heightPixels = FloatToInt(IntToFloat(GetGraphValue(whichScale, v))*ratio);
                ds.DrawLine(v, graphHeight, v, graphHeight-heightPixels);

            //    v++;
            //}
        ds.Release();
        graphs[whichScale].NormalGraphic = graphsSprites[whichScale].Graphic;
    }
}
void RenderScale()
{

    if (guiSound!=null)
    {
        int i=0;
        while (i<nbScales)
        {
            /*
            *  GUI  -25      0         25        50         75       100      125       150 GUI
            *   |   |        |         |          |         |         |        |         |  |
            */

            int nbIntervals = 7; //[-25,0],[0,25],[25,50],[50,75],[75,100,],[100,125],[125,150]
            int nbGradations = nbIntervals+1;
            
            int x_150PercentScale = guiSound.Width-guiBorders;
            int x_minus25PercentScale = 0+positionScale_left+guiBorders;
            int step = (x_150PercentScale-x_minus25PercentScale)/nbIntervals;
            int valueStep = (150-(-25))/nbIntervals;
                    
            int height = rectHeight+textBelowHeight;
            
            scaleSprite = DynamicSprite.Create(guiSound.Width, height, false); //no alpha channel. We use magic pink
            DrawingSurface* ds = scaleSprite.GetDrawingSurface();
            ds.Clear(COLOR_TRANSPARENT);
            if (i%2==0)ds.DrawingColor = COLOR_WHITE; else ds.DrawingColor = COLOR_YELLOW; 
            ds.DrawLine(x_minus25PercentScale,  rectHeight+1,  x_150PercentScale, rectHeight+1);
            int j=0; int offset = x_minus25PercentScale; int value = -25;
            while (j<nbGradations)
            {
                int specialOffset=0; if (j==nbGradations-1)specialOffset=-5; //exceptionally we move the last one slightly to the left
                
                ds.DrawLine(offset,  rectHeight-2,  offset, rectHeight);
                ds.DrawString(offset-5+specialOffset, rectHeight+3, eFontNarrowFR, String.Format("%d",value));
                j++;
                offset+=step;
                value+=valueStep;
            }
            ds.Release();
            scaleButton.NormalGraphic = scaleSprite.Graphic;
            i++;
        }
    }
}




void positionScale(Button* b,  int position)
{
   int x =  0;
   int y = guiBorders + position*(rectHeight+textBelowHeight+spacingBetweenScales);
   b.X = x; b.Y = y;
}

void positionRect(Button* b,  int position)
{
   int x =  0;
   int y = guiBorders + position*(rectHeight+textBelowHeight+spacingBetweenScales) + rectHeight/2 +2 ;
   b.X = x; b.Y = y;
}

void positionGraph(Button* b,  int position)
{
   int x =  0;
   int y = guiBorders + position*(rectHeight+textBelowHeight+spacingBetweenScales) + rectHeight/2 +2 ;
   b.X = x; b.Y = y;
}

void positionLabel(Label* b,  int position,  int textColor)
{
   b.TextColor = textColor;
   int x =  0;int y=guiBorders + position*(rectHeight+textBelowHeight+spacingBetweenScales);
   int offset = -3;
   //if (isUpper) offset = -3; else offset = 5;
   y+=offset;
   b.X = x; b.Y = y+5;
   b.Width = positionScale_left+5; //+5 just in case the label needs extra space, which makes it overlapping the scale slightly
   b.Text = String.Format("?");
}

static int SoundDebugGUI::GetNbScales()
{
  return nbScales;
}


static void SoundDebugGUI::SetSoundGUI(GUI* _gui,  int requestedChannels)
{
    int nbRequiredScales = 1;
    int nbRequiredGraphs = requestedChannels;
    int nbRequiredRect = requestedChannels;
    int nbRequiredLabels = requestedChannels;
    
    guiSound = _gui;
    int i=0; int buttonCount=0; int labelsCount=0;
    while (i<guiSound.ControlCount) //we gonna use all the controls in this GUI. YEAH. ALL OF THEM.
    {
        GUIControl* g = guiSound.Controls[i];
        if (g.AsButton != null)
        {
            if (nbScales<nbRequiredScales)
            {
                scaleButton = g.AsButton;
                positionScale(scaleButton,  requestedChannels-1); //at the position of the last channel
                nbScales++;               
            } else if (nbRect<nbRequiredRect)
            {
                rect[nbRect] = g.AsButton;  //we use these button to render the volume rectangles
                positionRect(rect[nbRect],  nbRect);
                nbRect++;                
            }
            else if (nbGraphs<nbRequiredGraphs)
            {
                graphs[nbGraphs] = g.AsButton;  //we use these button to render the volume rectangles
                positionGraph(graphs[nbGraphs],  nbGraphs);
                nbGraphs++;                
            }
            else
            {
                //too many buttons? who cares. Let's just show them
                unusedButtons[nbUnusedButtons] = g.AsButton;  //we use these button to render the volume rectangles
                g.AsButton.X=0; g.AsButton.Y=0; g.AsButton.Width=10; g.AsButton.Height=10; g.AsButton.Text = "UNUSED";
                nbUnusedButtons++; 
            }

                
            buttonCount++;
        }
        else if (g.AsLabel != null)
        {
            if (nbLabels1<nbRequiredLabels)
            {
                int labelColor = COLOR_WHITE;
                if (nbLabels1%2==1) labelColor = COLOR_YELLOW; //alternate color once every two rows
                labels1[nbLabels1] = g.AsLabel;
                positionLabel(labels1[nbLabels1],  nbLabels1,  labelColor);
                nbLabels1++; //redundant to labelsCount
                
            }
            else
            {
                //too many labels? who cares. Let's just show them
                unusedLabels[nbUnusedLabels] = g.AsLabel;  //we use these button to render the volume rectangles
                g.AsLabel.X=0; g.AsLabel.Y=0; g.AsLabel.Width=10; g.AsLabel.Height=10; g.AsLabel.Text = "UNUSED";
                nbUnusedLabels++; 
            }
            /*
            if (labelsCount%2==0) {
                labels1[labelsCount/2] = g.AsLabel;
                if (nbLabels1%2==1) labelColor = COLOR_YELLOW;
                positionLabel(labels1[labelsCount/2],  nbLabels1,  true,  labelColor);
                nbLabels1++;
            }else{
                labels2[labelsCount/2] = g.AsLabel;
                if (nbLabels2%2==1) labelColor = COLOR_YELLOW;
                positionLabel(labels2[labelsCount/2],  nbLabels2,  false,  labelColor);
                nbLabels2++;
            }
            */
            labelsCount++;
        }
        else
        {
            //unknown type of control; let's ignore it
        }
        i++;
    }
    
    if (    nbScales < nbRequiredScales
        || nbRect < nbRequiredRect
        || nbLabels1 < nbRequiredLabels
        || nbGraphs < nbRequiredGraphs
     )
    {
        String errorMessage = String.Format("ERROR in 'SoundDebugGUI::SetGUI' : Please provide more controls on the GUI (counted %d,%d,%d)",nbScales,  nbRect,  labelsCount);
        //AGSConsole.LogConsole(errorMessage);
        AbortGame(errorMessage);
    }
    
    RenderScale();
    initGraphValues();
}

float fmax(float val1,  float val2)
{
    if (val1>val2) return val1;
    return val2;
}

float fmin(float val1,  float val2)
{
    if (val1<val2) return val1;
    return val2;
}

float fbound(float val, float _min, float _max)
{
    return fmin(fmax(val, _min),  _max);
}

static void SoundDebugGUI::SetSoundValues(int whichScale,  int value1,  int value2/*,  int value3,  int value4*/)
{
    values1[whichScale] = value1;
    values2[whichScale] = value2;
    //values3[whichScale] = value3;
    //values4[whichScale] = value4;
    
    labels1[whichScale].Text = String.Format("%d/%d",value1, value2); //first pair of values always visible
    
    /*
    if (value3!=NO_SOUND_VALUE && value4 !=NO_SOUND_VALUE) //second pair of values visible only if present
    {
        labels2[whichScale].Visible = true;
        labels2[whichScale].Text = String.Format("%d/%d",value3, value4);
    }
    else
    {
        labels2[whichScale].Visible = false;
    }
    */
    if (lengthMs[whichScale] > 0.0) //only if there's something being recorded
    {
        Display("updateing %d", whichScale
         );
        int index = audioChannelsIndices[whichScale];
        AudioChannel* c = SoundManagement.GetAudioChannel(index);
        if (c!=null && c.PlayingClip!=null) {

            float positionMs = IntToFloat(bound(c.PositionMs,  0,  c.LengthMs)); //beware of a bug with PosiitonMs
            
            int positionOnGraphInPixels = bound((FloatToInt((startTimeMs[whichScale] + positionMs)/msPerFrame))%nbValuesPerGraph,  0,  nbValuesPerGraph);
            
            Display("startOnGraphMs=%d, positonMs=%d, positoinPixels=%d",FloatToInt(startTimeMs[whichScale]),  FloatToInt(positionMs),  positionOnGraphInPixels); //DEBUG ONLY
            
            if (GetGraphValue(whichScale, positionOnGraphInPixels) == 0) 
            {
                SetGraphValue(whichScale, positionOnGraphInPixels,  c.Volume);
                SetGraphValue(whichScale, positionOnGraphInPixels+1, 0); //we erase the next one to keep time of when it's time to redraw (we do it when we write into the slot)
                RenderGraph(whichScale, positionOnGraphInPixels);
            }
        }
        else
        {
            lengthMs[whichScale] =0.0;
            //positionMs[whichScale] = 0.0;
        }
    }
}



void game_start()
{
    msPerFrame = 1000.0/IntToFloat(GetGameSpeed()); //how many milliseconds elapse per game tick

    COLOR_RED = Game.GetColorFromRGB(255,0, 0 );
    COLOR_GREEN = Game.GetColorFromRGB(0,255, 0 );
    COLOR_DARKGREEN = Game.GetColorFromRGB(50,100, 0 );
    COLOR_BLUE = Game.GetColorFromRGB(0,0, 252 );
    COLOR_YELLOW = Game.GetColorFromRGB(255,255, 0 );
    COLOR_BLACK = Game.GetColorFromRGB(0,0, 0 );
    COLOR_WHITE = Game.GetColorFromRGB(255,255, 252 );
    
    SoundDebugGUI.SetSoundGUI(gSoundDebug,  7);

    //DEBUG
    //graphs : randomValues
    int i=0;
    while (i<nbGraphs)
    {
        int v=0;
        while (v<nbValuesPerGraph)
        {
            int k = Random(150);
            SetGraphValue(i, v, k);
            v++;
        }
        i++;
    }
    //END OF DEBUG
    
    //DEBUG : random values
    /*
    int i=0;
    while (i<nbRect)
    {
        int value1 = Random(175)-25;
        int value2 = value1/2;
        SoundDebugGUI.SetSoundValues(i, value1, value2);
        i++;
    }
    */
}

//to be called when you want to set a new start on the scale
//if newLengthMs==0 we're actually stopping the recording on that channel
static void SoundDebugGUI::SetNewStart(int whichScale,  float newLengthMs)
{
    if (newLengthMs == 0.0) //stop
    {
        lengthMs[whichScale] =0.0;
        startTimeMs[whichScale] = 0.0;
        return;
    }
    
    //start or modify!
    float currentPlayPercentage;
    if (lengthMs[whichScale] > 0.0) //watch out for division by zero
        currentPlayPercentage = startTimeMs[whichScale] * 100.0 /lengthMs[whichScale] ;
    else
        currentPlayPercentage = 0.0;
    lengthMs[whichScale] = newLengthMs;
    startTimeMs[whichScale] = (currentPlayPercentage * lengthMs[whichScale]) / 100.0;

    
}

int ScaleToChannelIndex(int scale)
{
    
   return scale; //TODO group by groups
}

int ChannelIndexToScale(int channelIndex)
{
   return channelIndex; //TODO group by groups
}



void StartStopRecordingChannels()
{
    int scale=0;
    while (scale<SoundManagement.GetAudioChannelTotalCount())
    {
        int audioChannelIndex = ScaleToChannelIndex(scale); //TODO: actually do it by groups
        AudioChannel* c = SoundManagement.GetAudioChannel(audioChannelIndex);
        if (c != null && c.PlayingClip!=null)
        {
            if (lengthMs[scale] == 0.0) //if we were not already tracking the channel
            {
                SoundDebugGUI.SetNewStart(scale, IntToFloat(c.LengthMs));
                audioChannelsIndices[scale] = audioChannelIndex; //for later
                Display(String.Format("Started recording %d (scale %d)", audioChannelIndex, scale));
            }
            
        }
        else //no more sound playing on that channel
        {
            SoundDebugGUI.SetNewStart(scale, 0.0); //stop tracking it
            //Display(String.Format("Stopped recording %d (scale %d)", audioChannelIndex,  ch));
        }
        scale++;
    }
}



void repeatedly_execute()
{
    if (guiSound != null && guiSound.Visible)
    {
        StartStopRecordingChannels(); //detect which channels have started playing, and which have stopped
        
        
        RenderRects();
        
        gameLoopsCount++;
        if (gameLoopsCount > nbValuesPerGraph) gameLoopsCount = 0; //we decide to reset the number of ticks each time they reach about nbValuesPerGraph. Avoir variable overflow and stuff
    }
    

}


  
  