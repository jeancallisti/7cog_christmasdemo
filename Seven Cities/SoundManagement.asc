//
//
//          Sound-related stuff that's not documented in the manual
//          http://www.adventuregamestudio.co.uk/forums/index.php?topic=43510.0
//          http://www.adventuregamestudio.co.uk/forums/index.php?topic=54195.new#new
//
//
//          Read about the AudioCache folder at http://www.adventuregamestudio.co.uk/manual/ags13.htm
//
//
//
//
//
//

#define MAX_NAMED_CLIPS 300
#define MAX_NAMED_AUDIOTYPES 5
#define MAX_AUDIOCHANNELS 9
int audioTypes[];
int audioTypesCount;
AudioChannel* audioChannels[MAX_AUDIOCHANNELS]; //this array is split in several groups. See AudioChannelsGroup



//note: set '0' will always be the group containing the "shared" audioChannels (the ones playing the AudioTypes that have MaxChannels=0)
struct AudioChannelsGroup
{
    int startIndex; //where this group starts in the array of AudioChannels
    int length; //how many channels does it contain
    AudioType types[MAX_NAMED_AUDIOTYPES]; //to which type(s) it's bound. Only group #0 can have several AudioTypes (the ones that have MaxChannels=0)
                                           //watch out : this is 1-based (use FindAudioTypeIndex if needed)
    int nbTypes; //This is normally 1 except for group #0
};
AudioChannelsGroup audioChannelsGroups[MAX_NAMED_AUDIOTYPES];
int nbAudioChannelsGroups;



//there's a number of channels reserved PER TYPE, except for AudioChannel pool shared by AudioTypes that have MaxChannels==0
//This tells us how many 'shared' channels there are. This is normally redundant to audioChannelsSet[0].length
int nbSharedAudioChannels; 

//all the audioChannels of all AudioTypes;
int nbAudioChannels;


struct NamedClip
{
    AudioClip* c;
    String name;
};
NamedClip namedClips[MAX_NAMED_CLIPS];
int nbNamedClips=0;



struct NamedAudioType
{
    AudioType type; //watch out: this is 1-based.
    String name;
    int maxChannels; //if our module works this should be equal to the value defined in the editor (0 for "unlimited" channels)
    int nbChannels; 
};
NamedAudioType namedAudioTypes[MAX_NAMED_AUDIOTYPES]; //watch out: this is 0-based. Use 'FindAudioTypeIndex' to match the indices
int nbAudioTypes = 0;



int FindAudioTypeIndex(AudioType type)
{
    int i=0; while (i<nbAudioTypes) { 
        if (namedAudioTypes[i].type == type) { return i; }  i++; 
    }
    String msg = String.Format("SoundManagement::FindAudioTypeIndex : could not find index of audiotype '%d'", type); FadeIn(64); Display(msg); Global.Log(msg); return -1;
}

static int SoundManagement::GetAudioClipCount()
{
    #ifdef  SCRIPT_API_v3406
        return Game.AudioClipCount;
    #endif
    #ifndef  SCRIPT_API_v3406
        //we are still in 3.3.x or in an insufficient level of 3.4.x
        return nbNamedClips;
    #endif
    FadeIn(64);
    Global.Log("SoundManagement::GetAudioClipCount : woops, womething's wrong with the macros");
    Display("SoundManagement::GetAudioClipCount : woops, womething's wrong with the macros");
    return 0;
}


static AudioClip* SoundManagement::GetAudioClip(int i)
{
    if (i<SoundManagement.GetAudioClipCount())
    {
        #ifdef  SCRIPT_API_v3406
            return Game.AudioClips[i];
        #endif
        #ifndef  SCRIPT_API_v3406
            //we are still in 3.3.x or in an insufficient level of 3.4.x
            return namedClips[i].c;
        #endif
    }
    else
    {
        FadeIn(64);
        Global.Log(String.Format("SoundManagement::GetAudioClip : you tried to access AudioClip %d but there are only %d",i, SoundManagement.GetAudioClipCount()));
        Display("SoundManagement::GetAudioClip : you tried to access AudioClip %d but there are only %d",i, SoundManagement.GetAudioClipCount());
        return null;
    }
    FadeIn(64);
    Global.Log("SoundManagement::GetAudioClipCount : woops, womething's wrong with the macros");
    Display("SoundManagement::GetAudioClipCount : woops, womething's wrong with the macros");
    return null;
}



static AudioClip* SoundManagement::GetAudioClip_ByName(String s)
{
    int i=0;
    while (i<nbNamedClips)
    {
        if (namedClips[i].name == s)
            return namedClips[i].c;
        i++;
    }
    FadeIn(64);
    Global.Log(String.Format("SoundManagement::GetAudioClip_ByName : no AudioClip is named %s",s));
    Display("SoundManagement::GetAudioClip_ByName : no AudioClip is named %s",s);
    return null;
    
}




static bool SoundManagement::IsAmbient(AudioClip* a)
{
    return (a.Type == eAudioTypeAmbientSound);
}

//returns true of this audioType shares its channels with other AudioTypes (in other words : if it has its MaxChannels==0)
static bool SoundManagement::IsShared(AudioType audioType)
{
    int i=0;
    while (i<audioChannelsGroups[0].nbTypes) {
        if (audioChannelsGroups[0].types[i] == audioType)
            return true;
        i++;
    }
    return false;
}

//returns true of this AudioChannel is "shared", i.e. is used by an AudioType that has MaxChannels==0
static bool SoundManagement::IsSharedAudioChannel(AudioChannel* c)
{
    int ch = 0;
    while (ch < audioChannelsGroups[0].length) {
        if (audioChannels[audioChannelsGroups[0].startIndex+ch] == c)
            return true;
        ch++;
    }
    return false;
}

static int SoundManagement::GetAudioChannelTotalCount()
{
    return nbAudioChannels;
}
    
    
    
static String SoundManagement::GetAudioClipName(AudioClip* a)
{
    if (a==null)
        return "null";
        
    int i=0;
    while (i<nbNamedClips)
    {
        if (namedClips[i].c == a)
            return namedClips[i].name;
        i++;
    }
    FadeIn(64);
    Global.Log(String.Format("SoundManagement::GetName : did not find name of clip"));
    Display("SoundManagement::GetName : did not find name of clip");
    return "UNNAMED CLIP";
}

static String SoundManagement::ChannelGetAudioClipName(AudioChannel* ch)
{
    if (ch==null)
        return "null";
        
    return SoundManagement.GetAudioClipName(ch.PlayingClip);    
}


void AddAudioType(int audioType)
{
    namedAudioTypes[nbAudioTypes].type = audioType;
    nbAudioTypes++;
}

void NameAudioType(int i,  String name)
{
    namedAudioTypes[i].name = name;
}


//this function is designer in a weird fashion (you'll ask: why not set the names directly when calling 'AddAudiotypes'?). We're anticipating in
//case AudioTypes can some day be counted in AGS
void RegisterAudioTypes()
{
    AddAudioType(eAudioTypeAmbientSound);
    AddAudioType(eAudioTypeMusic);
    AddAudioType(eAudioTypeSound);
    AddAudioType(eAudioTypeDebugMaxChannels0);
    
    int nbAudioTypes2 = 4; //safety; must match the types registered above
    
    int i=0;
    while (i<nbAudioTypes)
    {
        if (namedAudioTypes[i].type == eAudioTypeAmbientSound)
            NameAudioType(i, "eAudioTypeAmbientSound");
        else if (namedAudioTypes[i].type == eAudioTypeMusic)
            NameAudioType(i, "eAudioTypeMusic");
        else if (namedAudioTypes[i].type == eAudioTypeSound)
            NameAudioType(i, "eAudioTypeSound");
        else if (namedAudioTypes[i].type == eAudioTypeDebugMaxChannels0)
            NameAudioType(i, "eAudioTypeDebugMaxChannels0");
        else {
            FadeIn(64);
            String msg = String.Format("SoundManagement::RegisterAudioTypes() : you forgot to name AudioType '%d'!", namedAudioTypes[i].type);
            Display(msg); Global.Log(msg);
        }
        i++;
    }
    
    if (i!=nbAudioTypes2) {
        FadeIn(64);
        String msg = String.Format("SoundManagement::RegisterAudioTypes() : couned %d types, but manually set %d types.", i,  nbAudioTypes2);
        Display(msg); Global.Log(msg);
    }
}

static int SoundManagement::GetAudioTypesCount()
{
    return nbAudioTypes;
}

static String SoundManagement::GetAudioTypeName(AudioType audioType)
{
    int i=FindAudioTypeIndex(audioType);
    if (i>=0)
        return namedAudioTypes[i].name;
    
    return "UNKNOWN AUDIO TYPE";
}



void AddClip(AudioClip* c,  String name)
{
    if (nbNamedClips < MAX_NAMED_CLIPS)
    {
        namedClips[nbNamedClips].c = c;
        namedClips[nbNamedClips].name = name;
        nbNamedClips++;
        return;
    }
    FadeIn(64);
    Global.Log(String.Format("SoundManagement::RegisterAudioClip : not enough slots to store '%s'. Increase MAX_NAMED_CLIPS",name));
    Display("SoundManagement::RegisterAudioClip : not enough slots to store '%s'. Increase MAX_NAMED_CLIPS",name);
    
}



void CheckForgottenTypes()
{
    int i=0;
    while (i<SoundManagement.GetAudioClipCount())
    {
        AudioClip* c= SoundManagement.GetAudioClip(i);
        String audioType = SoundManagement.GetAudioTypeName(c.Type);
        if (audioType == "") {
            FadeIn(64);
            Global.Log(String.Format("SoundManagement::CheckForgottenTypes : AudioClip '%s' has AudioType '%d' which didn't receive a name.", SoundManagement.GetAudioClipName(c), audioType));
            Display("SoundManagement::CheckForgottenTypes : AudioClip '%s' has AudioType '%d' which didn't receive a name.", SoundManagement.GetAudioClipName(c), audioType);
        }
        i++;
    }
}

void CheckForgottenClips()
{
    int forgotten = 0;
    #ifdef  SCRIPT_API_v3406
        forgotten = Game.AudioClipCount - nbNamedClips;
    #endif
    #ifndef  SCRIPT_API_v3406
        //we are still in 3.3.x or in an insufficient level of 3.4.x
        forgotten= 0;
        Global.Log("SoundManagement::CheckForgottenClips : there is no way of performing this self-check in this version of AGS. You need AGS 3.4.0.x");
    #endif
    
    if (forgotten!=0)
    {
        FadeIn(64);
        Global.Log(String.Format("SoundManagement::CheckForgottenClips : you forgot to name %d clips. Do it in module SoundManagement.", forgotten));
        Display("SoundManagement::CheckForgottenClips : you forgot to name %d clips. Do it in module SoundManagement.", forgotten);
        AbortGame("all clips need to be named");
    }
}


int GetAudioChannelGroup_ByAudioType(AudioType type)
{
    int i=0;
    while (i<nbAudioChannelsGroups) {
        int j=0;
        while (j<audioChannelsGroups[i].nbTypes)
        {   
            if (audioChannelsGroups[i].types[j] == type)
                return i;
            j++;
        }
        
        i++;
    }
    int type_index = FindAudioTypeIndex(type); String audioTypeName = namedAudioTypes[type_index].name;
    FadeIn(64); String msg = String.Format("SoundManagement::GetAudioChannelGroup_ByAudioType : didn't find AudioType %d (%s) in the channels groups", type,  audioTypeName);
    Global.Log(msg); Display(msg);
    return -1;
        
}
static int SoundManagement::GetAudioChannelsMax(AudioType type)
{
    int i = FindAudioTypeIndex(type);
    return namedAudioTypes[i].maxChannels;    
}
    
static int SoundManagement::GetAudioChannelsActual(AudioType type)
{
    int i = FindAudioTypeIndex(type);
    return namedAudioTypes[i].nbChannels;    
}

static int SoundManagement::GetSharedChannelsCount()
{
    int anySharedType = audioChannelsGroups[0].types[0]; //the first group always contains the shared types. Then we arbotrarily take the first type of the array
    return namedAudioTypes[anySharedType].nbChannels;    
}

static AudioChannel* SoundManagement::GetAudioChannel(int i)
{
    #ifdef  SCRIPT_API_v3406
        return System.AudioChannels[i];
    #endif
    #ifndef  SCRIPT_API_v3406
        return audioChannels[i];
    #endif
    FadeIn(64);
    Global.Log(String.Format("SoundManagement::GetAudioChannel : There is no AudioChannel with index %d.", i));
    Display("SoundManagement::GetAudioChannel : There is no AudioChannel with index %d.", i);
    return audioChannels[0];
}

AudioClip* FindAnyAudioClip_WithAudioType(AudioType t)
{
        AudioClip* c;
        //Find an audioClip that has this type
        int i = 0;
        while (i<nbNamedClips) {
            c=namedClips[i].c;
            if (c!=null && c.Type == t) { return c; } //break the loop
            i++;
        }  
        return null;
}



void StopAllChannels()
{
    int i=0;
    while (i<nbAudioChannels)
    {
        audioChannels[i].Stop();
        i++;
    }
}

void AudiotypesDump()
{
    Global.Log("== NAMED AUDIOTYPES DUMP ==");
    int ty=0;
    while (ty<nbAudioTypes)
    {
        Global.Log(String.Format("%d : %s", ty,  namedAudioTypes[ty].name));
        ty++;
    }
    Global.Log("== END OF NAMED AUDIOTYPES ==");
    Global.Log("");
}

static String SoundManagement::DumpChannelsGroups()
{
    Global.Log("==CHANNELS GROUPS DUMP==");
    

    int group=0;
    while (group<nbAudioChannelsGroups) {
        String result = String.Format("Group %d: AudioTypes", group);
        int j=0;
        while (j<audioChannelsGroups[group].nbTypes)
        {
            AudioType t = audioChannelsGroups[group].types[j];
            int type_index = FindAudioTypeIndex(t);
            String typeName = namedAudioTypes[type_index].name;
            result = String.Format("%s '%s'", result,  typeName);          
            j++;
        }
        Global.Log(result);
        Global.Log(String.Format("    start=%d", audioChannelsGroups[group].startIndex));
        Global.Log(String.Format("    lengt=%d", audioChannelsGroups[group].length));
        AudioType t = audioChannelsGroups[group].types[0];
        int type_index = FindAudioTypeIndex(t);
        int nbChannels = namedAudioTypes[type_index].nbChannels;
        int maxChannels = namedAudioTypes[type_index].maxChannels;
        Global.Log(String.Format("    nbCh=%d", nbChannels));
        Global.Log(String.Format("    maxCh=%d", maxChannels));
        
        group++;
    }
    
    Global.Log("==END CHANNELS GROUPS DUMP==");
    Global.Log("");
}
    

//this function will produce a different result depending on the AudioType of testClip, and the value of Maxchannels for that AudioType
//Please note that I'm not sure at all if it's required to save and restore the saved volumes. To be tested.
void CountAudioChannels_Manually(AudioClip* testClip)
{
    Global.Log(String.Format("Counting channels for AudioType '%s'(%d) using AudioClip '%s'.", SoundManagement.GetAudioTypeName(testClip.Type), testClip.Type,  SoundManagement.GetAudioClipName(testClip)));

    int type_index = FindAudioTypeIndex(testClip.Type);
    String audioTypeName = namedAudioTypes[type_index].name;
    //Global.Log(String.Format("Counting channels for AudioType %s", audioTypeName));
    
    StopAllChannels();
    
    int currentGroupStart=audioChannelsGroups[nbAudioChannelsGroups].startIndex+audioChannelsGroups[nbAudioChannelsGroups].length;
    int currentGroupLen=0;    
    int currentChannelsGroupIndex = nbAudioChannelsGroups+1; //we'll effectively increment only if it's a success
    
    //We'll count the audiochannels by playing priority 1 sounds until one of them uses a previously-used channel
    AudioChannel* firstChannel = testClip.Play(eAudioPriorityVeryHigh, eOnce);
    if (firstChannel == null) {
        String msg = String.Format("CountAudioChannels_Manually : could not play clip '%s'. This could be a low-level issue (hardware?). Leaving function.", SoundManagement.GetAudioClipName(testClip));
        Global.Log(msg);
        FadeIn(64); Display(msg); 
        return ; //failure! The groups of channels will remain invisible to our system
    }
    
    //SoundManagement.DumpChannelsGroups(); //for debug only
    
    //FIRST, A TEST
    //check if we've met the very first channel before during a previous counting for another AudioType
    int i=0;
    while (i<nbAudioChannels) {
        if (audioChannels[i] == firstChannel)
        {           
            //we've met this channel before. It means we're testing again a group of channels that we already know everything about.
            //but which group?
            int channelsGroup = -1;
            int group=0; 
            while (group<nbAudioChannelsGroups && channelsGroup == -1)
            {
                int channel=0;
                while (channel<audioChannelsGroups[group].length && channelsGroup == -1)
                {
                    int channelIndex = audioChannelsGroups[group].startIndex+channel;
                    if (audioChannels[channelIndex] == firstChannel)
                        channelsGroup = group;
                    channel++;
                }
                group++;
            }
            
            if (channelsGroup < 0)
            {
                String msg = String.Format("    The channel of AudioType '%s' was found in a channels group before, but I can't find which one.. :-(.", audioTypeName);
                Global.Log(msg);
                FadeIn(64); Display(msg); //DEBUG ONLY
            }
            else 
            {
                String msg = String.Format("    the channel of AudioType '%s' was already bound to channels group #%d.", audioTypeName,  channelsGroup);
                Global.Log(msg);    
                if (channelsGroup > 0) {
                    Global.Log(String.Format("CountAudioChannels_Manually : WARNING AudioClip '%s' was played in a channel reserved by AudioType '%s' (channels group #%d). Did you register this AudioType twice or did you get mixed up with your test AudioClips?", SoundManagement.GetAudioClipName(testClip),  audioTypeName,  channelsGroup));
                    Global.Log("CountAudioChannels_Manually : I'll keep counting but I can't guarantee the integrity of the results.");
                }
                else //channelsGroup == 0
                {
                    //if it's group #0 it's the special group that has unlimited (shared) channels.
                    //we need to add this type to the list of known potential AudioTypes of that group of channels
                    
                    Global.Log("    This is the shared channel. Let's add this AudioType to the channels group's list of AudioTypes.");
                    
                    //has it been added before?
                    int type=0; bool found = false;
                    while (type < audioChannelsGroups[channelsGroup].nbTypes && !found) {
                        if (audioChannelsGroups[channelsGroup].types[type] == testClip.Type) {
                             Global.Log(String.Format("    CountAudioChannels_Manually : This AudioType is already present in group %d. Skipping.", channelsGroup));
                             found = true;
                        }
                        type++;
                    }
                    if (!found) {
                        audioChannelsGroups[channelsGroup].types[audioChannelsGroups[channelsGroup].nbTypes] = testClip.Type;
                        audioChannelsGroups[channelsGroup].nbTypes++;                        
                    }
                }
            }
            StopAllChannels();
            //now we're done with this group. No need to test it again. exit
            return;
        }
        i++;
    }
    
    //NOW FOR THE ACTUAL COUNTING
    AudioChannel* newChannels[MAX_AUDIOCHANNELS];
    newChannels[0]= firstChannel;
    int nbNewChannels=1; //we've already played firstChannel; that's 1
    
    AudioChannel* otherChannel = testClip.Play(eAudioPriorityVeryHigh, eOnce);
    while (otherChannel != firstChannel)
    {
        newChannels[nbNewChannels] = otherChannel;
        nbNewChannels++;
        otherChannel = testClip.Play(eAudioPriorityVeryHigh, eOnce);
    }
    
    //Now that we know which are the new channels, let's include them into our structures
    i=0;
    while (i<nbNewChannels)
    {
        newChannels[i].Stop();
        audioChannels[nbAudioChannels+i] = newChannels[i];
        i++;
    }
    
    //let's deal with the groups
    audioChannelsGroups[nbAudioChannelsGroups].startIndex = nbAudioChannels;
    audioChannelsGroups[nbAudioChannelsGroups].length = nbNewChannels;
    audioChannelsGroups[nbAudioChannelsGroups].nbTypes = 1;
    audioChannelsGroups[nbAudioChannelsGroups].types[0] = testClip.Type;   
    
    namedAudioTypes[type_index].maxChannels = nbNewChannels;
    namedAudioTypes[type_index].nbChannels = nbNewChannels;
    
    String msg = String.Format("Manually Counted %d AudioChannels. Created channels group #%d", nbNewChannels,  nbAudioChannelsGroups);
    
    if (nbAudioChannelsGroups == 0) { //the first group is always the one that has Maxchannels = 0
        namedAudioTypes[type_index].maxChannels = 0;
        nbSharedAudioChannels = nbNewChannels; 
    }
        
    nbAudioChannelsGroups++;
    nbAudioChannels+=nbNewChannels;

    

    Global.Log(msg);
    //FadeIn(64); Display(msg); //DEBUG ONLY

}


void CountAudioChannels_MaxChannel()
{
    Global.Log("");
    Global.Log("== START CHANNEL COUNT ==");
    AudioType type = -1;
    
    AudioClip* testClip = aTestClip;//YOU MUST ALWAYS START WITH ONE OF THE CLIPS which audiotype have MaxChannels=0
    Global.Log(String.Format("will be counting channels for AudioType %d (%s) using AudioClip '%s'.", testClip.Type,  SoundManagement.GetAudioTypeName(testClip.Type), SoundManagement.GetAudioClipName(testClip)));
    CountAudioChannels_Manually(testClip); 
 
    //now restarting with everything
    int i=0;
    while (i<nbAudioTypes)
    {
        AudioType t = namedAudioTypes[i].type; //t is 1-based. i is 0-based 
        testClip = FindAnyAudioClip_WithAudioType(t);
     
        if (testClip == null) {
            String msg = String.Format("SoundManagement::CountAudioChannels_MaxChannelMore : Could not find a test clip with AudioType %d (%s).", t,  SoundManagement.GetAudioTypeName(t));
            FadeIn(64); Display(msg);
            Global.Log(msg);
        }
        else
        {
            CountAudioChannels_Manually(testClip);
        }
        
        i++;
        
    }
    Global.Log("== END CHANNEL COUNT ==");
    Global.Log("");
    Global.Log("More channels info:");
    Global.Log(String.Format("    Found a total of %d channels.", nbAudioChannels));  
    Global.Log(String.Format("    %d of these channels are shared by all the AudioTypes that have MaxChannel = 0.", nbSharedAudioChannels));    
    Global.Log(String.Format("    The channels split as follows:", nbAudioChannels));  
    SoundManagement.DumpChannelsGroups();

    Global.Log("");
}



/*
//IMPORTANT: this clip's Audiotype must have a setting that allows to use an unlimited number of channels (max channel = 0)
//this counts how many channels can be shared by the AudioTypes that have MaxChannel=0
void CountAudioChannels_MaxChannel0(int audioType_zeroBased)
{
    Global.Log("Count AudioChannels start.");
    #ifdef  SCRIPT_API_v3406
        //our structure will be redundant to the built-in structure, but eh. Let's not get mixed up with what's available and what's not available.
        nbAudioChannels = System.AudioChannelCount;
        int i=0;
        while (i<nbAudioChannels) {
            audioChannels[i] = System.AudioChannels[i];
            i++;
        }
        
        Global.Log(String.Format("Counted %d AudioChannels.", nbAudioChannels));
        Display("Counted %d AudioChannels.", nbAudioChannels);
    
        return;
    #endif    
    
    
    #ifndef  SCRIPT_API_v3406
    CountAudioChannels_Manually(aTestClip); //IMPORTANT: this clip's Audiotype must have a setting that allows to use an unlimited number of channels (max channel = 0)
    return;
    #endif
    
    Display("SoundManagement::CountAudioChannels_MaxChannel0 - bad SCRIPT_API_ macro");
}
*/


//same as built-in AudioClip.Play, but does additional checking to avoid bugs
static void SoundManagement::PlayClipSafe(AudioClip* a,  int priority,  int repeatStyle)
{
    //find more info on this channel
    int group=GetAudioChannelGroup_ByAudioType(a.Type);
    int ch=0;
    int firstFreeChannel=-1;
    while (ch<audioChannelsGroups[group].length && firstFreeChannel == -1) {
        int channelIndex = audioChannelsGroups[group].startIndex+ch;
        if (audioChannels[ch].PlayingClip==null)
            firstFreeChannel=ch;
            
        ch++;
    }
    
    if (firstFreeChannel < 0) {
        //all the channels were used. One of them will be overwritten if the level is equal or higher
        //warning or error?
        //TODO
    }
    
    a.Play(priority, repeatStyle); 
}

//same as PlayClipSafe but with more options; 
//predictChannel is optional. If true, the system tries to predict the channel on which the sound will play
static void SoundManagement::PlayClip(AudioClip* a,  int priority,  int repeatStyle,  bool predictChannel,  bool playAmbient)  
{
    if (predictChannel)
    {
        //TODO
        //(at equal or higher priority level) surely the next channel in the same channels group, OR the first one if all used up (therefore, first one erased)
        //Make sure not to create code redundant to the "safety" check in PlaySafe
        //
    }
    
    if (playAmbient) {
        //TODO
        //Check here that the scripter hos not already used up all the channels meant for ambient sounds' AudioType
    }
    
    SoundManagement.PlayClipSafe(a,  priority, repeatStyle);
    
}

//same as built-in AudioChannel.Stop, but does additional checking to avoid bugs
static void SoundManagement::StopChannelSafe(AudioChannel* c)  
{
    //TODO
    c.Stop();
    
}


//same as built-in AudioClip.Safe, but does additional checking to avoid bugs
static void SoundManagement::StopClipSafe(AudioClip* a)  
{
    //we don't want to stop all instances of that clip when we stop that clip. (bug revealed by snarky)
    //So we'll use the "Stop" of the channel instead of the "stop" of the clip
    //TODO : check if it still triggers the bug
    int i=0;
    while (i<nbAudioChannels)
    {
        if (audioChannels[i].PlayingClip == a) {
            SoundManagement.StopChannelSafe(audioChannels[i]);
            return;
        }
        i++;
    }
    
}


    





void repeatedly_execute_always()
{
    //Display("c1=%s, c2=%s", NameClip(c1),  NameClip(c2));
}


void InitAudioClips()
{

    AddClip(aTestClip, "aTestClip");
    
    AddClip(aMusicSpain_short, "aMusicSpain_short");
    AddClip(aMusic1, "aMusic1");
    AddClip(aMusic2, "aMusic2");
    AddClip(aMusic3, "aMusic3");
    AddClip(aMusic4, "aMusic4");
    AddClip(aMusic5, "aMusic5");
    AddClip(aMusic6, "aMusic6");
    AddClip(aSnow_tempest, "aSnow_tempest");
    AddClip(aAmbiant_cave1, "aAmbiant_cave1");
    AddClip(aAmbiant_cave2, "aAmbiant_cave2");
    AddClip(aIcecracks1, "aIcecracks1");
    AddClip(aStep1, "aStep1");
    AddClip(aStep2, "aStep2");
    AddClip(aStep3, "aStep3");
    AddClip(aWhiplash, "aWhiplash");
    AddClip(aSound1, "aSound1");
    AddClip(aSound2, "aSound2");
    AddClip(aSound3, "aSound3");
    AddClip(aSound4, "aSound4");
    AddClip(aSound5, "aSound5");
    AddClip(aSound6, "aSound6");
    AddClip(aSound7, "aSound7");
    AddClip(aTruck00, "aTruck00");
    AddClip(aMachinegun00, "aMachinegun00");
    AddClip(aCrickets00, "aCrickets00");
}





void game_start()
{

    RegisterAudioTypes();
    //CountAudioChannels_MaxChannel0(aTestClip); //IMPORTANT: this clip's Audiotype must have a setting that allows to use an unlimited number of channels (max channel = 0)
    //CountAudioChannels_MaxChannelMore(); //counts the channels allowed for AudioTypes that have Max Channels > 0
    InitAudioClips();
    CountAudioChannels_MaxChannel();

    CheckForgottenClips();
    CheckForgottenTypes();


}

   
   
   
    