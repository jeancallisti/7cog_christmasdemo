/*







          THIS MODULE IS NOT USED FOR NOW







*/


struct StateMachine_MachineType { // internal use only; data storage for the machines
  String Name; // name of the machine
  String CurrentState; // current state of the machine
  String States[eStateMachine_MaxStates]; // available states for the machine
  int StateCount; // number of used states in the machine (1 - eStateMachine_MaxStates) (all machines must have at least one state)
  String TransitionFromState[eStateMachine_MaxTransitions]; // states which a transition is defined to start from
  String TransitionInput[eStateMachine_MaxTransitions]; // input which is given to perform a transition between states
  String TransitionToState[eStateMachine_MaxTransitions]; // states to which a transtion is performed upon given input
  int TransitionCount; // number of used transitions in the machine (0 - eStateMachine_MaxTransitions)
  int CloneID; // machine which this machine was cloned from (-1 for none or if the machine was changed after cloning)
               // this is primarily used for the file functions to avoid having to rewrite and reparse the same lines if two machines are the same
};

StateMachine_MachineType StateMachine_Machines[eStateMachine_MaxMachines]; // instances of the above struct for storage
int StateMachine_Count; // number of used machines (0 - eStateMachine_MaxMachines)

function game_start() {
  int i = 0;
  while (i < eStateMachine_MaxMachines) {
    StateMachine_Machines[i].CloneID = -1; // initially, none of the machines have been cloned from each other yet..
    i++;
  }
}

static int StateMachine::GetMachineID(String name) { // get the unique ID, 0 - (eStateMachine_MaxMachines - 1), for the given machine
  if ((String.IsNullOrEmpty(name)) || (!StateMachine_Count)) return -1; // if the name is invalid or there are no machines yet..
  int i = 0;
  while (i < StateMachine_Count) {
    if (StateMachine_Machines[i].Name == name) return i; // found a matching name?
    i++;
  }
  return -1; // no matching machine name found!
}

static String StateMachine::GetMachineNameByID(int ID) { // get the name of the machine with the given unique ID
  if ((ID < 0) || (ID >= eStateMachine_MaxMachines)) return null; // there isn't one for an invalid ID!
  return StateMachine_Machines[ID].Name;
}

static int StateMachine::GetMachineCount() { // get the number of used machines
  return StateMachine_Count;
}

static bool StateMachine::ChangeMachineName(String oldName, String newName) { // change the name of a machine
  int oID = StateMachine.GetMachineID(oldName); // get the old ID
  int nID = StateMachine.GetMachineID(newName); // check to see if a machine with that name exists
  if ((oID == -1) || (nID != -1) || (String.IsNullOrEmpty(newName))) return false; // if the old machine doesn't exist, if the new machine does exist, or if the new name is invalid, abort
  StateMachine_Machines[oID].Name = newName; // change the name of the machine
  return true;
}

static int StateMachine::Create(String name, String state, int ID) { // create a new machine with the given primary state
  // ID is optional if there are less than eStateMachine_MaxMachines machines created..otherwise creation will fail without it
  if ((ID < 0) || (ID > StateMachine_Count)) ID = StateMachine_Count; // if specified ID is invalid, set it to the ID of the last used machine
  if ((ID >= eStateMachine_MaxMachines) || (StateMachine.GetMachineID(name) != -1) || // if there's no more room for new machines or a machine with the given name already exists
  (String.IsNullOrEmpty(name)) || (String.IsNullOrEmpty(state))) return -1; // or if the name or the primary state are invalid, then abort
  StateMachine_Machines[ID].CurrentState = state; // set the current and primary states
  StateMachine_Machines[ID].States[0] = state;
  int i = 1;
  while (i < eStateMachine_MaxStates) {
    StateMachine_Machines[ID].States[i] = null; // no other states yet
    i++;
  }
  StateMachine_Machines[ID].StateCount = 1; // only one state so far
  i = 0;
  while (i < eStateMachine_MaxTransitions) {
    StateMachine_Machines[ID].TransitionFromState[i] = null; // no transitions defined yet
    StateMachine_Machines[ID].TransitionInput[i] = null;
    StateMachine_Machines[ID].TransitionToState[i] = null;
    i++;
  }
  StateMachine_Machines[ID].TransitionCount = 0; // no transitions defined yet I said!! :)
  StateMachine_Machines[ID].Name = name; // set the name of the machine
  StateMachine_Machines[ID].CloneID = -1; // this isn't a cloned copy of another machine..
  if (ID == StateMachine_Count) StateMachine_Count++; // if the specified ID is that of the last used machine
  return ID; // return the ID of the newly created machine so we know it was created
}

static int StateMachine::Clone(String donorName, String cloneName) { // copy donor machine to clone machine (all states and transitions will be copied)
  // note that only donor machine is required to exist, clone machine will be overwritten or created as necessary
  int cID = StateMachine.GetMachineID(cloneName); // check to see if clone machine exists already
  int dID = StateMachine.GetMachineID(donorName); // get ID of donor machine
  if ((String.IsNullOrEmpty(cloneName)) || (dID == -1)) return -1; // if clone name is invalid or donor machine does not exist, abort
  if (cID == -1) cID = StateMachine.Create(cloneName, StateMachine_Machines[dID].States[0]); // if clone machine does not exist, try to create it
  if (cID == -1) return -1; // if clone machine could not be created, abort
  else StateMachine_Machines[cID].States[0] = StateMachine_Machines[dID].States[0]; // if the clone machine already exists, overwrite the first state
  StateMachine_Machines[cID].TransitionFromState[0] = StateMachine_Machines[dID].TransitionFromState[0]; // copy the first transition
  StateMachine_Machines[cID].TransitionInput[0] = StateMachine_Machines[dID].TransitionInput[0];
  StateMachine_Machines[cID].TransitionToState[0] = StateMachine_Machines[dID].TransitionToState[0];
  int i = 1;
  while ((i < eStateMachine_MaxStates) && (i < eStateMachine_MaxTransitions)) {
    if (i < eStateMachine_MaxStates) {
      StateMachine_Machines[cID].States[i] = StateMachine_Machines[dID].States[i]; // copy the states over
    }
    if (i < eStateMachine_MaxTransitions) {
      StateMachine_Machines[cID].TransitionFromState[i] = StateMachine_Machines[dID].TransitionFromState[i]; // copy the transitions over
      StateMachine_Machines[cID].TransitionInput[i] = StateMachine_Machines[dID].TransitionInput[i];
      StateMachine_Machines[cID].TransitionToState[i] = StateMachine_Machines[dID].TransitionToState[i];
    }
    i++;
  }
  StateMachine_Machines[cID].StateCount = StateMachine_Machines[dID].StateCount; // copy the state count
  StateMachine_Machines[cID].TransitionCount = StateMachine_Machines[dID].TransitionCount; // copy the transition count
  StateMachine_Machines[cID].CloneID = dID; // clone machine now fully copied from donor machine
  return cID; // return the clone machine's ID as verification it was copied
}

String StateMachine::GetMachineName() {
  if (!this.Valid) return null; // if this machine hasn't been loaded with data from our storage structure (above) then abort
  return StateMachine.GetMachineNameByID(this.MachineID); // otherwise return the name of this machine
}

int StateMachine::GetStateID(String state) { // find the index of a given state
  int mID = this.MachineID; // shorten this down a bit
  if ((!this.Valid) || (mID == -1) || (String.IsNullOrEmpty(state))) return -1; // if this instance hasn't loaded a machine yet or if the state is invalid, abort
  int i = 0;
  while (i < eStateMachine_MaxStates) {
    String s = StateMachine_Machines[mID].States[i]; // shorten this down a bit
    if ((s != null) && (state == s)) return i; // if we've found the correct state, return its index
    i++;
  }
  return -1; // state not found
}

String StateMachine::GetStateByID(int ID) { // find a state's name by its ID
  int mID = this.MachineID; // shorten this down
  if ((!this.Valid) || (mID == -1) || (ID < 0) || (ID >= StateMachine_Machines[mID].StateCount)) return null; // if this instance hasn't loaded a machine yet or the machine or state ID is invalid, abort
  return StateMachine_Machines[mID].States[ID]; // return the state name for this machine
}

bool StateMachine::Load(String machine, String state) { // load a machine from our structure above into this instance, optionally setting the current state
  // if eStateMachine_AutoCreate is true then machine doesn't have to exist first, otherwise it does
  int ID = StateMachine.GetMachineID(machine); // get the ID for the machine to load
  if (ID == -1) { // if the machine doesn't exist
    if (eStateMachine_AutoCreate) { // if we're automatically creating them, then create it
      ID = StateMachine.Create(machine, state); // get the new ID
      if (ID == -1) return false; // if it still doesn't exist, then abort
    }
    else return false; // if we're not automatically creating them, then abort
  }
  if (String.IsNullOrEmpty(state)) state = StateMachine_Machines[ID].CurrentState; // if the state is invalid, set it to the machine's current state (usually the default)
  this.MachineID = ID; // set the machine ID
  this.Valid = true; // the instance is now valid, with a machine loaded into it
  int sID = this.GetStateID(state); // verify the state is valid
  if (sID == -1) { // if it isn't..
    this.CurrentState = StateMachine_Machines[ID].States[0]; // set the current state to the first state of the machine
  }
  else this.CurrentState = state; // otherwise, just set the current state of this instance to the specified state
  return true;
}

bool StateMachine::AddState(String state) { // add a new state to a machine
  int mID = this.MachineID; // shorten this
  if ((!this.Valid) || (mID == -1) || (String.IsNullOrEmpty(state)) || (this.GetStateID(state) != -1) || // if this instance hasn't loaded a machine yet or the machine or state is invalid or the state already exists for the machine
  (StateMachine_Machines[mID].StateCount == eStateMachine_MaxStates)) return false; // or if the maximum number of states have already been created for this machine, abort
  int sID = StateMachine_Machines[mID].StateCount; // always add new states at the next open state slot
  StateMachine_Machines[mID].States[sID] = state; // store the new state
  StateMachine_Machines[mID].StateCount++; // increase the number of used states
  StateMachine_Machines[mID].CloneID = -1; // this machine modified; it's no longer a copy of any machine
  return true;
}

void StateMachine::RemoveState(String state) { // remove a state from a machine
  int mID = this.MachineID; // shorten this
  if (!StateMachine_Machines[mID].StateCount) return; // if there's only one state in the machine, abort
  int ID = this.GetStateID(state); // get the state's unique ID
  if ((!this.Valid) || (ID == -1) || (mID == -1)) return; // if this instance hasn't loaded a machine yet or the state or machine is invalid, abort
  int i = ID + 1; // loop through the remaining states
  while (i < eStateMachine_MaxStates) {
    StateMachine_Machines[mID].States[i - 1] = StateMachine_Machines[mID].States[i]; // shift the remaining states downward
    i++;
  }
  StateMachine_Machines[mID].States[i - 1] = null; // set the final state to empty
  StateMachine_Machines[mID].StateCount--; // update the number of used states
  StateMachine_Machines[mID].CloneID = -1; // this machine modified; it's no longer a copy of any machine
}

int StateMachine::GetTransitionID(String fromState, String input) { // get the unique ID for a transition
  // the from state and input are required because that is also used to uniquely identify a transition
  int mID = this.MachineID;
  if ((!this.Valid) || (mID == -1) || (String.IsNullOrEmpty(input)) || (this.GetStateID(fromState) == -1)) return -1; // if this instance has not yet loaded any machine or the input or from state are invalid, abort
  int i = 0;
  while (i < eStateMachine_MaxTransitions) {
    String fs = StateMachine_Machines[mID].TransitionFromState[i]; // shorten these..
    String ti = StateMachine_Machines[mID].TransitionInput[i];
    if ((fs != null) && (fromState == fs) && (ti != null) && (input == ti)) return i; // if a match is found, return it
    i++;
  }
  return -1; // no matching transition found for this machine
}

String StateMachine::GetTransitionFromStateByID(int ID) { // get the from state for the given transition
  int mID = this.MachineID;
  if ((!this.Valid) || (mID == -1) || (ID < 0) || (ID >= eStateMachine_MaxTransitions)) return null; // if this instance has not yet loaded a machine or the machine or ID is invalid, abort
  return StateMachine_Machines[mID].TransitionFromState[ID]; // return the from state
}

// this is getting redundant..the logic of the next functions is pretty much the same as the above

String StateMachine::GetTransitionInputByID(int ID) {
  int mID = this.MachineID;
  if ((!this.Valid) || (mID == -1) || (ID < 0) || (ID >= eStateMachine_MaxTransitions)) return null;
  return StateMachine_Machines[mID].TransitionInput[ID];
}

String StateMachine::GetTransitionToStateByID(int ID) {
  int mID = this.MachineID;
  if ((!this.Valid) || (mID == -1) || (ID < 0) || (ID >= eStateMachine_MaxTransitions)) return null;
  return StateMachine_Machines[mID].TransitionToState[ID];
}

bool StateMachine::AddTransition(String fromState, String input, String toState) {
  int mID = this.MachineID;
  if ((!this.Valid) || (mID == -1) || (this.GetStateID(fromState) == -1) || (String.IsNullOrEmpty(input)) ||
  (this.GetStateID(toState) == -1) || (StateMachine_Machines[mID].TransitionCount == eStateMachine_MaxTransitions)) {
    return false;
  }
  int tID = this.GetTransitionID(fromState, input);
  if (tID == -1) tID = StateMachine_Machines[mID].TransitionCount;
  StateMachine_Machines[mID].TransitionFromState[tID] = fromState;
  StateMachine_Machines[mID].TransitionInput[tID] = input;
  StateMachine_Machines[mID].TransitionToState[tID] = toState;
  if (tID == StateMachine_Machines[mID].TransitionCount) StateMachine_Machines[mID].TransitionCount++;
  StateMachine_Machines[mID].CloneID = -1;
  return true;
}

void StateMachine::RemoveTransition(String fromState, String input) {
  int mID = this.MachineID;
  int ID = this.GetTransitionID(fromState, input);
  if ((!this.Valid) || (ID == -1) || (mID == -1)) return;
  int i = ID + 1;
  while (i < eStateMachine_MaxTransitions) {
    StateMachine_Machines[mID].TransitionFromState[i - 1] = StateMachine_Machines[mID].TransitionFromState[i];
    StateMachine_Machines[mID].TransitionInput[i - 1] = StateMachine_Machines[mID].TransitionInput[i];
    StateMachine_Machines[mID].TransitionToState[i - 1] = StateMachine_Machines[mID].TransitionToState[i];
    i++;
  }
  StateMachine_Machines[mID].TransitionFromState[i] = null;
  StateMachine_Machines[mID].TransitionInput[i] = null;
  StateMachine_Machines[mID].TransitionToState[i] = null;
  StateMachine_Machines[mID].TransitionCount--;
  StateMachine_Machines[mID].CloneID = -1;
}

void StateMachine::DoTransition(String input) { // perform a transition based on given input
  int mID = this.MachineID;
  if ((!this.Valid) || (mID == -1) || (String.IsNullOrEmpty(input))) return; // if this instance has not loaded a machine or the machine or input is invalid, abort
  int i = 0;
  while (i < StateMachine_Machines[mID].TransitionCount) { // loop through the machines..
    if ((StateMachine_Machines[mID].TransitionFromState[i] == this.CurrentState) && // if the from state for this transition matches the machine's current state..
    (StateMachine_Machines[mID].TransitionInput[i] == input)) { // ..and the transition input matches the specified input..
      this.CurrentState = StateMachine_Machines[mID].TransitionToState[i]; // ..then change the machine's state to the to state for the transition
      return; // abort
    }
    i++;
  } // otherwise, do nothing!
}

static int StateMachine::LoadMachinesFromFile(String filename) { // load machines in from a file (overwriting any existing machines)
  if (!File.Exists(filename)) return 0; // if the file doesn't exist, abort
  File *f = File.Open(filename, eFileRead); // open the file for reading
  if ((f == null) || (f.Error)) return 0; // if there is any error opening the file, abort
  StateMachine sm; // temporary machine instance; we need this for creating states and transitions
  String machine; // buffer for machine names
  String state; // buffer for machine states
  String buffer[2]; // buffer for reading the file in
  int mc; // loaded machine count
  while (mc < eStateMachine_MaxMachines) { // first clear out all the machines
    int i = 0;
    while ((i < eStateMachine_MaxStates) && (i < eStateMachine_MaxTransitions)) {
      if (i < eStateMachine_MaxStates) StateMachine_Machines[mc].States[i] = null; // clear out the states
      if (i < eStateMachine_MaxTransitions) { // clear out the transitions
        StateMachine_Machines[mc].TransitionFromState[i] = null;
        StateMachine_Machines[mc].TransitionInput[i] = null;
        StateMachine_Machines[mc].TransitionToState[i] = null;
      }
      i++;
    }
    StateMachine_Machines[mc].CloneID = -1; // clear out the clone status
    StateMachine_Machines[mc].CurrentState = null; // clear out current state
    StateMachine_Machines[mc].Name = null; // clear out name
    StateMachine_Machines[mc].StateCount = 0; // no states yet
    StateMachine_Machines[mc].TransitionCount = 0; // no transitions yet
    mc++; // go to the next machine
  }
  mc = 0; // now let's see how many we're actually loading
  while ((!f.EOF) && (!f.Error)) { // until we reach the end of the file..or an error comes up
    String s = buffer[0]; // previous line
    buffer[0] = null; // clear our buffer
    if (s == null) s = buffer[1]; // if the previous line was null, go to this line
    buffer[1] = null; // clear the buffer
    if (s == null) s = f.ReadRawLineBack(); // if this line is null, read a new line in
    if (s.StartsWith("MACHINE:")) { // if the line starts a new machine
      state = "(null)"; // no state yet
      if (!f.EOF) { // if the new line wasn't the last line
        buffer[0] = f.ReadRawLineBack(); // read the next line in
        if (buffer[0].StartsWith("STATE:")) { // if the line declares a new state, let's read it in
          state = buffer[0].Substring(6, buffer[0].Length); // set the state
          buffer[0] = null; // clear our buffer
        }
      }
      machine = s.Substring(8, s.Length); // set the machine name
      int ID = StateMachine.Create(machine, state); // create the new machine
      if (ID != -1) mc++; // if the creation was a success, increase our count of created machines
    }
    else if (s.StartsWith("STATE:")) { // line defines a new state
      if ((sm.GetMachineName() == null) || ((machine != null) && (machine != sm.GetMachineName()))) sm.Load(machine); // we have to load a machine into an instance to add new states to it
      sm.AddState(s.Substring(6, s.Length)); // add the new state
    }
    else if (s.StartsWith("FROM:")) { // if the line begins a new transition
      if (!f.EOF) buffer[0] = f.ReadRawLineBack(); // try and read the next two lines back
      if (!f.EOF) buffer[1] = f.ReadRawLineBack();
      if ((buffer[0].StartsWith("INPUT:")) && (buffer[1].StartsWith("TO:"))) { // if the lines are properly formatted for defining a transition..
        if ((sm.GetMachineName() == null) || ((machine != null) && (machine != sm.GetMachineName()))) sm.Load(machine); // make sure we have the right machine loaded
        sm.AddTransition(s.Substring(5, s.Length), buffer[0].Substring(6, buffer[0].Length), buffer[1].Substring(3, buffer[1].Length)); // add the new transition
        buffer[0] = null; // clear our buffers
        buffer[1] = null;
      }
    }
    else if (s.StartsWith("CLONE:")) { // if the line states that a machine is a clone..
      if (!f.EOF) buffer[0] = f.ReadRawLineBack(); // read back the next line
      if (buffer[0].StartsWith("NEW:")) { // verify formatting
        int ID = StateMachine.Clone(s.Substring(6, s.Length), buffer[0].Substring(4, buffer[0].Length)); // attempt to clone the machine
        buffer[0] = null; // clear the buffer
        if (ID != -1) mc++; // check for success!!
      }
    }
  }
  return mc; // return the number of created machines
}

static bool StateMachine::SaveMachinesToFile(String filename) { // write all the machines, states, and transitions to a file
  if (String.IsNullOrEmpty(filename)) return false; // if the filename is invalid, abort
  File *f = File.Open(filename, eFileWrite); // open the file for writing
  if ((f == null) || (f.Error)) return false; // if the file could not be opened, abort
  int i = 0;
  while (i < StateMachine_Count) { // loop through all the machines
    if (StateMachine_Machines[i].CloneID != -1) { // if it's a clone, keep it simple!!
      f.WriteRawLine(String.Format("CLONE:%s", StateMachine_Machines[StateMachine_Machines[i].CloneID].Name)); // state that we're cloning the donor machine
      f.WriteRawLine(String.Format("NEW:%s", StateMachine_Machines[i].Name)); // then state the clone's name
    }
    else { // otherwise we have to write out everything
      f.WriteRawLine(String.Format("MACHINE:%s", StateMachine_Machines[i].Name)); // state the machine's name
      int j = 0;
      while (j < StateMachine_Machines[i].StateCount) { // loop through the states
        f.WriteRawLine(String.Format("STATE:%s", StateMachine_Machines[i].States[j])); // write out each state
        j++;
      }
      j = 0;
      while (j < StateMachine_Machines[i].TransitionCount) { // loop through the transitions
        f.WriteRawLine(String.Format("FROM:%s", StateMachine_Machines[i].TransitionFromState[j])); // write each from state, input, and to state
        f.WriteRawLine(String.Format("INPUT:%s", StateMachine_Machines[i].TransitionInput[j]));
        f.WriteRawLine(String.Format("TO:%s", StateMachine_Machines[i].TransitionToState[j]));
        j++;
      }
    }
    i++;
  }
  return true; // SUCCESS!
}
