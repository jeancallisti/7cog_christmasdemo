#ifdef __OPTION_GUI_MODULE__ //make sure module's dependencies are here

int even_id=0;
int odd_id=1;
//We need to use this terrible function because AGS will not accept "id++" as a funciton parameter in Verbs.LocalizeActionButton(eLangEN,eGA_Open, id++, id++, 'q');
//We need TWO SEPARATE functions because AGS resolves parameters right to left, so it would compute the second clal before the first call if it was the same function
int GetEvenId() { even_id+=2;  return (even_id-2); }
int GetOddId() { odd_id+=2;  return (odd_id-2); }





function set_options()
{
  /***********************************************************************
   * Setup all the template options for the Verb GUI
   ***********************************************************************/
 
  // Tell what global Guis to use
  Verbs.BindGuis(gAction, gMain, gPause, gQuit);
  
  // Tell what buttons match what verb actions
  Verbs.MapButtons(); 
  //Alternatively you can go into details : 
  /*
    Verbs.SetActionButton(eGA_Open,    verbsData.guiMain.Controls[0].AsButton);
    Verbs.SetActionButton(eGA_Close,   verbsData.guiMain.Controls[1].AsButton);
    Verbs.SetActionButton(eGA_GiveTo,  verbsData.guiMain.Controls[2].AsButton);
    Verbs.SetActionButton(eGA_PickUp,  verbsData.guiMain.Controls[3].AsButton);
    Verbs.SetActionButton(eGA_LookAt,  verbsData.guiMain.Controls[4].AsButton);
    Verbs.SetActionButton(eGA_TalkTo,  verbsData.guiMain.Controls[5].AsButton);
    Verbs.SetActionButton(eGA_Push,    verbsData.guiMain.Controls[6].AsButton);
    Verbs.SetActionButton(eGA_Pull,    verbsData.guiMain.Controls[7].AsButton);
    Verbs.SetActionButton(eGA_Use,     verbsData.guiMain.Controls[8].AsButton);
  */
  
  //Customize verbs buttons grapics and shortcuts
  //Verbs.Localize(); //Alternatively you may call Verbs.LocalizeActionButton separately for each button, to set custom graphics and shortcuts.

  //START CUSTOMIZE VERBS BUTTONS       
      // English - eLangEN     
        odd_id=1407; even_id = odd_id+1;
        Verbs.LocalizeActionButton(eLangEN,eGA_Open,    GetOddId(), GetEvenId(), 'q');
        Verbs.LocalizeActionButton(eLangEN,eGA_Close,   GetOddId(), GetEvenId(), 'a');
        Verbs.LocalizeActionButton(eLangEN,eGA_GiveTo,  GetOddId(), GetEvenId(), 'z');
        Verbs.LocalizeActionButton(eLangEN,eGA_Push,    GetOddId(), GetEvenId(), 'e');
        Verbs.LocalizeActionButton(eLangEN,eGA_Pull,    GetOddId(), GetEvenId(), 'd');
        Verbs.LocalizeActionButton(eLangEN,eGA_Use,     GetOddId(), GetEvenId(), 'c');
        Verbs.LocalizeActionButton(eLangEN,eGA_PickUp,  GetOddId(), GetEvenId(), 'w');
        Verbs.LocalizeActionButton(eLangEN,eGA_LookAt,  GetOddId(), GetEvenId(), 's');
        Verbs.LocalizeActionButton(eLangEN,eGA_TalkTo,  GetOddId(), GetEvenId(), 'x');
        
      
      // German - eLangDE        
        odd_id=1443; even_id = odd_id+1;
        Verbs.LocalizeActionButton(eLangDE,eGA_Open,    GetOddId(), GetEvenId(), 'q');
        Verbs.LocalizeActionButton(eLangDE,eGA_Close,   GetOddId(), GetEvenId(), 'a');
        Verbs.LocalizeActionButton(eLangDE,eGA_GiveTo,  GetOddId(), GetEvenId(), 'y');
        Verbs.LocalizeActionButton(eLangDE,eGA_Push,    GetOddId(), GetEvenId(), 'e');
        Verbs.LocalizeActionButton(eLangDE,eGA_Pull,    GetOddId(), GetEvenId(), 'd');
        Verbs.LocalizeActionButton(eLangDE,eGA_Use,     GetOddId(), GetEvenId(), 'c');
        Verbs.LocalizeActionButton(eLangDE,eGA_PickUp,  GetOddId(), GetEvenId(), 'w');
        Verbs.LocalizeActionButton(eLangDE,eGA_LookAt,  GetOddId(), GetEvenId(), 's');
        Verbs.LocalizeActionButton(eLangDE,eGA_TalkTo,  GetOddId(), GetEvenId(), 'x');
      
      // Spanish - eLangES
        odd_id=1461; even_id = odd_id+1;
        Verbs.LocalizeActionButton(eLangES,eGA_Open,    GetOddId(), GetEvenId(), 'q');
        Verbs.LocalizeActionButton(eLangES,eGA_Close,   GetOddId(), GetEvenId(), 'a');
        Verbs.LocalizeActionButton(eLangES,eGA_GiveTo,  GetOddId(), GetEvenId(), 'y');
        Verbs.LocalizeActionButton(eLangES,eGA_PickUp,  GetOddId(), GetEvenId(), 'w');
        Verbs.LocalizeActionButton(eLangES,eGA_Push,    GetOddId(), GetEvenId(), 'e');
        Verbs.LocalizeActionButton(eLangES,eGA_Pull,    GetOddId(), GetEvenId(), 'd');
        Verbs.LocalizeActionButton(eLangES, eGA_Use,    GetOddId(), GetEvenId(), 'c');
        Verbs.LocalizeActionButton(eLangES,eGA_LookAt,  GetOddId(), GetEvenId(), 's');
        Verbs.LocalizeActionButton(eLangES,eGA_TalkTo,  GetOddId(), GetEvenId(), 'x');

      // French - eLangFR
        odd_id=1425; even_id = odd_id+1;
        Verbs.LocalizeActionButton(eLangFR, eGA_Open,    GetOddId(), GetEvenId(), 'q');
        Verbs.LocalizeActionButton(eLangFR, eGA_Close,   GetOddId(), GetEvenId(), 'a');
        Verbs.LocalizeActionButton(eLangFR, eGA_GiveTo,  GetOddId(), GetEvenId(), 'y');
        Verbs.LocalizeActionButton(eLangFR, eGA_Push,    GetOddId(), GetEvenId(), 'e');
        Verbs.LocalizeActionButton(eLangFR, eGA_Pull,    GetOddId(), GetEvenId(), 'd');
        Verbs.LocalizeActionButton(eLangFR, eGA_Use,     GetOddId(), GetEvenId(), 'c'); 
        Verbs.LocalizeActionButton(eLangFR, eGA_PickUp,  GetOddId(), GetEvenId(), 'w');
        Verbs.LocalizeActionButton(eLangFR, eGA_LookAt,  GetOddId(), GetEvenId(), 's');
        Verbs.LocalizeActionButton(eLangFR, eGA_TalkTo,  GetOddId(), GetEvenId(), 'x');
      
      // Italian - eLangIT
        odd_id=1479; even_id = odd_id+1;
        Verbs.LocalizeActionButton(eLangIT, eGA_Open,    GetOddId(), GetEvenId(), 'q');
        Verbs.LocalizeActionButton(eLangIT, eGA_Close,   GetOddId(), GetEvenId(), 'a');
        Verbs.LocalizeActionButton(eLangIT, eGA_GiveTo,  GetOddId(), GetEvenId(), 'y');
        Verbs.LocalizeActionButton(eLangIT, eGA_Push,    GetOddId(), GetEvenId(), 'e');
        Verbs.LocalizeActionButton(eLangIT, eGA_Pull,    GetOddId(), GetEvenId(), 'd');
        Verbs.LocalizeActionButton(eLangIT, eGA_Use,     GetOddId(), GetEvenId(), 'c'); 
        Verbs.LocalizeActionButton(eLangIT, eGA_PickUp,  GetOddId(), GetEvenId(), 'w');
        Verbs.LocalizeActionButton(eLangIT, eGA_LookAt,  GetOddId(), GetEvenId(), 's');
        Verbs.LocalizeActionButton(eLangIT, eGA_TalkTo,  GetOddId(), GetEvenId(), 'x');

      // Portuguese -  eLangPT
        odd_id=1497; even_id = odd_id+1;
        Verbs.LocalizeActionButton(eLangPT, eGA_Open,    GetOddId(), GetEvenId(), 'q');
        Verbs.LocalizeActionButton(eLangPT, eGA_Close,   GetOddId(), GetEvenId(), 'a');
        Verbs.LocalizeActionButton(eLangPT, eGA_GiveTo,  GetOddId(), GetEvenId(), 'y');
        Verbs.LocalizeActionButton(eLangPT, eGA_Push,    GetOddId(), GetEvenId(), 'e');
        Verbs.LocalizeActionButton(eLangPT, eGA_Pull,    GetOddId(), GetEvenId(), 'd');
        Verbs.LocalizeActionButton(eLangPT, eGA_Use,     GetOddId(), GetEvenId(), 'c'); 
        Verbs.LocalizeActionButton(eLangPT, eGA_PickUp,  GetOddId(), GetEvenId(), 'w');
        Verbs.LocalizeActionButton(eLangPT, eGA_LookAt,  GetOddId(), GetEvenId(), 's');
        Verbs.LocalizeActionButton(eLangPT, eGA_TalkTo,  GetOddId(), GetEvenId(), 'x');

      // Dutch - eLangNL
        odd_id=1515; even_id = odd_id+1;
        Verbs.LocalizeActionButton(eLangNL, eGA_Open,    GetOddId(), GetEvenId(), 'q');
        Verbs.LocalizeActionButton(eLangNL, eGA_Close,   GetOddId(), GetEvenId(), 'a');
        Verbs.LocalizeActionButton(eLangNL, eGA_GiveTo,  GetOddId(), GetEvenId(), 'y');
        Verbs.LocalizeActionButton(eLangNL, eGA_Push,    GetOddId(), GetEvenId(), 'e');
        Verbs.LocalizeActionButton(eLangNL, eGA_Pull,    GetOddId(), GetEvenId(), 'd');
        Verbs.LocalizeActionButton(eLangNL, eGA_Use,     GetOddId(), GetEvenId(), 'c');
        Verbs.LocalizeActionButton(eLangNL, eGA_PickUp,  GetOddId(), GetEvenId(), 'w');
        Verbs.LocalizeActionButton(eLangNL, eGA_LookAt,  GetOddId(), GetEvenId(), 's');
        Verbs.LocalizeActionButton(eLangNL, eGA_TalkTo,  GetOddId(), GetEvenId(), 'x');
        
  //END CUSTOMIZE VERBS BUTTONS

  // Tell what fonts to use
  Verbs.SetFonts(eFontTumbleText, eFontTumbleTextOut, eFontTumbleSpeech, eFontTumbleOutlineSpeech);
  
  // Default template Language, currently supported languages: 
  //   eLangEN (English), eLangDE (German), eLangES (Spanish), eLangFR (French)
  //   eLangIT (Italian), eLangPT (Portuguese), eLangNL (Dutch)  
  Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangEN;
  
  // colour used in action bar
  Verbs.VerbGuiOptions[eVerbGuiActionLabelColorNormal] = 52959;
  
  // highlighted colour used in action bar
  Verbs.VerbGuiOptions[eVerbGuiActionLabelColorHighlighted] = 24188;
  
  // sprite slot of the upper inv arrow / normal
  Verbs.VerbGuiOptions[eVerbGuiInvUparrowONsprite]  = 1402;

  // sprite slot of the upper inv arrow / disabled
  Verbs.VerbGuiOptions[eVerbGuiInvUparrowOFFsprite] = 1400;
  
  // sprite slot of the upper inv arrow / highlighted
  Verbs.VerbGuiOptions[eVerbGuiInvUparrowHIsprite]  = 1404;
  
  // sprite slot of the lower inv arrow / normal
  Verbs.VerbGuiOptions[eVerbGuiInvDownarrowONsprite]  = 1403;
  
  // sprite slot of the lower inv arrow / disabled
  Verbs.VerbGuiOptions[eVerbGuiInvDownarrowOFFsprite] = 1401;
  
  // sprite slot of the lower inv arrow / highlighted
  Verbs.VerbGuiOptions[eVerbGuiInvDownarrowHIsprite]  = 1405;
  
  // offset used by WalkOffScreen and exit extensions
  Verbs.VerbGuiOptions[eVerbGuiWalkOffScreenOffset] = 30;
  
  // walk to character before starting interaction
  Verbs.VerbGuiOptions[eVerbGuiApproachCharInteract] = true;
  
  // Non playable characters are facing the player before talk-to and give-to
  Verbs.VerbGuiOptions[eVerbGuiNPCfacingPlayer] = false;
  
  // Enable Talk to Objects and Hotspots
  Verbs.VerbGuiOptions[eVerbGuiObjHotTalk] = true;
  
  // turned on: right-click on inv items is lookat, left-click is use
  // all other extensions will be ignored
  Verbs.VerbGuiOptions[eVerbGuiClassicInvHandling] = true;
  
  // action bar is fixed like in classic SCUMM games among other things
  Verbs.VerbGuiOptions[eVerbGuiClassicGui] = false;
  
  // Doubleclick on open doors changes room instantly
  Verbs.VerbGuiOptions[eVerbGuiExitDoorDoubleclick] = true;
  
  // Doubleclick on anything with an exit extension
  Verbs.VerbGuiOptions[eVerbGuiExitExtensionDoubleclick] = true;
  
  // Character speed is doubled on doubleclick
  Verbs.VerbGuiOptions[eVerbGuiRunOnDoubleClick] = true;
  
  // Distance between mouse cursor and player until running begins
  Verbs.VerbGuiOptions[eVerbGuiRunCursorDistance] = 10;
  
  // multiplied to the player movement speed, while running
  // 1 = no speedup at all, 2 = double speed and so on
  Verbs.VerbGuiOptions[eVerbGuiRunSpeedupRate] = 2; 
  

  /***********************************************************************
   * Setup unhandled event messages 
   * %s is a placeholder for the location (characters, hotspots etc.)
   ***********************************************************************/
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledUse]      = "I can't use that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledUseInv]   = "That won't do any good.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledLook]     = "Nice %s"; 
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledLookChar] = "It's %s";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPush]     = "I can't push that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPushChar] = "I can't push %s";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPull]     = "I can't pull that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPullChar] = "I can't pull %s";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledCloseDoor]  = "It has already been closed.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledCloseChar]  = "Doing that with %s is not a good idea.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledClose]    = "I can't close that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledOpenDoor] = "It is open.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledOpenChar] = "%s would not like it.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledOpen]     = "I can't open that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPickup]   = "I don't need that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPickupChar] = "I don't want to pick %s up.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledTalkTo]     = "I have nothing to say.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledTalkToChar] = "I don't want to talk to %s.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledGive]     = "I'd rather keep it.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledDefault]  = "I can't do that.";
  
  
  /***********************************************************************
   * Setup default door strings 
   ***********************************************************************/
  Doors.DoorStrings[eDoorStringLookAt]      = "The door looks solid.";
  Doors.DoorStrings[eDoorStringLocked]      = "It is locked.";
  Doors.DoorStrings[eDoorStringWrongItem]   = "I can't unlock it with that.";
  Doors.DoorStrings[eDoorStringCloseFirst]  = "I have to close it first.";
  Doors.DoorStrings[eDoorStringUnlock]      = "Now it's unlocked.";
  Doors.DoorStrings[eDoorStringRelock]      = "The door is locked again.";

  /***********************************************************************
   * Setup background graphic for save slots
   ***********************************************************************/
  CustomSave.SetGui(gSave,  gSaveConfirm);
  CustomSave.slotSprite = 1535;
  CustomSave.slotSpriteHi = 1549;
  CustomSave.font = eFontTumbleTiny;
  
  CustomLoad.SetGui(gLoad,  null); //null because this Load GUI does not have a "confirm" button
  CustomLoad.slotSprite = 1535;
  CustomLoad.slotSpriteHi = 1549;
  CustomLoad.font = eFontTumbleTiny;
  /***********************************************************************
   * Setup all the template options for the dialog GUI
   ***********************************************************************/
 
   // Activate this to hide the action GUI while a dialog is active.
  CustomDialogGui.DialogGuiOptions[eDialogGui_hide_gui_while_dialog]   = true;  
  
  // Top-Left corner of the Dialog GUI
  CustomDialogGui.DialogGuiOptions[eDialogGui_gui_xpos]         = 0;
  CustomDialogGui.DialogGuiOptions[eDialogGui_gui_ypos]         = 145;
  
  //Size of the whole Dialog GUI
  CustomDialogGui.DialogGuiOptions[eDialogGui_gui_width]       = 320;
  CustomDialogGui.DialogGuiOptions[eDialogGui_gui_height]      = 55;
  
  // xyscreeenborders define the closest distance to the screen.
  // This overrides gui_xpos and ypos.
  CustomDialogGui.DialogGuiOptions[eDialogGui_yscreenborder]      = 0;
  CustomDialogGui.DialogGuiOptions[eDialogGui_xscreenborder]      = 0;   

  // The font
  CustomDialogGui.DialogGuiOptions[eDialogGui_text_font]         = eFontTumbleText;
  CustomDialogGui.DialogGuiOptions[eDialogGui_text_alignment]    = eAlignLeft;
  CustomDialogGui.DialogGuiOptions[eDialogGui_text_color]        = 23420;
  CustomDialogGui.DialogGuiOptions[eDialogGui_text_color_active] = 24188;
  
  // optional background Image for the Text
  CustomDialogGui.DialogGuiOptions[eDialogGui_text_bg]           = 0;
  CustomDialogGui.DialogGuiOptions[eDialogGui_text_bg_xpos]      = 0;
  CustomDialogGui.DialogGuiOptions[eDialogGui_text_bg_scaling]   = 0;
  CustomDialogGui.DialogGuiOptions[eDialogGui_text_bg_transparency] = 0;
  CustomDialogGui.DialogGuiOptions[eDialogGui_text_line_space]   = 2;
  CustomDialogGui.DialogGuiOptions[eDialogGui_text_numbering]    = true; 
 
  // How many rows are to be scrolled per click
  CustomDialogGui.DialogGuiOptions[eDialogGui_scroll_rows]  = 1;
  
  // optional bullet image, 0 = off
  CustomDialogGui.DialogGuiOptions[eDialogGui_bullet]  = 0;
  
  // scrolling with mousewheel
  CustomDialogGui.DialogGuiOptions[eDialogGui_mousewheel]        = true;
  
  // Always begins the dialog with the first option available
  CustomDialogGui.DialogGuiOptions[eDialogGui_reset_scrollstate] = true;
  
  // First option on the bottom, last option on top
  CustomDialogGui.DialogGuiOptions[eDialogGui_dialog_options_upwards] = false;
   
  // Image Number and GUI-coordinates for the Up-Arrow image
  CustomDialogGui.DialogGuiOptions[eDialogGui_uparrow_img]      = 55;
  CustomDialogGui.DialogGuiOptions[eDialogGui_uparrow_img]      = 55;
  CustomDialogGui.DialogGuiOptions[eDialogGui_uparrow_hi_img]   = 57; 
  CustomDialogGui.DialogGuiOptions[eDialogGui_uparrow_xpos]     = 305; 
  CustomDialogGui.DialogGuiOptions[eDialogGui_uparrow_ypos]     = 1;
  
  //Image Number and XY-Coordinates for the Down-Arrow image
  CustomDialogGui.DialogGuiOptions[eDialogGui_downarrow_img]    = 56;
  CustomDialogGui.DialogGuiOptions[eDialogGui_downarrow_hi_img] = 58; 
  CustomDialogGui.DialogGuiOptions[eDialogGui_downarrow_xpos]   = 305;
  CustomDialogGui.DialogGuiOptions[eDialogGui_downarrow_ypos]   = 22;
  
  // Autoalign arrows so you don't need to supply XY-coordinates 
  // highly recommended in combination with autoheight and autowidth
  // 0 = off, 1 = left, 2= center, 3=right
  CustomDialogGui.DialogGuiOptions[eDialogGui_auto_arrow_align] = 3; 
  
  // Define the offset between the arrow sprite and the GUI edge. This value
  // is not affected by the borders, so you have to make sure that the offset
  // is not greater than the border size.
  CustomDialogGui.DialogGuiOptions[eDialogGui_auto_arrow_up_offset_x] = 3;
  CustomDialogGui.DialogGuiOptions[eDialogGui_auto_arrow_up_offset_y] = 3;
  CustomDialogGui.DialogGuiOptions[eDialogGui_auto_arrow_down_offset_x] = 3;
  CustomDialogGui.DialogGuiOptions[eDialogGui_auto_arrow_down_offset_y] = 3;  

  // borders - also needed for the scroll buttons
  CustomDialogGui.DialogGuiOptions[eDialogGui_border_top]      = 5;
  CustomDialogGui.DialogGuiOptions[eDialogGui_border_bottom]   = 5;
  CustomDialogGui.DialogGuiOptions[eDialogGui_border_left]     = 5;
  CustomDialogGui.DialogGuiOptions[eDialogGui_border_right]    = 20;
  CustomDialogGui.DialogGuiOptions[eDialogGui_border_visible]  = false;
  CustomDialogGui.DialogGuiOptions[eDialogGui_border_color]    = 4;
  
  // Background
  // set bg_img_transparency to -1 if you're using 32-bit graphics and
  // want to preserve the alpha channel  
  CustomDialogGui.DialogGuiOptions[eDialogGui_bg_img]                = 122;
  CustomDialogGui.DialogGuiOptions[eDialogGui_bg_img_scaling]        = 0;
  CustomDialogGui.DialogGuiOptions[eDialogGui_bg_img_transparency]   = -1;
  CustomDialogGui.DialogGuiOptions[eDialogGui_bg_color]              = 0;
  
  // optional autosize, overrides your width and height setting
  // also overrides the position of your scrolling - arrows
  CustomDialogGui.DialogGuiOptions[eDialogGui_autosize_height]      = false; 
  CustomDialogGui.DialogGuiOptions[eDialogGui_autosize_width]       = false;
  CustomDialogGui.DialogGuiOptions[eDialogGui_autosize_minheight]   = 20; 
  CustomDialogGui.DialogGuiOptions[eDialogGui_autosize_maxheight]   = 150; 
  CustomDialogGui.DialogGuiOptions[eDialogGui_autosize_minwidth]    = 60;
  CustomDialogGui.DialogGuiOptions[eDialogGui_autosize_maxwidth]    = 200; 
  
}



/***********************************************************************
 * game_start()
 * 
 ***********************************************************************/
function game_start()
{
  set_options();
  String tr_lang;
  // --- translate GUI action buttons ---
  tr_lang = GetTranslation("GUI_LANGUAGE");
  tr_lang = tr_lang.LowerCase();
  
  if (tr_lang == "de") {
    Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangDE;
  }
  else if (tr_lang =="es") {
    Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangES;
  }
  else if (tr_lang =="fr") {
    Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangFR;
  }  
  else if (tr_lang =="en") {
    Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangEN;
  }
  else if (tr_lang =="it") {
    Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangIT;
  }     
  Verbs.InitGuiLanguage();
  Verbs.AdjustGUIText();
  
  Verbs.AdjustActionBarPosition();

  Verbs.SetDefaultAction(eGA_WalkTo);    
  Verbs.HandleInvArrows();
  
}

#endif

#ifndef __OPTION_GUI_MODULE__ //a dependency is missing

    void game_start()
    {
        AbortGame("Missing module 'OptionGui'");
    }

#endif