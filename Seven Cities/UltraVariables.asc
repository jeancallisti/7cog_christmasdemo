// Main script for module 'UltraVariables'

////////////////////////////////////////////////////
//
// Common
//
////////////////////////////////////////////////////

// Ordered list search, to make finding 
// existing entries fast, plus a cache of last access
function Globals::find(String ss) {
  if (this.last!=null && ss==this.last) return this.lasti;

  this.last=ss;
  int left=0;
	int right=this.count-1;
  while (left <= right) {
		int mid = (left+right)/2;
		int cmp = ss.CompareTo(this.name[mid], true);
    if (cmp>0)
			left = mid+1;
    else if (cmp<0)
      right = mid-1;
    else {
      this.lasti=mid;
      return mid;
	  }
  }

	// No match, then insert
	int was=this.count;
	this.count++;
	if (this.count==ULTRAVARIABLES_MAX_GLOBALS) { Display("ERROR: Too many timers/named globals used when accessing named global %s. Contact the game author and tell them to increase the value of ULTRAVARIABLES_MAX_GLOBALS from %d in the UltraVariables module header", ss, this.count); QuitGame(0); }
	else {
	  int i=was;
	  while (i>left) {
	    int j=i-1;
	    this.name[i]=this.name[j];
	    this.val[i]=this.val[j];
	    this.str[i]=this.str[j];
	    i=j;
		}
		this.name[left]=ss;
		this.val[left]=0;
		this.str[left]="";
    this.lasti=left;
		return left;
	}
}

////////////////////////////////////////////////////
//
// Timers
//
////////////////////////////////////////////////////

Globals Timers;

static function TimerUltra::Get(String timer) {
  int i=Timers.find(timer); //Finds existing or inserts new
  return Timers.val[i];
}

static function TimerUltra::Set(String timer, int n, bool always) {
  int i=Timers.find(timer); //Finds existing or inserts new
  Timers.val[i]=n;
  Timers.alias[i]=always;
}

static function TimerUltra::Sets(String timer, float n, bool always) {
  TimerUltra.Set(timer, FloatToInt(n*IntToFloat(GetGameSpeed())), always);
}

static function TimerUltra::Done(String timer) {
  int i=Timers.find(timer); //Finds existing or inserts new
	return (Timers.val[i]==0);
}

static function TimerUltra::Started(String timer) {
  int i=Timers.find(timer); //Finds existing or inserts new
	return (Timers.val[i]>0);
}

static function TimerUltra::Expired(String timer) {
  int i=Timers.find(timer); //Finds existing or inserts new
	if (Timers.val[i]==0) {
	  Timers.val[i]=-1;
	  return true;
	} else return false;
}

////////////////////////////////////////////////////
//
// Global variables
//
////////////////////////////////////////////////////


Globals NG;


static function Global::Set(String name, int n) {
  
  int i=NG.find(name); //Finds existing or inserts new
  NG.val[i]=n;
	if (NG.alias[i]>0) SetGlobalInt(NG.alias[i], NG.val[i]);
}
	
static function Global::Get(String name) {
  int i=NG.find(name); //Finds existing or inserts new
  return NG.val[i];
}

static function Global::Inc(String name, int max){
  int i=NG.find(name); //Finds existing or inserts new
  if (NG.val[i]<max) NG.val[i]++;
	if (NG.alias[i]>0) SetGlobalInt(NG.alias[i], NG.val[i]);
  return NG.val[i];
}

static function Global::Dec(String name) {
  int i=NG.find(name); //Finds existing or inserts new
  NG.val[i]--;
	if (NG.alias[i]>0) SetGlobalInt(NG.alias[i], NG.val[i]);
  return NG.val[i];
}

static function Global::Add(String name, int n) {
  int i=NG.find(name); //Finds existing or inserts new
  NG.val[i]+=n;
	if (NG.alias[i]>0) SetGlobalInt(NG.alias[i], NG.val[i]);
  return NG.val[i];
}

static function Global::Sub(String name, int n) {
  int i=NG.find(name); //Finds existing or inserts new
  NG.val[i]-=n;
	if (NG.alias[i]>0) SetGlobalInt(NG.alias[i], NG.val[i]);
  return NG.val[i];
}

static function Global::Alias(String name, int globalint) {
  if (globalint==0) { Display("Sorry, cannot alias to global int 0"); return; }
  int i=NG.find(name); //Finds existing or inserts new
	NG.alias[i]=globalint;
	NG.anyalias=true;
}

static function Global::Sets(String name, String s) {
  int i=NG.find(name); //Finds existing or inserts new
  NG.str[i]=s;
}

static String Global::Gets(String name) {
  int i=NG.find(name); //Finds existing or inserts new
  return NG.str[i];
}

static String Global::Appends(String name, String s) {
  int i=NG.find(name); //Finds existing or inserts new
  NG.str[i]=NG.str[i].Append(s);
  return NG.str[i];
}


String logSeed;

static function Global::Log(String str) {


  if (logSeed == null)
  {
    //This goes to C:\ProgramData\Adventure Game Studio\Indiana Jones and the Seven Cities of Gold
    File* logFile = File.Open("Log.txt", eFileAppend);
    if (logFile == null)
    {
       Display("Could not create log file. Will not try again.");
       logSeed = "";
       return;
    }
    else
    {
      logSeed="";
      DateTime *dt = DateTime.Now;
      String dateYYMMDD=String.Format("%02d%02d%02d", dt.Year,   dt.Month, dt.DayOfMonth);
      String timeHHMMSS=String.Format("%02d%02d%02d", dt.Hour, dt.Minute, dt.Second);

      //logSeed = String.Format("Log%s_%s.txt", dateYYMMDD,  timeHHMMSS);
      logSeed = String.Format("%s_%s :", dateYYMMDD,  timeHHMMSS);
      //logSeed = dateYYMMDD.Append(timeHHMMSS.Append(".txt"));
      logFile.WriteRawLine(logSeed);
      logFile.Close();    
    }
  }
  
  if (logSeed == "")
  {
    //we had a writing failure before. We do nothing
    return;
  }
  
  //This goes to C:\ProgramData\Adventure Game Studio\Indiana Jones and the Seven Cities of Gold
  File* logFile = File.Open("Log.txt", eFileAppend);
  logFile.WriteRawLine(String.Format("     %s",str));
  logFile.Close();

}



static function Global::Dump() {
  /*
  File *dumpfile=File.Open(filename, eFileWrite);
  int i=0;
  dumpfile.WriteRawLine("** GLOBALS **");
  while (i < NG.count) {
    dumpfile.WriteRawLine(String.Format("'%s',%d,'%s'", NG.name[i], NG.val[i], NG.str[i]));
    i++;
  }
  dumpfile.WriteRawLine("** TIMERS **");
  i=0;
  while (i < Timers.count) {
    dumpfile.WriteRawLine(String.Format("'%s',%d", Timers.name[i], Timers.val[i]));
    i++;
  }
  dumpfile.Close();
  */
  int i=0;
  Global.Log("** GLOBALS **");
  while (i < NG.count) {
    Global.Log(String.Format("'%s',%d,'%s'", NG.name[i], NG.val[i], NG.str[i]));
    i++;
  }
  Global.Log("** TIMERS **");
  i=0;
  while (i < Timers.count) {
    Global.Log(String.Format("'%s',%d", Timers.name[i], Timers.val[i]));
    i++;
  }  
}



////////////////////////////////////////////////////
//
// Debug
//
////////////////////////////////////////////////////

#ifdef DEBUG
#ifdef ULTRAVARIABLES
// If GUE installed

#define ULTRAVARIABLES_AGS_GLOBALS_TO_SEE 150
 
UltraVariablesDbg Dbg;
export Dbg;

//this function clears all the values and refills the list from scratch
function RefillFromScratch() {
   
  gUltraVariables.Visible = true; //Safety
  
  //if (gUltraVariables.Visible)
  //{
    listUltraVariables.Clear();
    listUltraVariablesValues.Clear();
      
    if (Dbg.Tab==eUltraVariablesTabTimers) {

      //if (Timers.count == 0)
      //  listUltraVariablesValues.AddItem("<None>");
      //else
      //{
        int i=0;
        while (i<Timers.count) {
          listUltraVariables.AddItem(Timers.name[i]);
          listUltraVariablesValues.AddItem(String.Format("%d", Timers.val[i]));
          i++;
        }
      //}
    } else if (Dbg.Tab==eUltraVariablesTabNamed) {
      //if (NG.count == 0)
      //  listUltraVariablesValues.AddItem("<None>");
      //else
      //{
        int i=0;
        while (i<NG.count) {
          listUltraVariables.AddItem(NG.name[i]);
          if (NG.str[i] != null)
            listUltraVariablesValues.AddItem(String.Format("%d", NG.val[i]));
          else
            listUltraVariablesValues.AddItem(String.Format("%s (%d)", NG.str[i], NG.val[i]));
          i++;
        }
      //}
    } else if (Dbg.Tab==eUltraVariablesTabGlobals) {
        // Only do first 150 globals, becuase listboxes only hold that much
        int i=0;
        while (i<ULTRAVARIABLES_AGS_GLOBALS_TO_SEE) {
          listUltraVariables.AddItem(String.Format("%d",i));
          listUltraVariablesValues.AddItem(String.Format("%d", GetGlobalInt(i)));
          i++;
        }

    }
  //}
}

int lastcount;

//this function checks the current number of variables in the current tab:
// -  if it hasn't changed, then it updates all the values in the 
//    list (without adding or removing list items)
// - if it has changed, it calls RefillFromScratch
function UltraVariablesDbg::Update() {
		if (this.Tab==eUltraVariablesTabTimers) {
		  if (lastcount!=Timers.count) {
		    String sel=Timers.name[listUltraVariables.SelectedIndex];
		    RefillFromScratch();
		    listUltraVariables.SelectedIndex=Timers.find(sel);
		  }
			//labelDeNGValue.Text=String.Format("%d", Timers.val[listUltraVariables.SelectedIndex]);
			int i=0;
			while (i<Timers.count) {
			  listUltraVariablesValues.Items[i]=String.Format("%d", Timers.val[i]);
				i++;
			}
			lastcount=Timers.count;
		} else if (this.Tab==eUltraVariablesTabNamed) {
		  if (lastcount!=NG.count) {
        String sel = "";
        if (listUltraVariables.SelectedIndex != -1)
          sel=NG.name[listUltraVariables.SelectedIndex];
          
		    RefillFromScratch();
        
        if (sel.Length>0)
          listUltraVariables.SelectedIndex=NG.find(sel);
		  }
		  //labelDeNGValue.Text=String.Format("%d", NG.val[listUltraVariables.SelectedIndex]);
			int i=0;
			while (i<NG.count) {
        
        if (NG.str[i] != null)
          listUltraVariablesValues.Items[i]=String.Format("%d", NG.val[i]);
        else
          listUltraVariablesValues.Items[i]=String.Format("%s (%d)", NG.str[i], NG.val[i]);
				i++;
			}
			lastcount=NG.count;
		} else if (this.Tab==eUltraVariablesTabGlobals) {
			// Only do first 150 globals, becuase listboxes only hold that much
			int i=0;
			while (i<ULTRAVARIABLES_AGS_GLOBALS_TO_SEE) {
				listUltraVariablesValues.Items[i]=(String.Format("%d", GetGlobalInt(i)));
				i++;
			}
	  }
}

function colorTabs()
{
  int disabledColor = Game.GetColorFromRGB(140, 160, 255);
  int selectedColor = Game.GetColorFromRGB(220, 240, 255);
  
  buttonDengTimerTab.TextColor = disabledColor;
  buttonDengNamedTab.TextColor = disabledColor;
  buttonDengGlobalTab.TextColor = disabledColor;
  
  if (Dbg.Tab==eUltraVariablesTabAGSTimers)
    buttonDengTimerTab.TextColor = selectedColor;
  else if(Dbg.Tab==eUltraVariablesTabNamed)
    buttonDengNamedTab.TextColor= selectedColor;
  else //Dbg.Tab==eUltraVariablesTabGlobal
    buttonDengGlobalTab.TextColor= selectedColor;
}

function UltraVariablesDbg::SwitchToTab(UltraVariablesTab Tab)
{
  this.Tab = Tab;
  
  colorTabs();
  RefillFromScratch();
}

function UltraVariablesDbg::ShowHideVariables()
{
  gUltraVariables.Visible = !gUltraVariables.Visible;
  if (gUltraVariables.Visible)
  {
    Dbg.SwitchToTab(eUltraVariablesTabNamed);
    RefillFromScratch();
  }
  
}

function UltraVariablesDbg::ScrollUp()
{
  //listUltraVariables.ScrollUp();
  if (listUltraVariables.SelectedIndex>0)
    listUltraVariables.SelectedIndex = listUltraVariables.SelectedIndex-1;
}
function UltraVariablesDbg::ScrollDown()
{
  //listUltraVariables.ScrollDown();
  if (listUltraVariables.SelectedIndex<listUltraVariables.ItemCount-1)
    listUltraVariables.SelectedIndex = listUltraVariables.SelectedIndex+1;
}

  
  /*
int IsOnScrollButton(ListBox* lst,  int x,  int y)
{
  int buttonSize = 10;
  
  if (x>=lstConsole.X+lstConsole.Width-buttonSize
  && x<lstConsole.X+lstConsole.Width
  && y>=lstConsole.Y+lstConsole.Height-buttonSize
  && y<lstConsole.Y+lstConsole.Height)
  {
    lConsoleTip.Text="DOWN"; //DEBUG
    return eKeyDownArrow;
  }
  else if (x>=lstConsole.X+lstConsole.Width-buttonSize
  && x<lstConsole.X+lstConsole.Width
  && y>=lstConsole.Y
  && y<lstConsole.Y+buttonSize)
  {
    lConsoleTip.Text="UP"; //DEBUG
    return eKeyUpArrow;
    
  }
  lConsoleTip.Text=""; //DEBUG
}
*/

int dragx, dragy, posx, posy;
bool debounce;
int lastsel;

#endif
#endif

////////////////////////////////////////////////////
//
// Common
//
////////////////////////////////////////////////////


function repeatedly_execute_always() {
	///////////
	// Timers: moved to repeatedly_execute as they should stop when blocked?
	///////////

  //int i=0;
	//while (i<Timers.count) {
	//  if (Timers.val[i]>0 && Timers.alias[i]) Timers.val[i]--;
	//  i++;
	//}
	
	///////////
	// Globals
	///////////
	if (NG.anyalias) {
	  int g=0;
	  while (g<NG.count) {
	    if (NG.alias[g]>0) NG.val[g]=GetGlobalInt(NG.alias[g]);
	    g++;
	  }
	}
	
	///////////
	// Debug
	///////////

#ifdef DEBUG
#ifdef ULTRAVARIABLES
  if (IsKeyPressed(407) && IsKeyPressed('D')) //ALT-D
    Dbg.ShowHideVariables();
    
    
  if (gUltraVariables.Visible) {
		if (mouse.IsButtonDown(eMouseLeft)) {
      
      GUIControl* b = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
			if ( b==buttonUltraVariables && dragx<0) {
				dragx=mouse.x; dragy=mouse.y; posx=gUltraVariables.X; posy=gUltraVariables.Y; 
			}		
			if (dragx>=0) {
				int x=(mouse.x-dragx)+posx; if (x<0) x=0; if (x>system.viewport_width-1) x=system.viewport_width-1;
				int y=(mouse.y-dragy)+posy; if (y<0) y=0; if (y>system.viewport_height-1) y=system.viewport_height-1;
				gUltraVariables.X=x; gUltraVariables.Y=y;
			}
      
      if ( b==bVariableDown)
        Dbg.ScrollDown();
      else if (b==bVariableUp)
        Dbg.ScrollUp();
      /*
      int isOnScrollButton = IsOnScrollButton(listUltraVariables,  mouse.x, mouse.y);
      if( isOnScrollButton == eKeyUpArrow) 
        listUltraVariables.ScrollUp();
      else if ( isOnScrollButton == eKeyDownArrow)
        listUltraVariables.ScrollDown();
      */
		} else {
			dragx=-1;
		} //if (mouse.IsButtonDown(eMouseLeft))
    
    
		if (IsKeyPressed(407) && IsKeyPressed('C') && !debounce) { //ALT-C
			gUltraVariables.Clickable=!gUltraVariables.Clickable;
			debounce=true;
		} else if (IsKeyPressed(407) && IsKeyPressed('F') && !debounce) { //ALT-F
      Global.Dump(/*"UltraVariables.dmp"*/);
			debounce=true;
		} else 
      debounce=false;
      
      
		if (listUltraVariables.SelectedIndex!=lastsel) 
      listUltraVariablesValues.SelectedIndex=listUltraVariables.SelectedIndex;
		else 
      listUltraVariables.SelectedIndex=listUltraVariablesValues.SelectedIndex;
      
      
		lastsel=listUltraVariables.SelectedIndex;
		listUltraVariables.TopItem=listUltraVariablesValues.TopItem;
		listUltraVariablesValues.BringToFront();
		Dbg.Update();
    
	}// if (gUltraVariables.Visible)
  
#endif
#endif
}

function on_key_press(int keycode) {
  //if (keycode==';') Display("%d %d" ,dragx, debounce); //DEBUG
}

function repeatedly_execute() {
	///////////
	// Timers
	///////////
  
  int i=0;
	while (i<Timers.count) {
	  if (Timers.val[i]>0 && !Timers.alias[i]) Timers.val[i]--;
	  i++;
	}

}

// Turn off debug gui at start, even in debug mode
#ifdef ULTRAVARIABLES
function game_start() {
	gUltraVariables.Visible=false;
	gUltraVariables.Transparency=10;
}
#endif




