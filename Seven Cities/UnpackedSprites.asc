/*
#define MAX_FRAMES_PIXELS 630000 //(3 values per pixel, 10000 pixels per frame, 7 frames per loop, 3 loops)
float unpacked[]; //where we store all the pixels of the unpacked view
export unpacked;

int unpacked_last; //last cell used
int unpacked_size;


//////////////////////////////////////////////////
//
//        UNPACKING SPACE
//
//////////////////////////////////////////////////

  //File* log; //DEBUG
  
  
function resetUnpackedArray()
{
  unpacked = new float[MAX_FRAMES_PIXELS]; //size by default
  unpacked_last = 0;
  unpacked_size = MAX_FRAMES_PIXELS;
}

function deleteUnpackedArray()
{
    unpacked = null;
    unpacked_last = -1;
    unpacked_size=0;
}

function noloopcheck expandUnpackedArray(int additionalSize) {


  float temp[] = new float[unpacked_size+additionalSize];
  int i=0;
  while (i<unpacked_size)
  {
    temp[i] = unpacked[i];
    i++;
  }
  unpacked = temp;
  unpacked_size+=additionalSize;
  
}


static void UnpackedSprites::DeleteAll()
{
  deleteUnpackedArray();
}
  

//////////////////////////////////////////////////
//
//        UNPACKING PROCESSING
//
//////////////////////////////////////////////////



int howManySprites; //debug

//Returns how many cells it took to unpack it
static int UnpackedSprites::Unpack(DynamicSprite* spr,  bool flip)
{
  
  //very first time:make sure we created the dynamic array to store all that stuff
  if (unpacked==null)
  {
    resetUnpackedArray();
    

  }
  
  int color; float r, g, b;

  
  DrawingSurface* ds = spr.GetDrawingSurface(); 
  int projectedSize = ds.Height*ds.Width*3 ;
  
  //Safety: make sure there's enough room in the array:
  if (unpacked_last+projectedSize>= unpacked_size)
    expandUnpackedArray(20000);
  
  int start = unpacked_last;
  

  
  int size=0;
  
  int j=0;
  while (j<ds.Height)
  {
    int i=0;
    while (i<ds.Width)
    {
      if (!flip)
        color = ds.GetPixel(i, j);
      else  
        color = ds.GetPixel(ds.Width-i, j);
        
        
      if (color == COLOR_TRANSPARENT)
      {
          r = -1.0;
          g = -1.0;
          b = -1.0;       
      }
      else
      {
        ///////// RGB EXTRACTION /////////////
        
          if (color > 65535) color-=65536;
             
          r = IntToFloat(((color >> 11) & 31) << 3);
          g = IntToFloat(((color >> 6) & 31) << 3);
          b = IntToFloat((color & 31) << 3);
        ///////// END OF RGB EXTRACTION /////////////  
      }  
      
      unpacked[unpacked_last+size+0] = r;
      unpacked[unpacked_last+size+1] = g;
      unpacked[unpacked_last+size+2] = b;
      size+=3;
      
      i++;
    }    
    j++;
  }
  unpacked_last+=size;
  
  
  return start;
}

*/




