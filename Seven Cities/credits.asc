

// Change these to the Inside & Outside of the Title & Name label names
#define CREDIT_TITLE_IN_TEXT lCreditsTitleIn
#define CREDIT_TITLE_OUT_TEXT lCreditsTitleOut
#define CREDIT_NAME_IN_TEXT lCreditsNameIn
#define CREDIT_NAME_OUT_TEXT lCreditsNameOut

#define CREDIT_SPRITE_LOGO_GRAPHIC 763
#define CREDIT_SPRITE_LOGO_MASK 766
#define CREDIT_SPRITE_LOGO_GRADIENT 765
#define CREDIT_SPRITE_LOGO_SCROLLSTEPSPEED 0.5

bool isPaused;
int creditRed[4], creditGreen[4], creditBlue[4];
String creditTitle[20];
String creditName[20];
int currentCredit,  totalCredit,  currentCreditDuration;

// Change these values if you want to change the color of your labels for the credits (it's the only way I could do it without using Monkey's module)
function game_start() {
  creditRed[0] = 252;
  creditGreen[0] = 84;
  creditBlue[0] = 252;
  
  creditRed[1] = 84;
  creditGreen[1] = 252;
  creditBlue[1] = 252;
  
  isPaused = false;
}

enum creditPhaseEnum{
  eNotStarted, 
  eStarting, 
  eFadeIn, 
  eNormal, 
  eFadeOut, 
  eFinished
};

// ====================================================================================================================================
// ------------------------------------------------------------------------------------------------------------------------------------
// ====================================================================================================================================

bool creditRunning, creditJustStarted, creditFading;
int creditTitleRedT, creditTitleGreenT, creditTitleBlueT, creditNameRedT, creditNameGreenT, creditNameBlueT;
creditPhaseEnum creditPhase;


bool WaitNoBlocking(int frame){
  if(currentCreditDuration < frame){
    currentCreditDuration++;
    return true;
  }  
  currentCreditDuration = 0;
  return false;
}

bool IntroCredits_IsCreditFading() {
  return creditFading;
}

bool IntroCredits_IsRunning() {
  return creditRunning;
}

void IntroCredits_Fade(Direction direction, Label* creditInsideText, int color) {
  int step = 1;
  if (direction == eBackwards) 
    step = -1;
  
  creditRed[color] += FloatToInt(IntToFloat(creditRed[color-2]) * 0.03, eRoundUp) * step;
  if (creditRed[color] < 0) creditRed[color] = 0;
  if (direction == eForwards) {
    if (creditRed[color] > creditRed[color - 2]) 
      creditRed[color] = creditRed[color - 2];
    else if (creditRed[color] > 254) creditRed[color] = 254;
  }
  
  creditGreen[color] += FloatToInt(IntToFloat(creditGreen[color-2]) * 0.03, eRoundUp) * step;
  if (creditGreen[color] < 0) creditGreen[color] = 0;
  if (direction == eForwards) {
    if (creditGreen[color] > creditGreen[color - 2]) 
      creditGreen[color] = creditGreen[color - 2];
    else if (creditGreen[color] > 254) creditGreen[color] = 254;
  }
  
  creditBlue[color] += FloatToInt(IntToFloat(creditBlue[color-2]) * 0.03, eRoundUp) * step;
  if (creditBlue[color] < 0) creditBlue[color] = 0;
  if (direction == eForwards) {
    if (creditBlue[color] > creditBlue[color - 2]) 
      creditBlue[color] = creditBlue[color - 2];
    else if (creditBlue[color] > 254) 
      creditBlue[color] = 254;
  }
  
  creditFading = true;
  
  bool hasFadedOut = (direction == eBackwards && creditRed[color] == 0 && creditGreen[color] == 0 && creditBlue[color] == 0);
  bool hasFadedIn = (direction == eForwards && creditRed[color] == creditRed[color - 2] && creditGreen[color] == creditGreen[color - 2] && creditBlue[color] == creditBlue[color - 2]);
  if (hasFadedOut || hasFadedIn) 
    creditFading = false;
  
  if (creditRed[color] > 255 || creditGreen[color] > 255 || creditBlue[color] > 255)
    Display("%d %d %d",creditRed[color], creditGreen[color], creditBlue[color]);
  
  creditInsideText.TextColor = Game.GetColorFromRGB(creditRed[color], creditGreen[color], creditBlue[color]);
}

void IntroCredits_InitializeCredits() {
  gCredits.Visible = true;
  creditJustStarted = true;
  creditRunning = true;
  currentCredit = 0;
  totalCredit = 0;  
  creditPhase = eNotStarted;
  
  CREDIT_TITLE_IN_TEXT.Visible = false;
  CREDIT_TITLE_OUT_TEXT.Visible = false;
  CREDIT_NAME_IN_TEXT.Visible = false;
  CREDIT_NAME_OUT_TEXT.Visible = false;
}

void IntroCredits_Stop() {
  creditRunning = false;
  gCredits.Visible = false;
}

void IntroCredits_AddCreditWithTitle(String title, String name) {
  creditTitle[totalCredit] = title;
  creditName[totalCredit] = name;
  totalCredit++;
}

void IntroCredits_AddCredit(String name) {
  creditTitle[totalCredit] = "";
  creditName[totalCredit] = name;
  totalCredit++;
}

void IntroCredits_Draw(){
  
  //vérification si on a toujours des crédits à afficher
  if(currentCredit == totalCredit){
    //on stop l'affichage des crédits
    IntroCredits_Stop();
    return;
  }
  
  //Récupération du crédit à afficher
  String name = creditName[currentCredit];
  String title = creditTitle[currentCredit];
  
  bool hasTitle = !String.IsNullOrEmpty(title);
  
  bool hasNextTitle = false;
  if(currentCredit + 1 < totalCredit) {
    hasNextTitle = !String.IsNullOrEmpty(creditTitle[currentCredit + 1]);
  }
  
  //On lance l'affichage des crédits en fonction de son status  
  switch(creditPhase)
  {
    //---------------------------------
    // on lance le credit
    //---------------------------------
    case eNotStarted: 
      
      //on initialize le fade      
      if(hasTitle) {
        CREDIT_TITLE_IN_TEXT.Visible = false;
        CREDIT_TITLE_OUT_TEXT.Visible = false;
        CREDIT_TITLE_IN_TEXT.Text = title;
        CREDIT_TITLE_OUT_TEXT.Text = title;
      }
      
      CREDIT_NAME_IN_TEXT.Visible = false;
      CREDIT_NAME_OUT_TEXT.Visible = false;
      CREDIT_NAME_IN_TEXT.Text = name;
      CREDIT_NAME_OUT_TEXT.Text = name;
      
      creditJustStarted = false;
      
      //on passe à la phase suivante
      creditPhase = eStarting;
      break;
    
    //---------------------------------
    // on lance le fade
    //---------------------------------
    case eStarting: 
    
      creditFading = true;            
      creditPhase = eFadeIn;
      
      break;
    
    //---------------------------------
    // on effectue le fade in
    //---------------------------------
    case eFadeIn: 
            
      if(hasTitle){
        IntroCredits_Fade(eForwards, CREDIT_TITLE_IN_TEXT, 2); 
        CREDIT_TITLE_IN_TEXT.Visible = true;
        CREDIT_TITLE_OUT_TEXT.Visible = true;
      }
      
      IntroCredits_Fade(eForwards, CREDIT_NAME_IN_TEXT, 3);
      CREDIT_NAME_IN_TEXT.Visible = true;
      CREDIT_NAME_OUT_TEXT.Visible = true; 

      // tant que le fading n'est pas terminé, on continue
      if(creditFading)
        break;
        
      //puis on passe à la phase suivante
      creditPhase = eNormal;
      
      break;
    
    //---------------------------------
    // on lance le mode normal
    //---------------------------------
    case eNormal: 
    
      // on boucle pour garder le crédit affiché    
      if(WaitNoBlocking(20))
        break;
    
      //on lance la phase suivante
      creditPhase = eFadeOut;
      creditFading = true;
      
      break;

    //---------------------------------
    // on effectue le fadeOut
    //---------------------------------
    case eFadeOut: 
          
      if((hasTitle && hasNextTitle) || (!hasTitle && hasNextTitle) || (currentCredit+1 == totalCredit)) 
        IntroCredits_Fade(eBackwards, CREDIT_TITLE_IN_TEXT, 2);          
      IntroCredits_Fade(eBackwards, CREDIT_NAME_IN_TEXT, 3);
      
      if (creditFading) 
        break;
      
      //fade terminé, on fait disparaitre les crédits      
      if((hasTitle && hasNextTitle) || (!hasTitle && hasNextTitle) || (currentCredit+1 == totalCredit)) {
        CREDIT_TITLE_IN_TEXT.Visible = false;
        CREDIT_TITLE_OUT_TEXT.Visible = false;
      }
      
      CREDIT_NAME_IN_TEXT.Visible = false;
      CREDIT_NAME_OUT_TEXT.Visible = false;
      
      //puis on passe à la phase suivante
      creditPhase = eFinished;
      
      break;
      
    //---------------------------------
    // on passe au crédit suivant
    //---------------------------------
    case eFinished: 
    
      //on attends avant de passer au crédit suivant
      if (!creditRunning) 
        gCredits.Visible = false;
      else if(WaitNoBlocking(20))
        break;        
            
    
      currentCredit++;
      creditPhase = eNotStarted;
      
      
      
      
      //vérification si on a toujours des crédits à afficher
      if(currentCredit == totalCredit){
        //on stop l'affichage des crédits
        IntroCredits_Stop();
        return;
      }
      
      break;
  }  
}

// ===========================================================================================================
// ==   Mask Gradient and Title Zoom  ========================================================================
// ===========================================================================================================


DynamicSprite* spriteMaskScroll;
Button *buttonMaskScroll;
int bms_graphic, bms_mask, bms_gradient;
float bms_scrollY;
float bms_scrollStepSpeed;
bool bms_enabled;

int x, y, graphic;
float f,  speed;
DynamicSprite* title;
Button *control;

enum titleCreditPhaseEnum {
  eZoomNotStarted, 
  eZoomIn, 
  eZoomScrolling, 
  eZoomFinished
};

titleCreditPhaseEnum titleCreditPhase;


void IntroCredits_RunButtonMaskScroll() {
  if (buttonMaskScroll != null) {
    
    if (buttonMaskScroll.Visible && buttonMaskScroll.OwningGUI.Visible) {
    
      if (spriteMaskScroll == null) {
        spriteMaskScroll = DynamicSprite.Create(Game.SpriteWidth[bms_gradient], Game.SpriteHeight[bms_gradient]);
      }
      
      DrawingSurface *surface = spriteMaskScroll.GetDrawingSurface();
      surface.Clear();
      surface.DrawImage(0, FloatToInt(bms_scrollY), bms_gradient);
      surface.DrawImage(0, FloatToInt(bms_scrollY) + Game.SpriteHeight[bms_gradient], bms_gradient);
      surface.Release();
      
      spriteMaskScroll.CopyTransparencyMask(bms_mask);
      
      buttonMaskScroll.NormalGraphic = spriteMaskScroll.Graphic;
      
      bms_scrollY -= bms_scrollStepSpeed;
      if (FloatToInt(bms_scrollY) < -Game.SpriteHeight[bms_gradient]) bms_scrollY = 0.0;
    } else {
      spriteMaskScroll = null;
      buttonMaskScroll.NormalGraphic = 0;
    }
  }
}

void IntroCredits_RunGameLogo(){
    
  switch(titleCreditPhase)
  {
    //-----------------------------
    // on initialise le zoom
    //-----------------------------
    case eZoomNotStarted: 
      gIndianaTitle.Visible = true;
      
      control = bIndianaTitle;
      graphic = CREDIT_SPRITE_LOGO_GRAPHIC;
      
      x = control.X;
      y = control.Y;
      
      //on set le zoom
      if (Game.SpriteWidth[graphic] < Game.SpriteHeight[graphic]) 
        f = 1.0 / IntToFloat(Game.SpriteWidth[graphic]);
      else 
        f = 1.0 / IntToFloat(Game.SpriteHeight[graphic]);
      
      //on passe à la phase suivante
      titleCreditPhase = eZoomIn;
      break;
      
    //-----------------------------
    // on effectue le zoom
    //-----------------------------
    case eZoomIn: 
      
      if (f < 1.0) {
        title = DynamicSprite.CreateFromExistingSprite(graphic);
        title.Resize(FloatToInt(IntToFloat(Game.SpriteWidth[graphic]) * f), FloatToInt(IntToFloat(Game.SpriteHeight[graphic]) * f));
        control.NormalGraphic = title.Graphic;
        
        control.X = x + (Game.SpriteWidth[graphic] - title.Width) / 2;
        control.Y = y + (Game.SpriteHeight[graphic] - title.Height) / 2;
        
        f += 0.02;
        
        break;
      }
      
      //on fixe le control une fois le zoom terminé
      control.NormalGraphic = graphic;
      control.X = x;
      control.Y = y;
      title = null;
      
      //on passe au scroll
      titleCreditPhase = eZoomScrolling;
      
      //on init le scroll
      buttonMaskScroll = bIJTitleGradient;
      bms_graphic = CREDIT_SPRITE_LOGO_GRAPHIC;
      bms_mask = CREDIT_SPRITE_LOGO_MASK;
      bms_gradient = CREDIT_SPRITE_LOGO_GRADIENT;
      bms_scrollStepSpeed = CREDIT_SPRITE_LOGO_SCROLLSTEPSPEED;
      
      break;
    
    //-----------------------------
    // le zoom est en mode scroll
    //-----------------------------
    case eZoomScrolling: 
      
      IntroCredits_RunButtonMaskScroll();
      
      //après un laps de temps
      if(WaitNoBlocking(20))
        break;
      
      //on affiche le sous titre 
      gFOATitle.Visible = true;
      
      //on a fait assez de scroll, on le termine
      titleCreditPhase = eZoomFinished;
      break;
    
    //-----------------------------
    // on termine le zoom
    //-----------------------------
    case eZoomFinished: 
    
      IntroCredits_RunButtonMaskScroll();
      
      break;
  }
  
}

void IntroCredits_StartGameLogo(){
    
  titleCreditPhase = eZoomNotStarted;
  bms_enabled = true;
}

void IntroCredits_StopGameLogo(){
  bms_enabled = false;
  gIndianaTitle.Visible = false;
  gFOATitle.Visible = false;
}

function on_event(EventType event, int data) 
{
  // Called whenever certain game events happen. 
  // The value of DATA depends on which event has occurred. 
  // This allows you to perform checks or update things every time 
  // the player does something, regardless of which room it is in. 
  // The possible values of event are:

  switch(event){
    // called just before room Player Enters Room event is run.
    // DATA = new room number
    case eEventEnterRoomBeforeFadein:
      isPaused = false;
      break;
      
    // called just after room Player Leaves Room event is run.
    // DATA = room number they are leaving
    case eEventLeaveRoom:
      isPaused = true;
      break;
    
    // called whenever the player's score changes
    // DATA = number of points they got
    case eEventGotScore:
    
    // called when a mouse button is pressed down over a GUI
    // DATA = GUI number
    case eEventGUIMouseDown:
    
    // called when a mouse button is released over a GUI
    // DATA = GUI number
    case eEventGUIMouseUp:
    
    // the player just got a new inventory item
    // DATA = inventory item number that was added
    case eEventAddInventory:
    
    // the player just lost an inventory item
    // DATA = inventory item number that was lost
    case eEventLoseInventory:
    
    // tells your game that it has just been restored from a save game
    // DATA = save slot number
    case eEventRestoreGame:
      break;
  }  
}

function repeatedly_execute() {
    
  // on skip le dessinage des logo et des credits
  if(isPaused)
    return;
    
  // dessinage du logo
  if (bms_enabled) 
    IntroCredits_RunGameLogo();
    
  // dessinage des crédits
  if(creditRunning)
    IntroCredits_Draw();
    
}