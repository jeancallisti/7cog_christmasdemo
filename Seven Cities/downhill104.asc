// Main script for module 'Downhill'

#define AGS_MAX_CHARACTERS 100 //[added by monsieur ouxx for version 1.04] legacy from AGS 2.x. Change to any preferred value.
#define AGS_MAX_FRAMES_PER_LOOP 50  //[added by monsieur ouxx for version 1.04] legacy from AGS 2.x. Change to any preferred value.


bool enabled;
//int wa=-1;
int waon[AGS_MAX_CHARACTERS];


int zorderwa[DOWNHILL_MAX_AREAS];
int zorderwb[DOWNHILL_MAX_AREAS];
int zordertop[DOWNHILL_MAX_AREAS];

bool wa[DOWNHILL_MAX_AREAS];
int maxyy[DOWNHILL_MAX_AREAS];
int diffy[DOWNHILL_MAX_AREAS];
int minsc[DOWNHILL_MAX_AREAS];
int diffsc[DOWNHILL_MAX_AREAS];
int maxwb;

struct flipsprites {
	int ups[AGS_MAX_FRAMES_PER_LOOP];
	int downs[AGS_MAX_FRAMES_PER_LOOP];
};

flipsprites flipsprite[AGS_MAX_CHARACTERS];

static function DownHill::MakeDownhill(int walkable, int miny, int maxy, int mins, int maxs) {
   enabled=true;
   wa[walkable]=true;
   // precalculate ratios here, and ensure min/max correct
   if (miny<maxy) {
     maxyy[walkable]=maxy;
     diffy[walkable]=maxy-miny;
   } else {
     maxyy[walkable]=miny;
     diffy[walkable]=miny-maxy;
   }
   if (mins<maxs) {
     minsc[walkable]=mins;
     diffsc[walkable]=maxs-mins;
   } else {
     minsc[walkable]=maxs;
     diffsc[walkable]=mins-maxs;
   }

}
//export IsDownhill;  //[commented out by monsieur ouxx for version 1.04] Turned the function into a static member of the "DownHill" struct.



static function DownHill::SetWalkBehindZ(int walkbehind, int z, int top) {
  enabled=true;
  if (walkbehind>maxwb) maxwb=walkbehind;
  zorderwb[walkbehind]=z;
  zordertop[walkbehind]=top;
  SetWalkBehindBase(walkbehind, top);
}

static function DownHill::SetWalkableZ(int walkable, int z) {
  enabled=true;
  zorderwa[walkable]=z;
}

//export SetWalkBehindZ,  SetWalkableZ;   //[commented out by monsieur ouxx for version 1.04] Turned the function into a static member of the "DownHill" struct.

function get_updown (Character *who) {
  if (Game.GetLoopCountForView(who.View)<4) return;
  int i=0;
  int frames=Game.GetFrameCountForLoop(who.View, 0);
  int uframes=Game.GetFrameCountForLoop(who.View, 3);
  while (i<frames) {
    // loop 0 down, loop 3 up
		ViewFrame *down=Game.GetViewFrame(who.View, 0, i);
		flipsprite[who.ID].downs[i]=down.Graphic;
		if (i<uframes) {
			ViewFrame *up=Game.GetViewFrame(who.View, 3, i);
			flipsprite[who.ID].ups[i]=up.Graphic;
		}
		i++;
  }
}

function on_event(EventType event, int data) {
  // Reset on leave room
  if (event==eEventEnterRoomBeforeFadein) {
    int i=0;
	  while (i<Game.CharacterCount) {
	    get_updown(character[i]);
	    i++;
	  }
	} else if (event==eEventLeaveRoom) {
	  enabled=false;
	  maxwb=0;
	  // restore scaling for all characters
	  int i=0;
	  while (i<Game.CharacterCount) {
	    if (character[i].Room==player.Room) {
				character[i].ManualScaling=false;
				character[i].Baseline=0;
			}
	    i++;
	  }
	}
}


function flip_me(Character *who, bool normal) {
  // only works if up and down have same number of frames
  if (Game.GetLoopCountForView(who.View)<4) return;
  int i=0;
  int frames=Game.GetFrameCountForLoop(who.View, 0);
  while (i<frames) {
    // loop 0 down, loop 3 up
		ViewFrame *down=Game.GetViewFrame(who.View, 0, i);
		ViewFrame *up=Game.GetViewFrame(who.View, 3, i);
		
		if (normal) {
		  down.Graphic=flipsprite[who.ID].downs[i];
		  up.Graphic=flipsprite[who.ID].ups[i];
		} else {
		  down.Graphic=flipsprite[who.ID].ups[i];
		  up.Graphic=flipsprite[who.ID].downs[i];
		}
    i++;
	}
}

function rep_ex_char (Character *who) {
  if (who.Room!=player.Room || !who.on) return;
  int now=GetWalkableAreaAt(who.x-GetViewportX(), who.y-GetViewportY());
  // Being on no walkable messes things up, and can happen briefly...
  if (now==0) return;
  
  // Walkbehinds
  int nowz=zorderwa[now];
  if (nowz>0) {
    int miny=who.y;
    int i=1;
    while (i<=maxwb) {
      if (nowz<zorderwb[i] && miny>zordertop[i]) {
        miny=zordertop[i];
			}
			i++;
		}
    who.Baseline=miny-1;
  } else {
    who.Baseline=0;
  }


  // Scaling
	if (wa[now] && diffy[now]>0) {
    who.ManualScaling=true;
    who.Scaling=minsc[now]+(((maxyy[now]-who.y)*diffsc[now])/diffy[now]);
	  
	} else {
    who.ManualScaling=true;
    who.Scaling=GetScalingAt(who.x, who.y);
	}

  // Flipping
  if (wa[now]) {
    
    if (waon[who.ID]!=now && !wa[waon[who.ID]]) {
      flip_me(who, false);
    }
  } else {
    if (wa[waon[who.ID]] && waon[who.ID]!=now) {
      flip_me(who, true);
		}
	}
	
	// Update record of last walkable area
  waon[who.ID]=now;
}  

function repeatedly_execute_always() {
  if (enabled) {
    int i=0;
    while (i<Game.CharacterCount) {
      rep_ex_char(character[i]);
      i++;
		}
  }
}

function game_start() {
  //System.VSync=1;
}
