// room script file
/*
AudioChannel* ambientCave1_windy;
AudioChannel* ambientCave2_waterdrops;
AudioChannel* ambientTempest;
*/

//reference maximum volumes for the ambient sounds (0 to 100)
/*

int MAX_VOLUME_TEMPEST = 5;
int MIN_VOLUME_TEMPEST = 0;
int MAX_VOLUME_WINDYCAVE = 50;
int MIN_VOLUME_WINDYCAVE = 25;
int MAX_VOLUME_WATERCAVE = 50;
int MIN_VOLUME_WATERCAVE = 25;
*/

int MIN_VOLUME_TEMPEST = 0;
int MAX_VOLUME_TEMPEST = 10;

int MIN_VOLUME_WINDYCAVE = 0;
int MAX_VOLUME_WINDYCAVE = 10;

int MIN_VOLUME_WATERCAVE = 0;
int MAX_VOLUME_WATERCAVE = 10;


//snow particle system
SnowRainPS_Data ps;


bool mirrorsCreated;
bool game_start_flag;
bool iciclesCreated;

int mirrorMasksFirstSpriteId=1056; //the id of the first of the 12 sprites used for mirror masks. see initMirrorsMasks
int NB_MIRRORS = 3;
enum mirrors
{
   mirror_up       = 0, 
   mirror_left     = 1, 
   mirror_right    = 2
};

int NB_SHAPES = 4;
enum masks
{
    mask_piperight   = 0, 
    mask_pipeleft    = 1, 
    mask_triangle    = 2, 
    mask_square      = 3
};

int mirrorsMasksSprites[];
int mirrorsMasksFirstSpriteIds[];
Object* maskObjects[];



void LocalizeAmbientSounds()
{
     int TRANSITION1_TOP = 35;
     int TRANSITION1_BOTTOM = 55;
     int TRANSITION2_TOP = 80;
     int TRANSITION2_BOTTOM = 115;
     
     if (player.y < TRANSITION1_TOP)
     {
         //aSnow_tempest.SetAmbientVolume(MAX_VOLUME_TEMPEST);
         aAmbiant_cave1.SetAmbientVolume(MIN_VOLUME_WINDYCAVE);
         aAmbiant_cave2.SetAmbientVolume(MIN_VOLUME_WATERCAVE);
     }
     else if (player.y >= TRANSITION1_TOP && player.y < TRANSITION1_BOTTOM)
     {
         //aSnow_tempest.SetAmbientVolume(0);
         aAmbiant_cave1.SetAmbientVolume(0);
         aAmbiant_cave2.SetAmbientVolume(0);  
     }
     else if (player.y >= TRANSITION1_BOTTOM && player.y < TRANSITION2_TOP)
     {
         //aSnow_tempest.SetAmbientVolume(MIN_VOLUME_TEMPEST);
         aAmbiant_cave1.SetAmbientVolume(MAX_VOLUME_WINDYCAVE);
         aAmbiant_cave2.SetAmbientVolume(MIN_VOLUME_WATERCAVE);
     }
     else if (player.y >= TRANSITION2_TOP && player.y <TRANSITION2_BOTTOM)
     {
         //aSnow_tempest.SetAmbientVolume(0);
         aAmbiant_cave1.SetAmbientVolume(0);
         aAmbiant_cave2.SetAmbientVolume(0);    
     }
     else if (player.y >=TRANSITION2_BOTTOM)
     {
         //aSnow_tempest.SetAmbientVolume(MIN_VOLUME_TEMPEST);
         aAmbiant_cave1.SetAmbientVolume(MIN_VOLUME_WINDYCAVE);
         aAmbiant_cave2.SetAmbientVolume(MAX_VOLUME_WATERCAVE); 
     }


    //aSnow_tempest.DisplaySlot();
    //aAmbiant_cave1.DisplaySlot();
    //aAmbiant_cave2.DisplaySlot();
}
  
function initParticles() {
    
  int VERTICAL_SPEED = 1;
  int HORIZONTAL_SPEED = 1;    

  int box_top = 1; //watch out, 0 doesn't work (see module's code)
  int box_bottom=15;
  int box_left=155;
  int box_right=175;
    
    
  int snowflake_sprite = 412;
  ps.InitParticleSystem(SNOW,    snowflake_sprite,  1,   NO_WIND,   70, 35);
  ps.ParticleSystemAddRect(box_left, box_top, box_right, box_bottom);
  ps.ParticleSystemEnableRegion(1, 50);
  ps.SetParticleSystemIncrements(HORIZONTAL_SPEED, VERTICAL_SPEED);
  ps.enableTransParency = true;
  //ps.collisionDetect = true;
  
  ps.SetRenderRegion(box_top, box_left, box_bottom, box_right);

}


/*

function initWeatherModule() 
{
  #define TIBET_NBPARTICLESPRITES 1
    int snowflake_sprite[TIBET_NBPARTICLESPRITES];

    //sprites with alpha
    //snowflake_sprite[0] = 408;
    //snowflake_sprite[1] = 409;
    //snowflake_sprite[2] = 410;

    //sprites without alpha
    snowflake_sprite[0] = 412;
    //snowflake_sprite[1] = 411;
    //snowflake_sprite[2] = 412; 
    
     
    int nbSnowflakes = 2; //multiply by TIBET_NBPARTICLESPRITES to get the final number
    
    if (WeatherModule.IsWeatherGoing()) 
      WeatherModule.Stop();
      
    WeatherModule.Init(nbSnowflakes*TIBET_NBPARTICLESPRITES,  10, 10,  true);
    //Display ("Weathermachine says: More Snow");  
    
    int i=0;
    while (i<nbSnowflakes)
    {
      
      WeatherModule.SetSprite(i*TIBET_NBPARTICLESPRITES+0, snowflake_sprite[0]);
      //WeatherModule.SetSprite(i*TIBET_NBPARTICLESPRITES+1, snowflake_sprite[1]);
      //WeatherModule.SetSprite(i*TIBET_NBPARTICLESPRITES+2, snowflake_sprite[2]); 
      
      i++; 
    }
       
    int VERTICAL_SPEED = 1;
    int HORIZONTAL_SPEED = 0;    
    
    int box_top = 0;
    int box_bottom=15;
    int box_left=155;
    int box_right=175;
    
    WeatherModule.SetSlowDown(2);
    WeatherModule.Start(VERTICAL_SPEED,   HORIZONTAL_SPEED, false,    1, 0, box_left, box_right, box_top, box_bottom);  
}
*/



void initMirrorsMasks()
{
    //we assume that all the sprite ids are contiguous in the sprites table (1056 to 1056+12)
    int i=0;
    while (i<NB_MIRRORS*NB_SHAPES)
    {
        mirrorsMasksSprites[i] = mirrorMasksFirstSpriteId+i;
        i++;
    }
    
    //we assume the sprites are sorted as follow: left (4 sprites), rght (4 sprites), up (4 sprites)
    mirrorsMasksFirstSpriteIds[mirror_left] = mirrorMasksFirstSpriteId;
    mirrorsMasksFirstSpriteIds[mirror_right] = mirrorMasksFirstSpriteId + NB_SHAPES;
    mirrorsMasksFirstSpriteIds[mirror_up] = mirrorMasksFirstSpriteId + NB_SHAPES*2;
    
    
    
}


  

void generatePuzzles()
{
    if (!DialogsLogic.GetVarBool("eDialog_TibetPuzzleIsSet"))
    {
        int i=0;
        while (i< NB_MIRRORS) {
            int shape = Random(NB_SHAPES-1);
            DialogsLogic.SetVarInt(String.Format("eDialog_TibetPuzzleShape%d",i),  shape);
            AGSConsole.LogConsole(String.Format("Puzzle for mirror %d is %d staored in variable %s",i, shape, String.Format("eDialog_TibetPuzzleShape%d",i) )); //DEBUG
            i++;
        }
        
        DialogsLogic.SetVarBool("eDialog_TibetPuzzleIsSet", true);
        
    }
    
}

void setMasksSprites()
{
    int i=0;
    while (i< NB_MIRRORS) {
        int shape = DialogsLogic.GetVarInt(String.Format("eDialog_TibetPuzzleShape%d",i));
        maskObjects[i].Graphic = mirrorsMasksFirstSpriteIds[i] + shape;
        AGSConsole.LogConsole(String.Format("Graphic for mirror %d is %d+%d=%d",i, mirrorsMasksFirstSpriteIds[i], shape, maskObjects[i].Graphic)); //DEBUG
        i++;
    } 
}

//WATCH OUT: this function is called manually by room_Load
void game_start_func()
{
    mirrorsMasksSprites = new int[NB_MIRRORS*NB_SHAPES]; //we assume that all the sprite ids are contiguous in the sprites table (1056 to 1056+12)
    mirrorsMasksFirstSpriteIds = new int[NB_MIRRORS];
    maskObjects = new Object[NB_MIRRORS];
    
    //to be able to manipulate the objects as an array
    maskObjects[0] = oMirror0;
    maskObjects[1] = oMirror1;
    maskObjects[2] = oMirror2;
    
    initMirrorsMasks();
    generatePuzzles();
    setMasksSprites();
}

function room_Load()
{
    if (!game_start_flag)
    {
        game_start_func();
        game_start_flag = true;
    }
    
    


    Mouse.Mode = eModeWalkto;
    PlayerUI.DisableAndHide();
    FloatingHotspot.Enable();

    
    
    
    
    /////////// MIRRORS ///////////////////
    
    
    /*
    //for debug only
    oMirror0.Transparency = 20; //DEBUG
    oMirror1.Transparency = 20; //DEBUG
    oMirror2.Transparency = 20; //DEBUG
    */
    
    //do this for each room that has mirrors
    if (!mirrorsCreated) {



        Mirrors2.NewMirror(oMirror0,  oCenter0, region[2], eSymmetryVertic, 1.0, 20.0,  4, 7);
        Mirrors2.NewMirror(oMirror1,  oCenter1, region[7], eSymmetryVertic, 1.0, 30.0, 0, 10);
        Mirrors2.NewMirror(oMirror2,  oCenter2, region[6], eSymmetryVertic, 1.0, 20.0, 0, 0);
        
        //Mirrors2.SetSubstituteCharacter(oMirror3, cMarcus);
        mirrorsCreated = true;
    }


    //You must enable the mirrors manually after you create them
    Mirrors2.EnableMirror(oMirror0);
    Mirrors2.EnableMirror(oMirror1);
    Mirrors2.EnableMirror(oMirror2);
    //you could also do : Mirrors2.EnableAllMirrorsInRoom();


    //////////// PARTICLES /////////////
    
    initParticles();
    //initWeatherModule();
    
    /////////// ICICLES /////////////////
    

    int icicle1;
    
    if (iciclesCreated == false) {
        
        icicle1 = Icicles.NewIcicle(oPilar, 45, 90, region[10],  false);
        Icicles.SetProportions(icicle1, 2, 2, 15);
        Icicles.SetScale(icicle1, 0.6, 1.0);
        
        
        iciclesCreated = true;
    }
      
    Icicles.Enable(icicle1);
    oPilar.Transparency = 50;
    
    /////////// SOUND //////////////////
    
    //aSnow_tempest.Play_Ambient(50);
    //DumpChannels();
    aAmbiant_cave1.Play_Ambient(50); //the sound is adjusted later by the player's position in the room
    //DumpChannels();
    aAmbiant_cave2.Play_Ambient(50); //the sound is adjusted later by the player's position in the room
    //DumpChannels();
   
    DumpChannels();
}

function room_Leave()
{

  Mirrors2.DisableAllMirrors(); //optionaly, you can do that
  Icicles.DisableAll();
}

function repeatedly_execute_always()
{
  
  ps.RenderParticles();
  oSnow.Graphic = ps.theSprite.Graphic;
  
  LocalizeAmbientSounds();
}




